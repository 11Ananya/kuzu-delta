-NAME TwoNodeCycleTest
-QUERY MATCH (a:person)-[:knows]->(b:person), (b)-[:knows]->(a) RETURN COUNT(*)
-ENUMERATE
---- 1
12

-NAME TwoNodeCycleWithProjectionTest
-QUERY MATCH (a:person)-[:knows]->(b:person), (b)-[:knows]->(a) RETURN a.fName, b.fName
-ENUMERATE
---- 12
Alice|Bob
Alice|Carol
Alice|Dan
Bob|Alice
Bob|Carol
Bob|Dan
Carol|Alice
Carol|Bob
Carol|Dan
Dan|Alice
Dan|Bob
Dan|Carol

-NAME TriangleTest
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:knows]->(c:person), (a)-[:knows]->(c) RETURN COUNT(*)
-ENUMERATE
---- 1
24

-NAME TriangleTest2
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:studyAt]->(c:organisation), (a)-[:studyAt]->(c) RETURN COUNT(*)
-ENUMERATE
---- 1
2

-NAME TriangleFilterTest2
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:studyAt]->(c:organisation), (a)-[e:studyAt]->(c) WHERE a.fName='Alice' RETURN COUNT(*)
-ENUMERATE
---- 1
1

-NAME TriangleFilterWithProjectionTest
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:knows]->(c:person), (a)-[:knows]->(c) WHERE a.ID<b.ID and b.ID<c.ID RETURN a.fName, b.fName, c.fName
-ENUMERATE
---- 4
Alice|Bob|Carol
Alice|Bob|Dan
Alice|Carol|Dan
Bob|Carol|Dan

-NAME TriangleFilterWithProjectionTest2
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:studyAt]->(c:organisation), (a)-[e:studyAt]->(c) WHERE a.fName='Bob' RETURN a.fName, b.fName, c.name
-ENUMERATE
---- 1
Bob|Alice|ABFsUni

-NAME SquareTest
-QUERY MATCH (a:person)-[:knows]->(b:person)-[:knows]->(c:person)-[:knows]->(d:person), (a)-[:knows]->(d) RETURN COUNT(*)
-ENUMERATE
---- 1
84

-NAME SquareTest2
-QUERY MATCH (a:person)<-[:knows]-(b:person)-[:knows]->(c:person)-[:studyAt]->(d:organisation), (a)-[:studyAt]->(d) RETURN COUNT(*)
-ENUMERATE
---- 1
11

-NAME SquareFilterWithProjectionTest
-QUERY MATCH (a:person)<-[:knows]-(b:person)-[:knows]->(c:person)-[:studyAt]->(d:organisation), (a)-[:studyAt]->(d) WHERE a.fName='Bob' RETURN a.fName, b.fName, c.fName, d.name
-ENUMERATE
---- 5
Bob|Alice|Bob|ABFsUni
Bob|Carol|Alice|ABFsUni
Bob|Carol|Bob|ABFsUni
Bob|Dan|Alice|ABFsUni
Bob|Dan|Bob|ABFsUni

-NAME SquareFilterTest2
-QUERY MATCH (a:person)<-[:knows]-(b:person)-[:knows]->(c:person)-[:studyAt]->(d:organisation), (a)-[:studyAt]->(d) WHERE b.fName='Elizabeth' RETURN COUNT(*)
-ENUMERATE
---- 1
1
