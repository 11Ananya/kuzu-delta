
// Generated from Cypher.g4 by ANTLR 4.13.1



#include "cypher_parser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct CypherParserStaticData final {
  CypherParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CypherParserStaticData(const CypherParserStaticData&) = delete;
  CypherParserStaticData(CypherParserStaticData&&) = delete;
  CypherParserStaticData& operator=(const CypherParserStaticData&) = delete;
  CypherParserStaticData& operator=(CypherParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cypherParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CypherParserStaticData *cypherParserStaticData = nullptr;

void cypherParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cypherParserStaticData != nullptr) {
    return;
  }
#else
  assert(cypherParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CypherParserStaticData>(
    std::vector<std::string>{
      "oC_Cypher", "oC_Statement", "kU_CopyFrom", "kU_ColumnNames", "kU_CopyFromByColumn", 
      "kU_CopyTO", "kU_StandaloneCall", "kU_CommentOn", "kU_CreateMacro", 
      "kU_PositionalArgs", "kU_DefaultArg", "kU_FilePaths", "kU_ParsingOptions", 
      "kU_ParsingOption", "kU_DDL", "kU_CreateNodeTable", "kU_CreateRelTable", 
      "kU_CreateRelTableGroup", "kU_RelTableConnection", "kU_CreateRdfGraph", 
      "kU_DropTable", "kU_AlterTable", "kU_AlterOptions", "kU_AddProperty", 
      "kU_DropProperty", "kU_RenameTable", "kU_RenameProperty", "kU_PropertyDefinitions", 
      "kU_PropertyDefinition", "kU_CreateNodeConstraint", "kU_DataType", 
      "kU_ListIdentifiers", "kU_ListIdentifier", "oC_AnyCypherOption", "oC_Explain", 
      "oC_Profile", "kU_Transaction", "kU_Extension", "kU_LoadExtension", 
      "kU_InstallExtension", "oC_Query", "oC_RegularQuery", "oC_Union", 
      "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "kU_QueryPart", 
      "oC_UpdatingClause", "oC_ReadingClause", "kU_LoadFrom", "kU_InQueryCall", 
      "oC_Match", "oC_Unwind", "oC_Create", "oC_Merge", "oC_MergeAction", 
      "oC_Set", "oC_SetItem", "oC_Delete", "oC_With", "oC_Return", "oC_ProjectionBody", 
      "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", 
      "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
      "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", 
      "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", 
      "kU_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", 
      "oC_RangeLiteral", "kU_RecursiveRelationshipComprehension", "kU_IntermediateNodeProjectionItems", 
      "kU_IntermediateRelProjectionItems", "oC_LowerBound", "oC_UpperBound", 
      "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
      "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", 
      "kU_ComparisonOperator", "kU_BitwiseOrOperatorExpression", "kU_BitwiseAndOperatorExpression", 
      "kU_BitShiftOperatorExpression", "kU_BitShiftOperator", "oC_AddOrSubtractExpression", 
      "kU_AddOrSubtractOperator", "oC_MultiplyDivideModuloExpression", "kU_MultiplyDivideModuloOperator", 
      "oC_PowerOfExpression", "oC_UnaryAddSubtractOrFactorialExpression", 
      "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", 
      "kU_ListExtractOperatorExpression", "kU_ListSliceOperatorExpression", 
      "oC_StringOperatorExpression", "oC_RegularExpression", "oC_NullOperatorExpression", 
      "oC_PropertyOrLabelsExpression", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", 
      "oC_ListLiteral", "kU_ListEntry", "kU_StructLiteral", "kU_StructField", 
      "oC_ParenthesizedExpression", "oC_FunctionInvocation", "oC_FunctionName", 
      "kU_FunctionParameter", "oC_PathPatterns", "oC_ExistSubquery", "kU_CountSubquery", 
      "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternative", "oC_Variable", 
      "oC_NumberLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", 
      "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_SymbolicName", 
      "kU_NonReservedKeywords", "oC_LeftArrowHead", "oC_RightArrowHead", 
      "oC_Dash"
    },
    std::vector<std::string>{
      "", "';'", "'('", "')'", "','", "'='", "':'", "'['", "']'", "'{'", 
      "'}'", "'|'", "'..'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'&'", 
      "'>>'", "'<<'", "'+'", "'/'", "'%'", "'^'", "'=~'", "'.'", "'$'", 
      "'\\u27E8'", "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
      "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", "'\\u2011'", "'\\u2012'", 
      "'\\u2013'", "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
      "'\\uFF0D'", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "'*'", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "'!='", "'-'", "'!'", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "'0'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "CALL", "COMMENT", 
      "MACRO", "GLOB", "COPY", "FROM", "COLUMN", "NODE", "TABLE", "GROUP", 
      "RDF", "GRAPH", "DROP", "ALTER", "DEFAULT", "RENAME", "ADD", "PRIMARY", 
      "KEY", "REL", "TO", "EXPLAIN", "PROFILE", "BEGIN", "TRANSACTION", 
      "READ", "ONLY", "WRITE", "COMMIT", "COMMIT_SKIP_CHECKPOINT", "ROLLBACK", 
      "ROLLBACK_SKIP_CHECKPOINT", "INSTALL", "EXTENSION", "UNION", "ALL", 
      "LOAD", "HEADERS", "OPTIONAL", "MATCH", "UNWIND", "CREATE", "MERGE", 
      "ON", "SET", "DETACH", "DELETE", "WITH", "RETURN", "DISTINCT", "STAR", 
      "AS", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", 
      "DESC", "WHERE", "SHORTEST", "OR", "XOR", "AND", "NOT", "INVALID_NOT_EQUAL", 
      "MINUS", "FACTORIAL", "STARTS", "ENDS", "CONTAINS", "IS", "NULL_", 
      "TRUE", "FALSE", "COUNT", "EXISTS", "CASE", "ELSE", "END", "WHEN", 
      "THEN", "StringLiteral", "EscapedChar", "DecimalInteger", "HexLetter", 
      "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "ZeroDigit", 
      "RegularDecimalReal", "UnescapedSymbolicName", "IdentifierStart", 
      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", 
      "Unknown"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,147,2268,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,1,0,3,0,290,8,0,1,0,3,0,293,
  	8,0,1,0,3,0,296,8,0,1,0,1,0,3,0,300,8,0,1,0,3,0,303,8,0,1,0,3,0,306,8,
  	0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,320,8,1,1,2,1,2,
  	1,2,1,2,3,2,326,8,2,1,2,1,2,3,2,330,8,2,1,2,1,2,3,2,334,8,2,1,2,1,2,3,
  	2,338,8,2,1,2,3,2,341,8,2,1,2,1,2,1,2,1,2,3,2,347,8,2,1,2,3,2,350,8,2,
  	1,2,1,2,3,2,354,8,2,1,2,1,2,3,2,358,8,2,1,2,1,2,3,2,362,8,2,1,3,1,3,3,
  	3,366,8,3,1,3,1,3,3,3,370,8,3,1,3,5,3,373,8,3,10,3,12,3,376,9,3,1,4,1,
  	4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,386,8,4,1,4,1,4,3,4,390,8,4,1,4,1,4,3,4,
  	394,8,4,1,4,5,4,397,8,4,10,4,12,4,400,9,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
  	1,5,1,5,1,5,3,5,412,8,5,1,5,1,5,3,5,416,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,
  	5,424,8,5,1,5,1,5,3,5,428,8,5,1,5,1,5,3,5,432,8,5,1,5,1,5,3,5,436,8,5,
  	1,6,1,6,1,6,1,6,3,6,442,8,6,1,6,1,6,3,6,446,8,6,1,6,1,6,1,7,1,7,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,468,8,8,
  	1,8,1,8,3,8,472,8,8,1,8,3,8,475,8,8,1,8,3,8,478,8,8,1,8,3,8,481,8,8,1,
  	8,3,8,484,8,8,1,8,1,8,3,8,488,8,8,1,8,5,8,491,8,8,10,8,12,8,494,9,8,1,
  	8,3,8,497,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,3,9,507,8,9,1,9,1,9,3,9,
  	511,8,9,1,9,5,9,514,8,9,10,9,12,9,517,9,9,1,10,1,10,3,10,521,8,10,1,10,
  	1,10,1,10,3,10,526,8,10,1,10,1,10,1,11,1,11,3,11,532,8,11,1,11,1,11,3,
  	11,536,8,11,1,11,1,11,3,11,540,8,11,1,11,5,11,543,8,11,10,11,12,11,546,
  	9,11,1,11,1,11,1,11,1,11,3,11,552,8,11,1,11,1,11,3,11,556,8,11,1,11,1,
  	11,3,11,560,8,11,1,11,3,11,563,8,11,1,12,1,12,3,12,567,8,12,1,12,1,12,
  	3,12,571,8,12,1,12,5,12,574,8,12,10,12,12,12,577,9,12,1,13,1,13,3,13,
  	581,8,13,1,13,1,13,3,13,585,8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,
  	14,3,14,595,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,605,8,15,
  	1,15,1,15,3,15,609,8,15,1,15,1,15,3,15,613,8,15,1,15,1,15,3,15,617,8,
  	15,1,15,1,15,1,15,3,15,622,8,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
  	16,1,16,1,16,3,16,634,8,16,1,16,1,16,3,16,638,8,16,1,16,1,16,3,16,642,
  	8,16,1,16,1,16,3,16,646,8,16,1,16,1,16,3,16,650,8,16,3,16,652,8,16,1,
  	16,1,16,3,16,656,8,16,1,16,1,16,3,16,660,8,16,3,16,662,8,16,1,16,1,16,
  	1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,676,8,17,1,17,
  	1,17,3,17,680,8,17,1,17,1,17,3,17,684,8,17,1,17,1,17,3,17,688,8,17,1,
  	17,4,17,691,8,17,11,17,12,17,692,1,17,3,17,696,8,17,1,17,1,17,3,17,700,
  	8,17,1,17,1,17,3,17,704,8,17,3,17,706,8,17,1,17,1,17,3,17,710,8,17,1,
  	17,1,17,3,17,714,8,17,3,17,716,8,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
  	1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
  	1,22,3,22,754,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,
  	765,8,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,3,27,787,8,27,1,27,1,27,3,27,
  	791,8,27,1,27,5,27,794,8,27,10,27,12,27,797,9,27,1,28,1,28,1,28,1,28,
  	1,29,1,29,1,29,1,29,3,29,807,8,29,1,29,1,29,3,29,811,8,29,1,29,1,29,3,
  	29,815,8,29,1,29,1,29,1,30,1,30,1,30,1,30,3,30,823,8,30,1,30,1,30,3,30,
  	827,8,30,1,30,1,30,3,30,831,8,30,1,30,1,30,1,30,1,30,3,30,837,8,30,1,
  	30,1,30,3,30,841,8,30,1,30,1,30,3,30,845,8,30,1,30,1,30,1,30,1,30,3,30,
  	851,8,30,1,30,1,30,3,30,855,8,30,1,30,1,30,3,30,859,8,30,1,30,1,30,3,
  	30,863,8,30,1,30,1,30,3,30,867,8,30,1,30,1,30,3,30,871,8,30,1,30,1,30,
  	5,30,875,8,30,10,30,12,30,878,9,30,1,31,1,31,5,31,882,8,31,10,31,12,31,
  	885,9,31,1,32,1,32,3,32,889,8,32,1,32,1,32,1,33,1,33,3,33,895,8,33,1,
  	34,1,34,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,36,3,36,915,8,36,1,37,1,37,3,37,919,8,37,1,38,1,38,1,38,
  	1,38,1,38,1,38,3,38,927,8,38,1,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,
  	3,41,937,8,41,1,41,5,41,940,8,41,10,41,12,41,943,9,41,1,41,1,41,3,41,
  	947,8,41,4,41,949,8,41,11,41,12,41,950,1,41,1,41,1,41,3,41,956,8,41,1,
  	42,1,42,1,42,1,42,3,42,962,8,42,1,42,1,42,1,42,3,42,967,8,42,1,42,3,42,
  	970,8,42,1,43,1,43,3,43,974,8,43,1,44,1,44,3,44,978,8,44,5,44,980,8,44,
  	10,44,12,44,983,9,44,1,44,1,44,1,44,3,44,988,8,44,5,44,990,8,44,10,44,
  	12,44,993,9,44,1,44,1,44,3,44,997,8,44,1,44,5,44,1000,8,44,10,44,12,44,
  	1003,9,44,1,44,3,44,1006,8,44,1,44,3,44,1009,8,44,1,44,1,44,3,44,1013,
  	8,44,4,44,1015,8,44,11,44,12,44,1016,1,44,1,44,3,44,1021,8,44,1,45,1,
  	45,3,45,1025,8,45,4,45,1027,8,45,11,45,12,45,1028,1,45,1,45,1,46,1,46,
  	3,46,1035,8,46,5,46,1037,8,46,10,46,12,46,1040,9,46,1,46,1,46,3,46,1044,
  	8,46,5,46,1046,8,46,10,46,12,46,1049,9,46,1,46,1,46,1,47,1,47,1,47,1,
  	47,3,47,1057,8,47,1,48,1,48,1,48,1,48,3,48,1063,8,48,1,49,1,49,1,49,1,
  	49,1,49,1,49,3,49,1071,8,49,1,49,1,49,3,49,1075,8,49,1,49,1,49,3,49,1079,
  	8,49,1,49,1,49,3,49,1083,8,49,1,49,1,49,1,49,1,49,1,49,3,49,1090,8,49,
  	1,49,1,49,3,49,1094,8,49,1,49,1,49,3,49,1098,8,49,1,49,1,49,3,49,1102,
  	8,49,1,49,3,49,1105,8,49,1,49,3,49,1108,8,49,1,49,3,49,1111,8,49,1,50,
  	1,50,1,50,1,50,3,50,1117,8,50,1,50,3,50,1120,8,50,1,51,1,51,3,51,1124,
  	8,51,1,51,1,51,3,51,1128,8,51,1,51,1,51,3,51,1132,8,51,1,51,3,51,1135,
  	8,51,1,52,1,52,3,52,1139,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,
  	3,53,1149,8,53,1,53,1,53,1,54,1,54,3,54,1155,8,54,1,54,1,54,1,54,5,54,
  	1160,8,54,10,54,12,54,1163,9,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
  	55,1,55,1,55,3,55,1175,8,55,1,56,1,56,3,56,1179,8,56,1,56,1,56,3,56,1183,
  	8,56,1,56,1,56,3,56,1187,8,56,1,56,5,56,1190,8,56,10,56,12,56,1193,9,
  	56,1,57,1,57,3,57,1197,8,57,1,57,1,57,3,57,1201,8,57,1,57,1,57,1,58,1,
  	58,3,58,1207,8,58,1,58,1,58,3,58,1211,8,58,1,58,1,58,3,58,1215,8,58,1,
  	58,1,58,3,58,1219,8,58,1,58,5,58,1222,8,58,10,58,12,58,1225,9,58,1,59,
  	1,59,1,59,3,59,1230,8,59,1,59,3,59,1233,8,59,1,60,1,60,1,60,1,61,3,61,
  	1239,8,61,1,61,3,61,1242,8,61,1,61,1,61,1,61,1,61,3,61,1248,8,61,1,61,
  	1,61,3,61,1252,8,61,1,61,1,61,3,61,1256,8,61,1,62,1,62,3,62,1260,8,62,
  	1,62,1,62,3,62,1264,8,62,1,62,5,62,1267,8,62,10,62,12,62,1270,9,62,1,
  	62,1,62,3,62,1274,8,62,1,62,1,62,3,62,1278,8,62,1,62,5,62,1281,8,62,10,
  	62,12,62,1284,9,62,3,62,1286,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
  	3,63,1295,8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1304,8,64,1,64,
  	5,64,1307,8,64,10,64,12,64,1310,9,64,1,65,1,65,1,65,1,65,1,66,1,66,1,
  	66,1,66,1,67,1,67,3,67,1322,8,67,1,67,3,67,1325,8,67,1,68,1,68,1,68,1,
  	68,1,69,1,69,3,69,1333,8,69,1,69,1,69,3,69,1337,8,69,1,69,5,69,1340,8,
  	69,10,69,12,69,1343,9,69,1,70,1,70,3,70,1347,8,70,1,70,1,70,3,70,1351,
  	8,70,1,70,1,70,1,70,3,70,1356,8,70,1,71,1,71,1,72,1,72,3,72,1362,8,72,
  	1,72,5,72,1365,8,72,10,72,12,72,1368,9,72,1,72,1,72,1,72,1,72,3,72,1374,
  	8,72,1,73,1,73,3,73,1378,8,73,1,73,1,73,3,73,1382,8,73,3,73,1384,8,73,
  	1,73,1,73,3,73,1388,8,73,3,73,1390,8,73,1,73,1,73,3,73,1394,8,73,3,73,
  	1396,8,73,1,73,1,73,1,74,1,74,3,74,1402,8,74,1,74,1,74,1,75,1,75,3,75,
  	1408,8,75,1,75,1,75,3,75,1412,8,75,1,75,3,75,1415,8,75,1,75,3,75,1418,
  	8,75,1,75,1,75,1,75,1,75,3,75,1424,8,75,1,75,3,75,1427,8,75,1,75,3,75,
  	1430,8,75,1,75,1,75,3,75,1434,8,75,1,75,1,75,1,75,1,75,3,75,1440,8,75,
  	1,75,3,75,1443,8,75,1,75,3,75,1446,8,75,1,75,1,75,3,75,1450,8,75,1,76,
  	1,76,3,76,1454,8,76,1,76,1,76,3,76,1458,8,76,3,76,1460,8,76,1,76,1,76,
  	3,76,1464,8,76,3,76,1466,8,76,1,76,1,76,3,76,1470,8,76,3,76,1472,8,76,
  	1,76,1,76,3,76,1476,8,76,3,76,1478,8,76,1,76,1,76,1,77,1,77,3,77,1484,
  	8,77,1,77,1,77,3,77,1488,8,77,1,77,1,77,3,77,1492,8,77,1,77,1,77,3,77,
  	1496,8,77,1,77,1,77,3,77,1500,8,77,1,77,1,77,3,77,1504,8,77,1,77,1,77,
  	3,77,1508,8,77,1,77,1,77,3,77,1512,8,77,5,77,1514,8,77,10,77,12,77,1517,
  	9,77,3,77,1519,8,77,1,77,1,77,1,78,1,78,3,78,1525,8,78,1,78,1,78,3,78,
  	1529,8,78,1,78,1,78,3,78,1533,8,78,1,78,3,78,1536,8,78,1,78,5,78,1539,
  	8,78,10,78,12,78,1542,9,78,1,79,1,79,3,79,1546,8,79,1,79,5,79,1549,8,
  	79,10,79,12,79,1552,9,79,1,80,1,80,3,80,1556,8,80,1,80,1,80,1,81,1,81,
  	3,81,1562,8,81,1,81,1,81,1,81,1,81,3,81,1568,8,81,1,81,3,81,1571,8,81,
  	1,81,3,81,1574,8,81,1,81,3,81,1577,8,81,1,81,1,81,3,81,1581,8,81,1,81,
  	3,81,1584,8,81,1,81,3,81,1587,8,81,1,81,3,81,1590,8,81,1,81,3,81,1593,
  	8,81,1,82,1,82,3,82,1597,8,82,1,82,1,82,3,82,1601,8,82,1,82,1,82,3,82,
  	1605,8,82,1,82,1,82,3,82,1609,8,82,1,82,1,82,3,82,1613,8,82,1,82,3,82,
  	1616,8,82,1,82,3,82,1619,8,82,1,82,1,82,3,82,1623,8,82,1,82,1,82,3,82,
  	1627,8,82,1,82,1,82,3,82,1631,8,82,1,82,1,82,3,82,1635,8,82,3,82,1637,
  	8,82,1,82,1,82,1,83,1,83,3,83,1643,8,83,1,83,3,83,1646,8,83,1,83,3,83,
  	1649,8,83,1,83,1,83,1,84,1,84,3,84,1655,8,84,1,84,3,84,1658,8,84,1,84,
  	3,84,1661,8,84,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,
  	1,89,1,90,1,90,1,90,1,90,1,90,5,90,1680,8,90,10,90,12,90,1683,9,90,1,
  	91,1,91,1,91,1,91,1,91,5,91,1690,8,91,10,91,12,91,1693,9,91,1,92,1,92,
  	1,92,1,92,1,92,5,92,1700,8,92,10,92,12,92,1703,9,92,1,93,1,93,3,93,1707,
  	8,93,5,93,1709,8,93,10,93,12,93,1712,9,93,1,93,1,93,1,94,1,94,3,94,1718,
  	8,94,1,94,1,94,3,94,1722,8,94,1,94,1,94,3,94,1726,8,94,1,94,1,94,3,94,
  	1730,8,94,1,94,1,94,3,94,1734,8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,
  	1742,8,94,1,94,1,94,3,94,1746,8,94,1,94,1,94,3,94,1750,8,94,1,94,1,94,
  	3,94,1754,8,94,1,94,1,94,4,94,1758,8,94,11,94,12,94,1759,1,94,1,94,3,
  	94,1764,8,94,1,95,1,95,1,96,1,96,3,96,1770,8,96,1,96,1,96,3,96,1774,8,
  	96,1,96,5,96,1777,8,96,10,96,12,96,1780,9,96,1,97,1,97,3,97,1784,8,97,
  	1,97,1,97,3,97,1788,8,97,1,97,5,97,1791,8,97,10,97,12,97,1794,9,97,1,
  	98,1,98,3,98,1798,8,98,1,98,1,98,3,98,1802,8,98,1,98,1,98,5,98,1806,8,
  	98,10,98,12,98,1809,9,98,1,99,1,99,1,100,1,100,3,100,1815,8,100,1,100,
  	1,100,3,100,1819,8,100,1,100,1,100,5,100,1823,8,100,10,100,12,100,1826,
  	9,100,1,101,1,101,1,102,1,102,3,102,1832,8,102,1,102,1,102,3,102,1836,
  	8,102,1,102,1,102,5,102,1840,8,102,10,102,12,102,1843,9,102,1,103,1,103,
  	1,104,1,104,3,104,1849,8,104,1,104,1,104,3,104,1853,8,104,1,104,5,104,
  	1856,8,104,10,104,12,104,1859,9,104,1,105,1,105,3,105,1863,8,105,5,105,
  	1865,8,105,10,105,12,105,1868,9,105,1,105,1,105,3,105,1872,8,105,1,105,
  	3,105,1875,8,105,1,106,1,106,1,106,4,106,1880,8,106,11,106,12,106,1881,
  	1,106,3,106,1885,8,106,1,107,1,107,3,107,1889,8,107,1,108,1,108,1,108,
  	1,108,1,109,1,109,3,109,1897,8,109,1,109,1,109,3,109,1901,8,109,1,109,
  	1,109,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,
  	3,110,1916,8,110,1,110,3,110,1919,8,110,1,110,1,110,1,111,3,111,1924,
  	8,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
  	1,112,3,112,1938,8,112,1,113,1,113,3,113,1942,8,113,1,113,5,113,1945,
  	8,113,10,113,12,113,1948,9,113,1,114,1,114,1,114,1,114,1,114,1,114,1,
  	114,1,114,1,114,3,114,1959,8,114,1,115,1,115,1,115,1,115,1,115,1,115,
  	3,115,1967,8,115,1,116,1,116,1,117,1,117,3,117,1973,8,117,1,117,1,117,
  	3,117,1977,8,117,1,117,1,117,3,117,1981,8,117,5,117,1983,8,117,10,117,
  	12,117,1986,9,117,3,117,1988,8,117,1,117,1,117,1,118,1,118,3,118,1994,
  	8,118,1,118,3,118,1997,8,118,1,119,1,119,3,119,2001,8,119,1,119,1,119,
  	3,119,2005,8,119,1,119,1,119,3,119,2009,8,119,1,119,1,119,3,119,2013,
  	8,119,5,119,2015,8,119,10,119,12,119,2018,9,119,1,119,1,119,1,120,1,120,
  	3,120,2024,8,120,1,120,3,120,2027,8,120,1,120,1,120,3,120,2031,8,120,
  	1,120,1,120,1,121,1,121,3,121,2037,8,121,1,121,1,121,3,121,2041,8,121,
  	1,121,1,121,1,122,1,122,3,122,2047,8,122,1,122,1,122,3,122,2051,8,122,
  	1,122,1,122,3,122,2055,8,122,1,122,1,122,1,122,3,122,2060,8,122,1,122,
  	1,122,3,122,2064,8,122,1,122,1,122,3,122,2068,8,122,3,122,2070,8,122,
  	1,122,1,122,3,122,2074,8,122,1,122,1,122,3,122,2078,8,122,1,122,1,122,
  	3,122,2082,8,122,5,122,2084,8,122,10,122,12,122,2087,9,122,3,122,2089,
  	8,122,1,122,1,122,3,122,2093,8,122,1,123,1,123,1,124,1,124,3,124,2099,
  	8,124,1,124,1,124,1,124,3,124,2104,8,124,3,124,2106,8,124,1,124,1,124,
  	1,125,1,125,3,125,2112,8,125,1,125,4,125,2115,8,125,11,125,12,125,2116,
  	1,126,1,126,3,126,2121,8,126,1,126,1,126,3,126,2125,8,126,1,126,1,126,
  	3,126,2129,8,126,1,126,1,126,3,126,2133,8,126,1,126,3,126,2136,8,126,
  	1,126,3,126,2139,8,126,1,126,1,126,1,127,1,127,3,127,2145,8,127,1,127,
  	1,127,3,127,2149,8,127,1,127,1,127,3,127,2153,8,127,1,127,1,127,3,127,
  	2157,8,127,1,127,3,127,2160,8,127,1,127,3,127,2163,8,127,1,127,1,127,
  	1,128,1,128,3,128,2169,8,128,1,128,1,128,3,128,2173,8,128,1,129,1,129,
  	3,129,2177,8,129,1,129,4,129,2180,8,129,11,129,12,129,2181,1,129,1,129,
  	3,129,2186,8,129,1,129,1,129,3,129,2190,8,129,1,129,4,129,2193,8,129,
  	11,129,12,129,2194,3,129,2197,8,129,1,129,3,129,2200,8,129,1,129,1,129,
  	3,129,2204,8,129,1,129,3,129,2207,8,129,1,129,3,129,2210,8,129,1,129,
  	1,129,1,130,1,130,3,130,2216,8,130,1,130,1,130,3,130,2220,8,130,1,130,
  	1,130,3,130,2224,8,130,1,130,1,130,1,131,1,131,1,132,1,132,3,132,2232,
  	8,132,1,133,1,133,1,133,3,133,2237,8,133,1,134,1,134,3,134,2241,8,134,
  	1,134,1,134,1,135,1,135,1,136,1,136,1,137,1,137,1,138,1,138,1,139,1,139,
  	1,139,1,139,1,139,3,139,2258,8,139,1,140,1,140,1,141,1,141,1,142,1,142,
  	1,143,1,143,1,143,0,1,60,144,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
  	30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
  	76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
  	118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
  	154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
  	190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
  	226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
  	262,264,266,268,270,272,274,276,278,280,282,284,286,0,10,1,0,103,106,
  	2,0,5,5,13,17,1,0,19,20,2,0,21,21,114,114,2,0,22,23,97,97,1,0,121,122,
  	6,0,48,48,54,54,66,66,70,70,123,123,127,127,2,0,14,14,28,31,2,0,16,16,
  	32,35,2,0,36,46,114,114,2564,0,289,1,0,0,0,2,319,1,0,0,0,4,321,1,0,0,
  	0,6,363,1,0,0,0,8,377,1,0,0,0,10,407,1,0,0,0,12,437,1,0,0,0,14,449,1,
  	0,0,0,16,461,1,0,0,0,18,504,1,0,0,0,20,518,1,0,0,0,22,562,1,0,0,0,24,
  	564,1,0,0,0,26,578,1,0,0,0,28,594,1,0,0,0,30,596,1,0,0,0,32,625,1,0,0,
  	0,34,665,1,0,0,0,36,719,1,0,0,0,38,727,1,0,0,0,40,735,1,0,0,0,42,741,
  	1,0,0,0,44,753,1,0,0,0,46,755,1,0,0,0,48,766,1,0,0,0,50,770,1,0,0,0,52,
  	776,1,0,0,0,54,784,1,0,0,0,56,798,1,0,0,0,58,802,1,0,0,0,60,870,1,0,0,
  	0,62,879,1,0,0,0,64,886,1,0,0,0,66,894,1,0,0,0,68,896,1,0,0,0,70,898,
  	1,0,0,0,72,914,1,0,0,0,74,918,1,0,0,0,76,920,1,0,0,0,78,928,1,0,0,0,80,
  	932,1,0,0,0,82,955,1,0,0,0,84,969,1,0,0,0,86,973,1,0,0,0,88,1020,1,0,
  	0,0,90,1026,1,0,0,0,92,1038,1,0,0,0,94,1056,1,0,0,0,96,1062,1,0,0,0,98,
  	1064,1,0,0,0,100,1112,1,0,0,0,102,1123,1,0,0,0,104,1136,1,0,0,0,106,1146,
  	1,0,0,0,108,1152,1,0,0,0,110,1174,1,0,0,0,112,1176,1,0,0,0,114,1194,1,
  	0,0,0,116,1206,1,0,0,0,118,1226,1,0,0,0,120,1234,1,0,0,0,122,1241,1,0,
  	0,0,124,1285,1,0,0,0,126,1294,1,0,0,0,128,1296,1,0,0,0,130,1311,1,0,0,
  	0,132,1315,1,0,0,0,134,1319,1,0,0,0,136,1326,1,0,0,0,138,1330,1,0,0,0,
  	140,1355,1,0,0,0,142,1357,1,0,0,0,144,1373,1,0,0,0,146,1375,1,0,0,0,148,
  	1399,1,0,0,0,150,1449,1,0,0,0,152,1451,1,0,0,0,154,1481,1,0,0,0,156,1522,
  	1,0,0,0,158,1543,1,0,0,0,160,1553,1,0,0,0,162,1559,1,0,0,0,164,1594,1,
  	0,0,0,166,1640,1,0,0,0,168,1652,1,0,0,0,170,1664,1,0,0,0,172,1666,1,0,
  	0,0,174,1668,1,0,0,0,176,1670,1,0,0,0,178,1672,1,0,0,0,180,1674,1,0,0,
  	0,182,1684,1,0,0,0,184,1694,1,0,0,0,186,1710,1,0,0,0,188,1763,1,0,0,0,
  	190,1765,1,0,0,0,192,1767,1,0,0,0,194,1781,1,0,0,0,196,1795,1,0,0,0,198,
  	1810,1,0,0,0,200,1812,1,0,0,0,202,1827,1,0,0,0,204,1829,1,0,0,0,206,1844,
  	1,0,0,0,208,1846,1,0,0,0,210,1866,1,0,0,0,212,1876,1,0,0,0,214,1888,1,
  	0,0,0,216,1890,1,0,0,0,218,1894,1,0,0,0,220,1915,1,0,0,0,222,1923,1,0,
  	0,0,224,1937,1,0,0,0,226,1939,1,0,0,0,228,1958,1,0,0,0,230,1966,1,0,0,
  	0,232,1968,1,0,0,0,234,1970,1,0,0,0,236,1991,1,0,0,0,238,1998,1,0,0,0,
  	240,2023,1,0,0,0,242,2034,1,0,0,0,244,2092,1,0,0,0,246,2094,1,0,0,0,248,
  	2105,1,0,0,0,250,2109,1,0,0,0,252,2118,1,0,0,0,254,2142,1,0,0,0,256,2166,
  	1,0,0,0,258,2196,1,0,0,0,260,2213,1,0,0,0,262,2227,1,0,0,0,264,2231,1,
  	0,0,0,266,2233,1,0,0,0,268,2238,1,0,0,0,270,2244,1,0,0,0,272,2246,1,0,
  	0,0,274,2248,1,0,0,0,276,2250,1,0,0,0,278,2257,1,0,0,0,280,2259,1,0,0,
  	0,282,2261,1,0,0,0,284,2263,1,0,0,0,286,2265,1,0,0,0,288,290,5,144,0,
  	0,289,288,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,293,3,66,33,0,292,
  	291,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,296,5,144,0,0,295,294,
  	1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,0,297,302,3,2,1,0,298,300,5,144,
  	0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,0,301,303,5,1,0,0,302,
  	299,1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,306,5,144,0,0,305,304,
  	1,0,0,0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,5,0,0,1,308,1,1,0,0,0,
  	309,320,3,80,40,0,310,320,3,28,14,0,311,320,3,4,2,0,312,320,3,8,4,0,313,
  	320,3,10,5,0,314,320,3,12,6,0,315,320,3,16,8,0,316,320,3,14,7,0,317,320,
  	3,72,36,0,318,320,3,74,37,0,319,309,1,0,0,0,319,310,1,0,0,0,319,311,1,
  	0,0,0,319,312,1,0,0,0,319,313,1,0,0,0,319,314,1,0,0,0,319,315,1,0,0,0,
  	319,316,1,0,0,0,319,317,1,0,0,0,319,318,1,0,0,0,320,3,1,0,0,0,321,322,
  	5,51,0,0,322,323,5,144,0,0,323,340,3,276,138,0,324,326,5,144,0,0,325,
  	324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,329,5,2,0,0,328,330,5,
  	144,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,333,3,6,3,
  	0,332,334,5,144,0,0,333,332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,
  	337,5,3,0,0,336,338,5,144,0,0,337,336,1,0,0,0,337,338,1,0,0,0,338,341,
  	1,0,0,0,339,341,5,144,0,0,340,325,1,0,0,0,340,339,1,0,0,0,341,342,1,0,
  	0,0,342,343,5,52,0,0,343,346,5,144,0,0,344,347,3,22,11,0,345,347,3,262,
  	131,0,346,344,1,0,0,0,346,345,1,0,0,0,347,361,1,0,0,0,348,350,5,144,0,
  	0,349,348,1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,353,5,2,0,0,352,
  	354,5,144,0,0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,357,
  	3,24,12,0,356,358,5,144,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,359,1,
  	0,0,0,359,360,5,3,0,0,360,362,1,0,0,0,361,349,1,0,0,0,361,362,1,0,0,0,
  	362,5,1,0,0,0,363,374,3,276,138,0,364,366,5,144,0,0,365,364,1,0,0,0,365,
  	366,1,0,0,0,366,367,1,0,0,0,367,369,5,4,0,0,368,370,5,144,0,0,369,368,
  	1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,373,3,276,138,0,372,365,1,
  	0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,7,1,0,0,0,376,
  	374,1,0,0,0,377,378,5,51,0,0,378,379,5,144,0,0,379,380,3,276,138,0,380,
  	381,5,144,0,0,381,382,5,52,0,0,382,383,5,144,0,0,383,385,5,2,0,0,384,
  	386,5,144,0,0,385,384,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,398,
  	5,130,0,0,388,390,5,144,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,
  	0,0,0,391,393,5,4,0,0,392,394,5,144,0,0,393,392,1,0,0,0,393,394,1,0,0,
  	0,394,395,1,0,0,0,395,397,5,130,0,0,396,389,1,0,0,0,397,400,1,0,0,0,398,
  	396,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,5,
  	3,0,0,402,403,5,144,0,0,403,404,5,100,0,0,404,405,5,144,0,0,405,406,5,
  	53,0,0,406,9,1,0,0,0,407,408,5,51,0,0,408,409,5,144,0,0,409,411,5,2,0,
  	0,410,412,5,144,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,
  	415,3,80,40,0,414,416,5,144,0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,
  	1,0,0,0,417,418,5,3,0,0,418,419,5,144,0,0,419,420,5,67,0,0,420,421,5,
  	144,0,0,421,435,5,130,0,0,422,424,5,144,0,0,423,422,1,0,0,0,423,424,1,
  	0,0,0,424,425,1,0,0,0,425,427,5,2,0,0,426,428,5,144,0,0,427,426,1,0,0,
  	0,427,428,1,0,0,0,428,429,1,0,0,0,429,431,3,24,12,0,430,432,5,144,0,0,
  	431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,5,3,0,0,434,436,
  	1,0,0,0,435,423,1,0,0,0,435,436,1,0,0,0,436,11,1,0,0,0,437,438,5,47,0,
  	0,438,439,5,144,0,0,439,441,3,278,139,0,440,442,5,144,0,0,441,440,1,0,
  	0,0,441,442,1,0,0,0,442,443,1,0,0,0,443,445,5,5,0,0,444,446,5,144,0,0,
  	445,444,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,448,3,230,115,0,448,
  	13,1,0,0,0,449,450,5,48,0,0,450,451,5,144,0,0,451,452,5,90,0,0,452,453,
  	5,144,0,0,453,454,5,55,0,0,454,455,5,144,0,0,455,456,3,276,138,0,456,
  	457,5,144,0,0,457,458,5,119,0,0,458,459,5,144,0,0,459,460,5,130,0,0,460,
  	15,1,0,0,0,461,462,5,88,0,0,462,463,5,144,0,0,463,464,5,49,0,0,464,465,
  	5,144,0,0,465,467,3,246,123,0,466,468,5,144,0,0,467,466,1,0,0,0,467,468,
  	1,0,0,0,468,469,1,0,0,0,469,471,5,2,0,0,470,472,5,144,0,0,471,470,1,0,
  	0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,475,3,18,9,0,474,473,1,0,0,0,
  	474,475,1,0,0,0,475,477,1,0,0,0,476,478,5,144,0,0,477,476,1,0,0,0,477,
  	478,1,0,0,0,478,480,1,0,0,0,479,481,3,20,10,0,480,479,1,0,0,0,480,481,
  	1,0,0,0,481,492,1,0,0,0,482,484,5,144,0,0,483,482,1,0,0,0,483,484,1,0,
  	0,0,484,485,1,0,0,0,485,487,5,4,0,0,486,488,5,144,0,0,487,486,1,0,0,0,
  	487,488,1,0,0,0,488,489,1,0,0,0,489,491,3,20,10,0,490,483,1,0,0,0,491,
  	494,1,0,0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,496,1,0,0,0,494,492,1,
  	0,0,0,495,497,5,144,0,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,
  	0,498,499,5,3,0,0,499,500,5,144,0,0,500,501,5,98,0,0,501,502,5,144,0,
  	0,502,503,3,178,89,0,503,17,1,0,0,0,504,515,3,278,139,0,505,507,5,144,
  	0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,510,5,4,0,0,509,
  	511,5,144,0,0,510,509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,514,
  	3,278,139,0,513,506,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,1,
  	0,0,0,516,19,1,0,0,0,517,515,1,0,0,0,518,520,3,278,139,0,519,521,5,144,
  	0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,5,6,0,0,523,
  	525,5,5,0,0,524,526,5,144,0,0,525,524,1,0,0,0,525,526,1,0,0,0,526,527,
  	1,0,0,0,527,528,3,230,115,0,528,21,1,0,0,0,529,531,5,7,0,0,530,532,5,
  	144,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,544,5,130,
  	0,0,534,536,5,144,0,0,535,534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,
  	537,539,5,4,0,0,538,540,5,144,0,0,539,538,1,0,0,0,539,540,1,0,0,0,540,
  	541,1,0,0,0,541,543,5,130,0,0,542,535,1,0,0,0,543,546,1,0,0,0,544,542,
  	1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,544,1,0,0,0,547,563,5,8,0,
  	0,548,563,5,130,0,0,549,551,5,50,0,0,550,552,5,144,0,0,551,550,1,0,0,
  	0,551,552,1,0,0,0,552,553,1,0,0,0,553,555,5,2,0,0,554,556,5,144,0,0,555,
  	554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,559,5,130,0,0,558,560,
  	5,144,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,563,5,3,
  	0,0,562,529,1,0,0,0,562,548,1,0,0,0,562,549,1,0,0,0,563,23,1,0,0,0,564,
  	575,3,26,13,0,565,567,5,144,0,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,
  	1,0,0,0,568,570,5,4,0,0,569,571,5,144,0,0,570,569,1,0,0,0,570,571,1,0,
  	0,0,571,572,1,0,0,0,572,574,3,26,13,0,573,566,1,0,0,0,574,577,1,0,0,0,
  	575,573,1,0,0,0,575,576,1,0,0,0,576,25,1,0,0,0,577,575,1,0,0,0,578,580,
  	3,278,139,0,579,581,5,144,0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,
  	1,0,0,0,582,584,5,5,0,0,583,585,5,144,0,0,584,583,1,0,0,0,584,585,1,0,
  	0,0,585,586,1,0,0,0,586,587,3,230,115,0,587,27,1,0,0,0,588,595,3,30,15,
  	0,589,595,3,32,16,0,590,595,3,34,17,0,591,595,3,38,19,0,592,595,3,40,
  	20,0,593,595,3,42,21,0,594,588,1,0,0,0,594,589,1,0,0,0,594,590,1,0,0,
  	0,594,591,1,0,0,0,594,592,1,0,0,0,594,593,1,0,0,0,595,29,1,0,0,0,596,
  	597,5,88,0,0,597,598,5,144,0,0,598,599,5,54,0,0,599,600,5,144,0,0,600,
  	601,5,55,0,0,601,602,5,144,0,0,602,604,3,276,138,0,603,605,5,144,0,0,
  	604,603,1,0,0,0,604,605,1,0,0,0,605,606,1,0,0,0,606,608,5,2,0,0,607,609,
  	5,144,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,612,3,54,
  	27,0,611,613,5,144,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,
  	0,614,616,5,4,0,0,615,617,5,144,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,
  	618,1,0,0,0,618,619,3,58,29,0,619,621,1,0,0,0,620,622,5,144,0,0,621,620,
  	1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,5,3,0,0,624,31,1,0,0,
  	0,625,626,5,88,0,0,626,627,5,144,0,0,627,628,5,66,0,0,628,629,5,144,0,
  	0,629,630,5,55,0,0,630,631,5,144,0,0,631,633,3,276,138,0,632,634,5,144,
  	0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,637,5,2,0,0,636,
  	638,5,144,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,639,1,0,0,0,639,641,
  	3,36,18,0,640,642,5,144,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,651,1,
  	0,0,0,643,645,5,4,0,0,644,646,5,144,0,0,645,644,1,0,0,0,645,646,1,0,0,
  	0,646,647,1,0,0,0,647,649,3,54,27,0,648,650,5,144,0,0,649,648,1,0,0,0,
  	649,650,1,0,0,0,650,652,1,0,0,0,651,643,1,0,0,0,651,652,1,0,0,0,652,661,
  	1,0,0,0,653,655,5,4,0,0,654,656,5,144,0,0,655,654,1,0,0,0,655,656,1,0,
  	0,0,656,657,1,0,0,0,657,659,3,278,139,0,658,660,5,144,0,0,659,658,1,0,
  	0,0,659,660,1,0,0,0,660,662,1,0,0,0,661,653,1,0,0,0,661,662,1,0,0,0,662,
  	663,1,0,0,0,663,664,5,3,0,0,664,33,1,0,0,0,665,666,5,88,0,0,666,667,5,
  	144,0,0,667,668,5,66,0,0,668,669,5,144,0,0,669,670,5,55,0,0,670,671,5,
  	144,0,0,671,672,5,56,0,0,672,673,5,144,0,0,673,675,3,276,138,0,674,676,
  	5,144,0,0,675,674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,679,5,2,
  	0,0,678,680,5,144,0,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,
  	681,683,3,36,18,0,682,684,5,144,0,0,683,682,1,0,0,0,683,684,1,0,0,0,684,
  	690,1,0,0,0,685,687,5,4,0,0,686,688,5,144,0,0,687,686,1,0,0,0,687,688,
  	1,0,0,0,688,689,1,0,0,0,689,691,3,36,18,0,690,685,1,0,0,0,691,692,1,0,
  	0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,695,1,0,0,0,694,696,5,144,0,0,
  	695,694,1,0,0,0,695,696,1,0,0,0,696,705,1,0,0,0,697,699,5,4,0,0,698,700,
  	5,144,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,703,3,54,
  	27,0,702,704,5,144,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,
  	0,705,697,1,0,0,0,705,706,1,0,0,0,706,715,1,0,0,0,707,709,5,4,0,0,708,
  	710,5,144,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,713,
  	3,278,139,0,712,714,5,144,0,0,713,712,1,0,0,0,713,714,1,0,0,0,714,716,
  	1,0,0,0,715,707,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,717,718,5,3,0,
  	0,718,35,1,0,0,0,719,720,5,52,0,0,720,721,5,144,0,0,721,722,3,276,138,
  	0,722,723,5,144,0,0,723,724,5,67,0,0,724,725,5,144,0,0,725,726,3,276,
  	138,0,726,37,1,0,0,0,727,728,5,88,0,0,728,729,5,144,0,0,729,730,5,57,
  	0,0,730,731,5,144,0,0,731,732,5,58,0,0,732,733,5,144,0,0,733,734,3,276,
  	138,0,734,39,1,0,0,0,735,736,5,59,0,0,736,737,5,144,0,0,737,738,5,55,
  	0,0,738,739,5,144,0,0,739,740,3,276,138,0,740,41,1,0,0,0,741,742,5,60,
  	0,0,742,743,5,144,0,0,743,744,5,55,0,0,744,745,5,144,0,0,745,746,3,276,
  	138,0,746,747,5,144,0,0,747,748,3,44,22,0,748,43,1,0,0,0,749,754,3,46,
  	23,0,750,754,3,48,24,0,751,754,3,50,25,0,752,754,3,52,26,0,753,749,1,
  	0,0,0,753,750,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,45,1,0,0,0,
  	755,756,5,63,0,0,756,757,5,144,0,0,757,758,3,270,135,0,758,759,5,144,
  	0,0,759,764,3,60,30,0,760,761,5,144,0,0,761,762,5,61,0,0,762,763,5,144,
  	0,0,763,765,3,178,89,0,764,760,1,0,0,0,764,765,1,0,0,0,765,47,1,0,0,0,
  	766,767,5,59,0,0,767,768,5,144,0,0,768,769,3,270,135,0,769,49,1,0,0,0,
  	770,771,5,62,0,0,771,772,5,144,0,0,772,773,5,67,0,0,773,774,5,144,0,0,
  	774,775,3,276,138,0,775,51,1,0,0,0,776,777,5,62,0,0,777,778,5,144,0,0,
  	778,779,3,270,135,0,779,780,5,144,0,0,780,781,5,67,0,0,781,782,5,144,
  	0,0,782,783,3,270,135,0,783,53,1,0,0,0,784,795,3,56,28,0,785,787,5,144,
  	0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,5,4,0,0,789,
  	791,5,144,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,794,
  	3,56,28,0,793,786,1,0,0,0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,
  	0,0,796,55,1,0,0,0,797,795,1,0,0,0,798,799,3,270,135,0,799,800,5,144,
  	0,0,800,801,3,60,30,0,801,57,1,0,0,0,802,803,5,64,0,0,803,804,5,144,0,
  	0,804,806,5,65,0,0,805,807,5,144,0,0,806,805,1,0,0,0,806,807,1,0,0,0,
  	807,808,1,0,0,0,808,810,5,2,0,0,809,811,5,144,0,0,810,809,1,0,0,0,810,
  	811,1,0,0,0,811,812,1,0,0,0,812,814,3,270,135,0,813,815,5,144,0,0,814,
  	813,1,0,0,0,814,815,1,0,0,0,815,816,1,0,0,0,816,817,5,3,0,0,817,59,1,
  	0,0,0,818,819,6,30,-1,0,819,871,3,278,139,0,820,822,5,81,0,0,821,823,
  	5,144,0,0,822,821,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,826,5,2,
  	0,0,825,827,5,144,0,0,826,825,1,0,0,0,826,827,1,0,0,0,827,828,1,0,0,0,
  	828,830,3,54,27,0,829,831,5,144,0,0,830,829,1,0,0,0,830,831,1,0,0,0,831,
  	832,1,0,0,0,832,833,5,3,0,0,833,871,1,0,0,0,834,836,3,278,139,0,835,837,
  	5,144,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,840,5,2,
  	0,0,839,841,5,144,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,
  	842,844,3,54,27,0,843,845,5,144,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,
  	846,1,0,0,0,846,847,5,3,0,0,847,871,1,0,0,0,848,850,3,278,139,0,849,851,
  	5,144,0,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,854,5,2,
  	0,0,853,855,5,144,0,0,854,853,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,
  	856,858,3,60,30,0,857,859,5,144,0,0,858,857,1,0,0,0,858,859,1,0,0,0,859,
  	860,1,0,0,0,860,862,5,4,0,0,861,863,5,144,0,0,862,861,1,0,0,0,862,863,
  	1,0,0,0,863,864,1,0,0,0,864,866,3,60,30,0,865,867,5,144,0,0,866,865,1,
  	0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,869,5,3,0,0,869,871,1,0,0,0,
  	870,818,1,0,0,0,870,820,1,0,0,0,870,834,1,0,0,0,870,848,1,0,0,0,871,876,
  	1,0,0,0,872,873,10,4,0,0,873,875,3,62,31,0,874,872,1,0,0,0,875,878,1,
  	0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,61,1,0,0,0,878,876,1,0,0,0,
  	879,883,3,64,32,0,880,882,3,64,32,0,881,880,1,0,0,0,882,885,1,0,0,0,883,
  	881,1,0,0,0,883,884,1,0,0,0,884,63,1,0,0,0,885,883,1,0,0,0,886,888,5,
  	7,0,0,887,889,3,272,136,0,888,887,1,0,0,0,888,889,1,0,0,0,889,890,1,0,
  	0,0,890,891,5,8,0,0,891,65,1,0,0,0,892,895,3,68,34,0,893,895,3,70,35,
  	0,894,892,1,0,0,0,894,893,1,0,0,0,895,67,1,0,0,0,896,897,5,68,0,0,897,
  	69,1,0,0,0,898,899,5,69,0,0,899,71,1,0,0,0,900,901,5,70,0,0,901,902,5,
  	144,0,0,902,915,5,71,0,0,903,904,5,70,0,0,904,905,5,144,0,0,905,906,5,
  	71,0,0,906,907,5,144,0,0,907,908,5,72,0,0,908,909,5,144,0,0,909,915,5,
  	73,0,0,910,915,5,75,0,0,911,915,5,76,0,0,912,915,5,77,0,0,913,915,5,78,
  	0,0,914,900,1,0,0,0,914,903,1,0,0,0,914,910,1,0,0,0,914,911,1,0,0,0,914,
  	912,1,0,0,0,914,913,1,0,0,0,915,73,1,0,0,0,916,919,3,76,38,0,917,919,
  	3,78,39,0,918,916,1,0,0,0,918,917,1,0,0,0,919,75,1,0,0,0,920,921,5,83,
  	0,0,921,922,5,144,0,0,922,923,5,80,0,0,923,926,5,144,0,0,924,927,5,130,
  	0,0,925,927,3,262,131,0,926,924,1,0,0,0,926,925,1,0,0,0,927,77,1,0,0,
  	0,928,929,5,79,0,0,929,930,5,144,0,0,930,931,3,262,131,0,931,79,1,0,0,
  	0,932,933,3,82,41,0,933,81,1,0,0,0,934,941,3,86,43,0,935,937,5,144,0,
  	0,936,935,1,0,0,0,936,937,1,0,0,0,937,938,1,0,0,0,938,940,3,84,42,0,939,
  	936,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,0,941,942,1,0,0,0,942,956,1,
  	0,0,0,943,941,1,0,0,0,944,946,3,120,60,0,945,947,5,144,0,0,946,945,1,
  	0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,944,1,0,0,0,949,950,1,0,0,0,
  	950,948,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,3,86,43,0,953,
  	954,6,41,-1,0,954,956,1,0,0,0,955,934,1,0,0,0,955,948,1,0,0,0,956,83,
  	1,0,0,0,957,958,5,81,0,0,958,959,5,144,0,0,959,961,5,82,0,0,960,962,5,
  	144,0,0,961,960,1,0,0,0,961,962,1,0,0,0,962,963,1,0,0,0,963,970,3,86,
  	43,0,964,966,5,81,0,0,965,967,5,144,0,0,966,965,1,0,0,0,966,967,1,0,0,
  	0,967,968,1,0,0,0,968,970,3,86,43,0,969,957,1,0,0,0,969,964,1,0,0,0,970,
  	85,1,0,0,0,971,974,3,88,44,0,972,974,3,90,45,0,973,971,1,0,0,0,973,972,
  	1,0,0,0,974,87,1,0,0,0,975,977,3,96,48,0,976,978,5,144,0,0,977,976,1,
  	0,0,0,977,978,1,0,0,0,978,980,1,0,0,0,979,975,1,0,0,0,980,983,1,0,0,0,
  	981,979,1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,0,983,981,1,0,0,0,984,1021,
  	3,120,60,0,985,987,3,96,48,0,986,988,5,144,0,0,987,986,1,0,0,0,987,988,
  	1,0,0,0,988,990,1,0,0,0,989,985,1,0,0,0,990,993,1,0,0,0,991,989,1,0,0,
  	0,991,992,1,0,0,0,992,994,1,0,0,0,993,991,1,0,0,0,994,1001,3,94,47,0,
  	995,997,5,144,0,0,996,995,1,0,0,0,996,997,1,0,0,0,997,998,1,0,0,0,998,
  	1000,3,94,47,0,999,996,1,0,0,0,1000,1003,1,0,0,0,1001,999,1,0,0,0,1001,
  	1002,1,0,0,0,1002,1008,1,0,0,0,1003,1001,1,0,0,0,1004,1006,5,144,0,0,
  	1005,1004,1,0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,1007,1009,3,120,
  	60,0,1008,1005,1,0,0,0,1008,1009,1,0,0,0,1009,1021,1,0,0,0,1010,1012,
  	3,96,48,0,1011,1013,5,144,0,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,
  	1015,1,0,0,0,1014,1010,1,0,0,0,1015,1016,1,0,0,0,1016,1014,1,0,0,0,1016,
  	1017,1,0,0,0,1017,1018,1,0,0,0,1018,1019,6,44,-1,0,1019,1021,1,0,0,0,
  	1020,981,1,0,0,0,1020,991,1,0,0,0,1020,1014,1,0,0,0,1021,89,1,0,0,0,1022,
  	1024,3,92,46,0,1023,1025,5,144,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,
  	0,1025,1027,1,0,0,0,1026,1022,1,0,0,0,1027,1028,1,0,0,0,1028,1026,1,0,
  	0,0,1028,1029,1,0,0,0,1029,1030,1,0,0,0,1030,1031,3,88,44,0,1031,91,1,
  	0,0,0,1032,1034,3,96,48,0,1033,1035,5,144,0,0,1034,1033,1,0,0,0,1034,
  	1035,1,0,0,0,1035,1037,1,0,0,0,1036,1032,1,0,0,0,1037,1040,1,0,0,0,1038,
  	1036,1,0,0,0,1038,1039,1,0,0,0,1039,1047,1,0,0,0,1040,1038,1,0,0,0,1041,
  	1043,3,94,47,0,1042,1044,5,144,0,0,1043,1042,1,0,0,0,1043,1044,1,0,0,
  	0,1044,1046,1,0,0,0,1045,1041,1,0,0,0,1046,1049,1,0,0,0,1047,1045,1,0,
  	0,0,1047,1048,1,0,0,0,1048,1050,1,0,0,0,1049,1047,1,0,0,0,1050,1051,3,
  	118,59,0,1051,93,1,0,0,0,1052,1057,3,106,53,0,1053,1057,3,108,54,0,1054,
  	1057,3,112,56,0,1055,1057,3,116,58,0,1056,1052,1,0,0,0,1056,1053,1,0,
  	0,0,1056,1054,1,0,0,0,1056,1055,1,0,0,0,1057,95,1,0,0,0,1058,1063,3,102,
  	51,0,1059,1063,3,104,52,0,1060,1063,3,100,50,0,1061,1063,3,98,49,0,1062,
  	1058,1,0,0,0,1062,1059,1,0,0,0,1062,1060,1,0,0,0,1062,1061,1,0,0,0,1063,
  	97,1,0,0,0,1064,1082,5,83,0,0,1065,1066,5,144,0,0,1066,1067,5,94,0,0,
  	1067,1068,5,144,0,0,1068,1070,5,84,0,0,1069,1071,5,144,0,0,1070,1069,
  	1,0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1074,5,2,0,0,1073,1075,
  	5,144,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,1076,
  	1078,3,54,27,0,1077,1079,5,144,0,0,1078,1077,1,0,0,0,1078,1079,1,0,0,
  	0,1079,1080,1,0,0,0,1080,1081,5,3,0,0,1081,1083,1,0,0,0,1082,1065,1,0,
  	0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1085,5,144,0,0,1085,1086,
  	5,52,0,0,1086,1104,5,144,0,0,1087,1101,3,22,11,0,1088,1090,5,144,0,0,
  	1089,1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1093,5,2,0,
  	0,1092,1094,5,144,0,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,
  	0,0,0,1095,1097,3,24,12,0,1096,1098,5,144,0,0,1097,1096,1,0,0,0,1097,
  	1098,1,0,0,0,1098,1099,1,0,0,0,1099,1100,5,3,0,0,1100,1102,1,0,0,0,1101,
  	1089,1,0,0,0,1101,1102,1,0,0,0,1102,1105,1,0,0,0,1103,1105,3,262,131,
  	0,1104,1087,1,0,0,0,1104,1103,1,0,0,0,1105,1110,1,0,0,0,1106,1108,5,144,
  	0,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,1111,3,
  	136,68,0,1110,1107,1,0,0,0,1110,1111,1,0,0,0,1111,99,1,0,0,0,1112,1113,
  	5,47,0,0,1113,1114,5,144,0,0,1114,1119,3,244,122,0,1115,1117,5,144,0,
  	0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,1,0,0,0,1118,1120,3,136,
  	68,0,1119,1116,1,0,0,0,1119,1120,1,0,0,0,1120,101,1,0,0,0,1121,1122,5,
  	85,0,0,1122,1124,5,144,0,0,1123,1121,1,0,0,0,1123,1124,1,0,0,0,1124,1125,
  	1,0,0,0,1125,1127,5,86,0,0,1126,1128,5,144,0,0,1127,1126,1,0,0,0,1127,
  	1128,1,0,0,0,1128,1129,1,0,0,0,1129,1134,3,138,69,0,1130,1132,5,144,0,
  	0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,0,0,1133,1135,3,136,
  	68,0,1134,1131,1,0,0,0,1134,1135,1,0,0,0,1135,103,1,0,0,0,1136,1138,5,
  	87,0,0,1137,1139,5,144,0,0,1138,1137,1,0,0,0,1138,1139,1,0,0,0,1139,1140,
  	1,0,0,0,1140,1141,3,178,89,0,1141,1142,5,144,0,0,1142,1143,5,98,0,0,1143,
  	1144,5,144,0,0,1144,1145,3,262,131,0,1145,105,1,0,0,0,1146,1148,5,88,
  	0,0,1147,1149,5,144,0,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,1150,
  	1,0,0,0,1150,1151,3,138,69,0,1151,107,1,0,0,0,1152,1154,5,89,0,0,1153,
  	1155,5,144,0,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,
  	1156,1161,3,138,69,0,1157,1158,5,144,0,0,1158,1160,3,110,55,0,1159,1157,
  	1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,1,0,0,0,1162,109,
  	1,0,0,0,1163,1161,1,0,0,0,1164,1165,5,90,0,0,1165,1166,5,144,0,0,1166,
  	1167,5,86,0,0,1167,1168,5,144,0,0,1168,1175,3,112,56,0,1169,1170,5,90,
  	0,0,1170,1171,5,144,0,0,1171,1172,5,88,0,0,1172,1173,5,144,0,0,1173,1175,
  	3,112,56,0,1174,1164,1,0,0,0,1174,1169,1,0,0,0,1175,111,1,0,0,0,1176,
  	1178,5,91,0,0,1177,1179,5,144,0,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,
  	1179,1180,1,0,0,0,1180,1191,3,114,57,0,1181,1183,5,144,0,0,1182,1181,
  	1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,1184,1186,5,4,0,0,1185,1187,
  	5,144,0,0,1186,1185,1,0,0,0,1186,1187,1,0,0,0,1187,1188,1,0,0,0,1188,
  	1190,3,114,57,0,1189,1182,1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,
  	1191,1192,1,0,0,0,1192,113,1,0,0,0,1193,1191,1,0,0,0,1194,1196,3,268,
  	134,0,1195,1197,5,144,0,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,1198,
  	1,0,0,0,1198,1200,5,5,0,0,1199,1201,5,144,0,0,1200,1199,1,0,0,0,1200,
  	1201,1,0,0,0,1201,1202,1,0,0,0,1202,1203,3,178,89,0,1203,115,1,0,0,0,
  	1204,1205,5,92,0,0,1205,1207,5,144,0,0,1206,1204,1,0,0,0,1206,1207,1,
  	0,0,0,1207,1208,1,0,0,0,1208,1210,5,93,0,0,1209,1211,5,144,0,0,1210,1209,
  	1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,1212,1223,3,178,89,0,1213,
  	1215,5,144,0,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,0,0,
  	1216,1218,5,4,0,0,1217,1219,5,144,0,0,1218,1217,1,0,0,0,1218,1219,1,0,
  	0,0,1219,1220,1,0,0,0,1220,1222,3,178,89,0,1221,1214,1,0,0,0,1222,1225,
  	1,0,0,0,1223,1221,1,0,0,0,1223,1224,1,0,0,0,1224,117,1,0,0,0,1225,1223,
  	1,0,0,0,1226,1227,5,94,0,0,1227,1232,3,122,61,0,1228,1230,5,144,0,0,1229,
  	1228,1,0,0,0,1229,1230,1,0,0,0,1230,1231,1,0,0,0,1231,1233,3,136,68,0,
  	1232,1229,1,0,0,0,1232,1233,1,0,0,0,1233,119,1,0,0,0,1234,1235,5,95,0,
  	0,1235,1236,3,122,61,0,1236,121,1,0,0,0,1237,1239,5,144,0,0,1238,1237,
  	1,0,0,0,1238,1239,1,0,0,0,1239,1240,1,0,0,0,1240,1242,5,96,0,0,1241,1238,
  	1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1244,5,144,0,0,1244,
  	1247,3,124,62,0,1245,1246,5,144,0,0,1246,1248,3,128,64,0,1247,1245,1,
  	0,0,0,1247,1248,1,0,0,0,1248,1251,1,0,0,0,1249,1250,5,144,0,0,1250,1252,
  	3,130,65,0,1251,1249,1,0,0,0,1251,1252,1,0,0,0,1252,1255,1,0,0,0,1253,
  	1254,5,144,0,0,1254,1256,3,132,66,0,1255,1253,1,0,0,0,1255,1256,1,0,0,
  	0,1256,123,1,0,0,0,1257,1268,5,97,0,0,1258,1260,5,144,0,0,1259,1258,1,
  	0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1263,5,4,0,0,1262,1264,
  	5,144,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,
  	1267,3,126,63,0,1266,1259,1,0,0,0,1267,1270,1,0,0,0,1268,1266,1,0,0,0,
  	1268,1269,1,0,0,0,1269,1286,1,0,0,0,1270,1268,1,0,0,0,1271,1282,3,126,
  	63,0,1272,1274,5,144,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1275,
  	1,0,0,0,1275,1277,5,4,0,0,1276,1278,5,144,0,0,1277,1276,1,0,0,0,1277,
  	1278,1,0,0,0,1278,1279,1,0,0,0,1279,1281,3,126,63,0,1280,1273,1,0,0,0,
  	1281,1284,1,0,0,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1286,1,0,0,
  	0,1284,1282,1,0,0,0,1285,1257,1,0,0,0,1285,1271,1,0,0,0,1286,125,1,0,
  	0,0,1287,1288,3,178,89,0,1288,1289,5,144,0,0,1289,1290,5,98,0,0,1290,
  	1291,5,144,0,0,1291,1292,3,262,131,0,1292,1295,1,0,0,0,1293,1295,3,178,
  	89,0,1294,1287,1,0,0,0,1294,1293,1,0,0,0,1295,127,1,0,0,0,1296,1297,5,
  	99,0,0,1297,1298,5,144,0,0,1298,1299,5,100,0,0,1299,1300,5,144,0,0,1300,
  	1308,3,134,67,0,1301,1303,5,4,0,0,1302,1304,5,144,0,0,1303,1302,1,0,0,
  	0,1303,1304,1,0,0,0,1304,1305,1,0,0,0,1305,1307,3,134,67,0,1306,1301,
  	1,0,0,0,1307,1310,1,0,0,0,1308,1306,1,0,0,0,1308,1309,1,0,0,0,1309,129,
  	1,0,0,0,1310,1308,1,0,0,0,1311,1312,5,101,0,0,1312,1313,5,144,0,0,1313,
  	1314,3,178,89,0,1314,131,1,0,0,0,1315,1316,5,102,0,0,1316,1317,5,144,
  	0,0,1317,1318,3,178,89,0,1318,133,1,0,0,0,1319,1324,3,178,89,0,1320,1322,
  	5,144,0,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,1323,1,0,0,0,1323,
  	1325,7,0,0,0,1324,1321,1,0,0,0,1324,1325,1,0,0,0,1325,135,1,0,0,0,1326,
  	1327,5,107,0,0,1327,1328,5,144,0,0,1328,1329,3,178,89,0,1329,137,1,0,
  	0,0,1330,1341,3,140,70,0,1331,1333,5,144,0,0,1332,1331,1,0,0,0,1332,1333,
  	1,0,0,0,1333,1334,1,0,0,0,1334,1336,5,4,0,0,1335,1337,5,144,0,0,1336,
  	1335,1,0,0,0,1336,1337,1,0,0,0,1337,1338,1,0,0,0,1338,1340,3,140,70,0,
  	1339,1332,1,0,0,0,1340,1343,1,0,0,0,1341,1339,1,0,0,0,1341,1342,1,0,0,
  	0,1342,139,1,0,0,0,1343,1341,1,0,0,0,1344,1346,3,262,131,0,1345,1347,
  	5,144,0,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,1348,1,0,0,0,1348,
  	1350,5,5,0,0,1349,1351,5,144,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,
  	1351,1352,1,0,0,0,1352,1353,3,142,71,0,1353,1356,1,0,0,0,1354,1356,3,
  	142,71,0,1355,1344,1,0,0,0,1355,1354,1,0,0,0,1356,141,1,0,0,0,1357,1358,
  	3,144,72,0,1358,143,1,0,0,0,1359,1366,3,146,73,0,1360,1362,5,144,0,0,
  	1361,1360,1,0,0,0,1361,1362,1,0,0,0,1362,1363,1,0,0,0,1363,1365,3,148,
  	74,0,1364,1361,1,0,0,0,1365,1368,1,0,0,0,1366,1364,1,0,0,0,1366,1367,
  	1,0,0,0,1367,1374,1,0,0,0,1368,1366,1,0,0,0,1369,1370,5,2,0,0,1370,1371,
  	3,144,72,0,1371,1372,5,3,0,0,1372,1374,1,0,0,0,1373,1359,1,0,0,0,1373,
  	1369,1,0,0,0,1374,145,1,0,0,0,1375,1377,5,2,0,0,1376,1378,5,144,0,0,1377,
  	1376,1,0,0,0,1377,1378,1,0,0,0,1378,1383,1,0,0,0,1379,1381,3,262,131,
  	0,1380,1382,5,144,0,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,1384,1,
  	0,0,0,1383,1379,1,0,0,0,1383,1384,1,0,0,0,1384,1389,1,0,0,0,1385,1387,
  	3,158,79,0,1386,1388,5,144,0,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,1388,
  	1390,1,0,0,0,1389,1385,1,0,0,0,1389,1390,1,0,0,0,1390,1395,1,0,0,0,1391,
  	1393,3,154,77,0,1392,1394,5,144,0,0,1393,1392,1,0,0,0,1393,1394,1,0,0,
  	0,1394,1396,1,0,0,0,1395,1391,1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,
  	0,0,1397,1398,5,3,0,0,1398,147,1,0,0,0,1399,1401,3,150,75,0,1400,1402,
  	5,144,0,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,1403,1,0,0,0,1403,
  	1404,3,146,73,0,1404,149,1,0,0,0,1405,1407,3,282,141,0,1406,1408,5,144,
  	0,0,1407,1406,1,0,0,0,1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1411,3,
  	286,143,0,1410,1412,5,144,0,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,
  	1414,1,0,0,0,1413,1415,3,152,76,0,1414,1413,1,0,0,0,1414,1415,1,0,0,0,
  	1415,1417,1,0,0,0,1416,1418,5,144,0,0,1417,1416,1,0,0,0,1417,1418,1,0,
  	0,0,1418,1419,1,0,0,0,1419,1420,3,286,143,0,1420,1450,1,0,0,0,1421,1423,
  	3,286,143,0,1422,1424,5,144,0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,
  	1426,1,0,0,0,1425,1427,3,152,76,0,1426,1425,1,0,0,0,1426,1427,1,0,0,0,
  	1427,1429,1,0,0,0,1428,1430,5,144,0,0,1429,1428,1,0,0,0,1429,1430,1,0,
  	0,0,1430,1431,1,0,0,0,1431,1433,3,286,143,0,1432,1434,5,144,0,0,1433,
  	1432,1,0,0,0,1433,1434,1,0,0,0,1434,1435,1,0,0,0,1435,1436,3,284,142,
  	0,1436,1450,1,0,0,0,1437,1439,3,286,143,0,1438,1440,5,144,0,0,1439,1438,
  	1,0,0,0,1439,1440,1,0,0,0,1440,1442,1,0,0,0,1441,1443,3,152,76,0,1442,
  	1441,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,0,0,0,1444,1446,5,144,0,0,
  	1445,1444,1,0,0,0,1445,1446,1,0,0,0,1446,1447,1,0,0,0,1447,1448,3,286,
  	143,0,1448,1450,1,0,0,0,1449,1405,1,0,0,0,1449,1421,1,0,0,0,1449,1437,
  	1,0,0,0,1450,151,1,0,0,0,1451,1453,5,7,0,0,1452,1454,5,144,0,0,1453,1452,
  	1,0,0,0,1453,1454,1,0,0,0,1454,1459,1,0,0,0,1455,1457,3,262,131,0,1456,
  	1458,5,144,0,0,1457,1456,1,0,0,0,1457,1458,1,0,0,0,1458,1460,1,0,0,0,
  	1459,1455,1,0,0,0,1459,1460,1,0,0,0,1460,1465,1,0,0,0,1461,1463,3,156,
  	78,0,1462,1464,5,144,0,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1466,
  	1,0,0,0,1465,1461,1,0,0,0,1465,1466,1,0,0,0,1466,1471,1,0,0,0,1467,1469,
  	3,162,81,0,1468,1470,5,144,0,0,1469,1468,1,0,0,0,1469,1470,1,0,0,0,1470,
  	1472,1,0,0,0,1471,1467,1,0,0,0,1471,1472,1,0,0,0,1472,1477,1,0,0,0,1473,
  	1475,3,154,77,0,1474,1476,5,144,0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,
  	0,1476,1478,1,0,0,0,1477,1473,1,0,0,0,1477,1478,1,0,0,0,1478,1479,1,0,
  	0,0,1479,1480,5,8,0,0,1480,153,1,0,0,0,1481,1483,5,9,0,0,1482,1484,5,
  	144,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1518,1,0,0,0,1485,1487,
  	3,270,135,0,1486,1488,5,144,0,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,
  	1489,1,0,0,0,1489,1491,5,6,0,0,1490,1492,5,144,0,0,1491,1490,1,0,0,0,
  	1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1495,3,178,89,0,1494,1496,5,
  	144,0,0,1495,1494,1,0,0,0,1495,1496,1,0,0,0,1496,1515,1,0,0,0,1497,1499,
  	5,4,0,0,1498,1500,5,144,0,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,
  	1501,1,0,0,0,1501,1503,3,270,135,0,1502,1504,5,144,0,0,1503,1502,1,0,
  	0,0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,1505,1507,5,6,0,0,1506,1508,5,
  	144,0,0,1507,1506,1,0,0,0,1507,1508,1,0,0,0,1508,1509,1,0,0,0,1509,1511,
  	3,178,89,0,1510,1512,5,144,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,
  	1514,1,0,0,0,1513,1497,1,0,0,0,1514,1517,1,0,0,0,1515,1513,1,0,0,0,1515,
  	1516,1,0,0,0,1516,1519,1,0,0,0,1517,1515,1,0,0,0,1518,1485,1,0,0,0,1518,
  	1519,1,0,0,0,1519,1520,1,0,0,0,1520,1521,5,10,0,0,1521,155,1,0,0,0,1522,
  	1524,5,6,0,0,1523,1525,5,144,0,0,1524,1523,1,0,0,0,1524,1525,1,0,0,0,
  	1525,1526,1,0,0,0,1526,1540,3,176,88,0,1527,1529,5,144,0,0,1528,1527,
  	1,0,0,0,1528,1529,1,0,0,0,1529,1530,1,0,0,0,1530,1532,5,11,0,0,1531,1533,
  	5,6,0,0,1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,1535,1,0,0,0,1534,1536,
  	5,144,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,0,1537,
  	1539,3,176,88,0,1538,1528,1,0,0,0,1539,1542,1,0,0,0,1540,1538,1,0,0,0,
  	1540,1541,1,0,0,0,1541,157,1,0,0,0,1542,1540,1,0,0,0,1543,1550,3,160,
  	80,0,1544,1546,5,144,0,0,1545,1544,1,0,0,0,1545,1546,1,0,0,0,1546,1547,
  	1,0,0,0,1547,1549,3,160,80,0,1548,1545,1,0,0,0,1549,1552,1,0,0,0,1550,
  	1548,1,0,0,0,1550,1551,1,0,0,0,1551,159,1,0,0,0,1552,1550,1,0,0,0,1553,
  	1555,5,6,0,0,1554,1556,5,144,0,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,
  	1556,1557,1,0,0,0,1557,1558,3,174,87,0,1558,161,1,0,0,0,1559,1561,5,97,
  	0,0,1560,1562,5,144,0,0,1561,1560,1,0,0,0,1561,1562,1,0,0,0,1562,1567,
  	1,0,0,0,1563,1568,5,108,0,0,1564,1565,5,82,0,0,1565,1566,5,144,0,0,1566,
  	1568,5,108,0,0,1567,1563,1,0,0,0,1567,1564,1,0,0,0,1567,1568,1,0,0,0,
  	1568,1570,1,0,0,0,1569,1571,5,144,0,0,1570,1569,1,0,0,0,1570,1571,1,0,
  	0,0,1571,1586,1,0,0,0,1572,1574,3,170,85,0,1573,1572,1,0,0,0,1573,1574,
  	1,0,0,0,1574,1576,1,0,0,0,1575,1577,5,144,0,0,1576,1575,1,0,0,0,1576,
  	1577,1,0,0,0,1577,1578,1,0,0,0,1578,1580,5,12,0,0,1579,1581,5,144,0,0,
  	1580,1579,1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,0,0,0,1582,1584,3,172,
  	86,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1587,1,0,0,0,1585,1587,
  	3,272,136,0,1586,1573,1,0,0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,
  	1592,1,0,0,0,1588,1590,5,144,0,0,1589,1588,1,0,0,0,1589,1590,1,0,0,0,
  	1590,1591,1,0,0,0,1591,1593,3,164,82,0,1592,1589,1,0,0,0,1592,1593,1,
  	0,0,0,1593,163,1,0,0,0,1594,1596,5,2,0,0,1595,1597,5,144,0,0,1596,1595,
  	1,0,0,0,1596,1597,1,0,0,0,1597,1598,1,0,0,0,1598,1600,3,262,131,0,1599,
  	1601,5,144,0,0,1600,1599,1,0,0,0,1600,1601,1,0,0,0,1601,1602,1,0,0,0,
  	1602,1604,5,4,0,0,1603,1605,5,144,0,0,1604,1603,1,0,0,0,1604,1605,1,0,
  	0,0,1605,1606,1,0,0,0,1606,1615,3,262,131,0,1607,1609,5,144,0,0,1608,
  	1607,1,0,0,0,1608,1609,1,0,0,0,1609,1610,1,0,0,0,1610,1612,5,11,0,0,1611,
  	1613,5,144,0,0,1612,1611,1,0,0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,
  	1614,1616,3,136,68,0,1615,1608,1,0,0,0,1615,1616,1,0,0,0,1616,1636,1,
  	0,0,0,1617,1619,5,144,0,0,1618,1617,1,0,0,0,1618,1619,1,0,0,0,1619,1620,
  	1,0,0,0,1620,1622,5,11,0,0,1621,1623,5,144,0,0,1622,1621,1,0,0,0,1622,
  	1623,1,0,0,0,1623,1624,1,0,0,0,1624,1626,3,168,84,0,1625,1627,5,144,0,
  	0,1626,1625,1,0,0,0,1626,1627,1,0,0,0,1627,1628,1,0,0,0,1628,1630,5,4,
  	0,0,1629,1631,5,144,0,0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1632,
  	1,0,0,0,1632,1634,3,166,83,0,1633,1635,5,144,0,0,1634,1633,1,0,0,0,1634,
  	1635,1,0,0,0,1635,1637,1,0,0,0,1636,1618,1,0,0,0,1636,1637,1,0,0,0,1637,
  	1638,1,0,0,0,1638,1639,5,3,0,0,1639,165,1,0,0,0,1640,1642,5,9,0,0,1641,
  	1643,5,144,0,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1645,1,0,0,0,
  	1644,1646,3,124,62,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1648,1,
  	0,0,0,1647,1649,5,144,0,0,1648,1647,1,0,0,0,1648,1649,1,0,0,0,1649,1650,
  	1,0,0,0,1650,1651,5,10,0,0,1651,167,1,0,0,0,1652,1654,5,9,0,0,1653,1655,
  	5,144,0,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,1657,1,0,0,0,1656,
  	1658,3,124,62,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1660,1,0,0,0,
  	1659,1661,5,144,0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,
  	0,0,1662,1663,5,10,0,0,1663,169,1,0,0,0,1664,1665,5,132,0,0,1665,171,
  	1,0,0,0,1666,1667,5,132,0,0,1667,173,1,0,0,0,1668,1669,3,276,138,0,1669,
  	175,1,0,0,0,1670,1671,3,276,138,0,1671,177,1,0,0,0,1672,1673,3,180,90,
  	0,1673,179,1,0,0,0,1674,1681,3,182,91,0,1675,1676,5,144,0,0,1676,1677,
  	5,109,0,0,1677,1678,5,144,0,0,1678,1680,3,182,91,0,1679,1675,1,0,0,0,
  	1680,1683,1,0,0,0,1681,1679,1,0,0,0,1681,1682,1,0,0,0,1682,181,1,0,0,
  	0,1683,1681,1,0,0,0,1684,1691,3,184,92,0,1685,1686,5,144,0,0,1686,1687,
  	5,110,0,0,1687,1688,5,144,0,0,1688,1690,3,184,92,0,1689,1685,1,0,0,0,
  	1690,1693,1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,0,1692,183,1,0,0,
  	0,1693,1691,1,0,0,0,1694,1701,3,186,93,0,1695,1696,5,144,0,0,1696,1697,
  	5,111,0,0,1697,1698,5,144,0,0,1698,1700,3,186,93,0,1699,1695,1,0,0,0,
  	1700,1703,1,0,0,0,1701,1699,1,0,0,0,1701,1702,1,0,0,0,1702,185,1,0,0,
  	0,1703,1701,1,0,0,0,1704,1706,5,112,0,0,1705,1707,5,144,0,0,1706,1705,
  	1,0,0,0,1706,1707,1,0,0,0,1707,1709,1,0,0,0,1708,1704,1,0,0,0,1709,1712,
  	1,0,0,0,1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1713,1,0,0,0,1712,1710,
  	1,0,0,0,1713,1714,3,188,94,0,1714,187,1,0,0,0,1715,1725,3,192,96,0,1716,
  	1718,5,144,0,0,1717,1716,1,0,0,0,1717,1718,1,0,0,0,1718,1719,1,0,0,0,
  	1719,1721,3,190,95,0,1720,1722,5,144,0,0,1721,1720,1,0,0,0,1721,1722,
  	1,0,0,0,1722,1723,1,0,0,0,1723,1724,3,192,96,0,1724,1726,1,0,0,0,1725,
  	1717,1,0,0,0,1725,1726,1,0,0,0,1726,1764,1,0,0,0,1727,1729,3,192,96,0,
  	1728,1730,5,144,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,
  	0,0,1731,1733,5,113,0,0,1732,1734,5,144,0,0,1733,1732,1,0,0,0,1733,1734,
  	1,0,0,0,1734,1735,1,0,0,0,1735,1736,3,192,96,0,1736,1737,1,0,0,0,1737,
  	1738,6,94,-1,0,1738,1764,1,0,0,0,1739,1741,3,192,96,0,1740,1742,5,144,
  	0,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,1743,1,0,0,0,1743,1745,3,
  	190,95,0,1744,1746,5,144,0,0,1745,1744,1,0,0,0,1745,1746,1,0,0,0,1746,
  	1747,1,0,0,0,1747,1757,3,192,96,0,1748,1750,5,144,0,0,1749,1748,1,0,0,
  	0,1749,1750,1,0,0,0,1750,1751,1,0,0,0,1751,1753,3,190,95,0,1752,1754,
  	5,144,0,0,1753,1752,1,0,0,0,1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,
  	1756,3,192,96,0,1756,1758,1,0,0,0,1757,1749,1,0,0,0,1758,1759,1,0,0,0,
  	1759,1757,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1762,6,94,
  	-1,0,1762,1764,1,0,0,0,1763,1715,1,0,0,0,1763,1727,1,0,0,0,1763,1739,
  	1,0,0,0,1764,189,1,0,0,0,1765,1766,7,1,0,0,1766,191,1,0,0,0,1767,1778,
  	3,194,97,0,1768,1770,5,144,0,0,1769,1768,1,0,0,0,1769,1770,1,0,0,0,1770,
  	1771,1,0,0,0,1771,1773,5,11,0,0,1772,1774,5,144,0,0,1773,1772,1,0,0,0,
  	1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,1777,3,194,97,0,1776,1769,1,
  	0,0,0,1777,1780,1,0,0,0,1778,1776,1,0,0,0,1778,1779,1,0,0,0,1779,193,
  	1,0,0,0,1780,1778,1,0,0,0,1781,1792,3,196,98,0,1782,1784,5,144,0,0,1783,
  	1782,1,0,0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,1785,1787,5,18,0,0,1786,
  	1788,5,144,0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,1,0,0,0,
  	1789,1791,3,196,98,0,1790,1783,1,0,0,0,1791,1794,1,0,0,0,1792,1790,1,
  	0,0,0,1792,1793,1,0,0,0,1793,195,1,0,0,0,1794,1792,1,0,0,0,1795,1807,
  	3,200,100,0,1796,1798,5,144,0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,
  	1799,1,0,0,0,1799,1801,3,198,99,0,1800,1802,5,144,0,0,1801,1800,1,0,0,
  	0,1801,1802,1,0,0,0,1802,1803,1,0,0,0,1803,1804,3,200,100,0,1804,1806,
  	1,0,0,0,1805,1797,1,0,0,0,1806,1809,1,0,0,0,1807,1805,1,0,0,0,1807,1808,
  	1,0,0,0,1808,197,1,0,0,0,1809,1807,1,0,0,0,1810,1811,7,2,0,0,1811,199,
  	1,0,0,0,1812,1824,3,204,102,0,1813,1815,5,144,0,0,1814,1813,1,0,0,0,1814,
  	1815,1,0,0,0,1815,1816,1,0,0,0,1816,1818,3,202,101,0,1817,1819,5,144,
  	0,0,1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,1820,1,0,0,0,1820,1821,3,
  	204,102,0,1821,1823,1,0,0,0,1822,1814,1,0,0,0,1823,1826,1,0,0,0,1824,
  	1822,1,0,0,0,1824,1825,1,0,0,0,1825,201,1,0,0,0,1826,1824,1,0,0,0,1827,
  	1828,7,3,0,0,1828,203,1,0,0,0,1829,1841,3,208,104,0,1830,1832,5,144,0,
  	0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1833,1,0,0,0,1833,1835,3,206,
  	103,0,1834,1836,5,144,0,0,1835,1834,1,0,0,0,1835,1836,1,0,0,0,1836,1837,
  	1,0,0,0,1837,1838,3,208,104,0,1838,1840,1,0,0,0,1839,1831,1,0,0,0,1840,
  	1843,1,0,0,0,1841,1839,1,0,0,0,1841,1842,1,0,0,0,1842,205,1,0,0,0,1843,
  	1841,1,0,0,0,1844,1845,7,4,0,0,1845,207,1,0,0,0,1846,1857,3,210,105,0,
  	1847,1849,5,144,0,0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1850,1,0,
  	0,0,1850,1852,5,24,0,0,1851,1853,5,144,0,0,1852,1851,1,0,0,0,1852,1853,
  	1,0,0,0,1853,1854,1,0,0,0,1854,1856,3,210,105,0,1855,1848,1,0,0,0,1856,
  	1859,1,0,0,0,1857,1855,1,0,0,0,1857,1858,1,0,0,0,1858,209,1,0,0,0,1859,
  	1857,1,0,0,0,1860,1862,5,114,0,0,1861,1863,5,144,0,0,1862,1861,1,0,0,
  	0,1862,1863,1,0,0,0,1863,1865,1,0,0,0,1864,1860,1,0,0,0,1865,1868,1,0,
  	0,0,1866,1864,1,0,0,0,1866,1867,1,0,0,0,1867,1869,1,0,0,0,1868,1866,1,
  	0,0,0,1869,1874,3,212,106,0,1870,1872,5,144,0,0,1871,1870,1,0,0,0,1871,
  	1872,1,0,0,0,1872,1873,1,0,0,0,1873,1875,5,115,0,0,1874,1871,1,0,0,0,
  	1874,1875,1,0,0,0,1875,211,1,0,0,0,1876,1884,3,226,113,0,1877,1885,3,
  	220,110,0,1878,1880,3,214,107,0,1879,1878,1,0,0,0,1880,1881,1,0,0,0,1881,
  	1879,1,0,0,0,1881,1882,1,0,0,0,1882,1885,1,0,0,0,1883,1885,3,224,112,
  	0,1884,1877,1,0,0,0,1884,1879,1,0,0,0,1884,1883,1,0,0,0,1884,1885,1,0,
  	0,0,1885,213,1,0,0,0,1886,1889,3,216,108,0,1887,1889,3,218,109,0,1888,
  	1886,1,0,0,0,1888,1887,1,0,0,0,1889,215,1,0,0,0,1890,1891,5,7,0,0,1891,
  	1892,3,178,89,0,1892,1893,5,8,0,0,1893,217,1,0,0,0,1894,1896,5,7,0,0,
  	1895,1897,3,178,89,0,1896,1895,1,0,0,0,1896,1897,1,0,0,0,1897,1898,1,
  	0,0,0,1898,1900,5,6,0,0,1899,1901,3,178,89,0,1900,1899,1,0,0,0,1900,1901,
  	1,0,0,0,1901,1902,1,0,0,0,1902,1903,5,8,0,0,1903,219,1,0,0,0,1904,1916,
  	3,222,111,0,1905,1906,5,144,0,0,1906,1907,5,116,0,0,1907,1908,5,144,0,
  	0,1908,1916,5,94,0,0,1909,1910,5,144,0,0,1910,1911,5,117,0,0,1911,1912,
  	5,144,0,0,1912,1916,5,94,0,0,1913,1914,5,144,0,0,1914,1916,5,118,0,0,
  	1915,1904,1,0,0,0,1915,1905,1,0,0,0,1915,1909,1,0,0,0,1915,1913,1,0,0,
  	0,1916,1918,1,0,0,0,1917,1919,5,144,0,0,1918,1917,1,0,0,0,1918,1919,1,
  	0,0,0,1919,1920,1,0,0,0,1920,1921,3,226,113,0,1921,221,1,0,0,0,1922,1924,
  	5,144,0,0,1923,1922,1,0,0,0,1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,
  	1926,5,25,0,0,1926,223,1,0,0,0,1927,1928,5,144,0,0,1928,1929,5,119,0,
  	0,1929,1930,5,144,0,0,1930,1938,5,120,0,0,1931,1932,5,144,0,0,1932,1933,
  	5,119,0,0,1933,1934,5,144,0,0,1934,1935,5,112,0,0,1935,1936,5,144,0,0,
  	1936,1938,5,120,0,0,1937,1927,1,0,0,0,1937,1931,1,0,0,0,1938,225,1,0,
  	0,0,1939,1946,3,228,114,0,1940,1942,5,144,0,0,1941,1940,1,0,0,0,1941,
  	1942,1,0,0,0,1942,1943,1,0,0,0,1943,1945,3,256,128,0,1944,1941,1,0,0,
  	0,1945,1948,1,0,0,0,1946,1944,1,0,0,0,1946,1947,1,0,0,0,1947,227,1,0,
  	0,0,1948,1946,1,0,0,0,1949,1959,3,230,115,0,1950,1959,3,266,133,0,1951,
  	1959,3,258,129,0,1952,1959,3,242,121,0,1953,1959,3,244,122,0,1954,1959,
  	3,250,125,0,1955,1959,3,252,126,0,1956,1959,3,254,127,0,1957,1959,3,262,
  	131,0,1958,1949,1,0,0,0,1958,1950,1,0,0,0,1958,1951,1,0,0,0,1958,1952,
  	1,0,0,0,1958,1953,1,0,0,0,1958,1954,1,0,0,0,1958,1955,1,0,0,0,1958,1956,
  	1,0,0,0,1958,1957,1,0,0,0,1959,229,1,0,0,0,1960,1967,3,264,132,0,1961,
  	1967,5,130,0,0,1962,1967,3,232,116,0,1963,1967,5,120,0,0,1964,1967,3,
  	234,117,0,1965,1967,3,238,119,0,1966,1960,1,0,0,0,1966,1961,1,0,0,0,1966,
  	1962,1,0,0,0,1966,1963,1,0,0,0,1966,1964,1,0,0,0,1966,1965,1,0,0,0,1967,
  	231,1,0,0,0,1968,1969,7,5,0,0,1969,233,1,0,0,0,1970,1972,5,7,0,0,1971,
  	1973,5,144,0,0,1972,1971,1,0,0,0,1972,1973,1,0,0,0,1973,1987,1,0,0,0,
  	1974,1976,3,178,89,0,1975,1977,5,144,0,0,1976,1975,1,0,0,0,1976,1977,
  	1,0,0,0,1977,1984,1,0,0,0,1978,1980,3,236,118,0,1979,1981,5,144,0,0,1980,
  	1979,1,0,0,0,1980,1981,1,0,0,0,1981,1983,1,0,0,0,1982,1978,1,0,0,0,1983,
  	1986,1,0,0,0,1984,1982,1,0,0,0,1984,1985,1,0,0,0,1985,1988,1,0,0,0,1986,
  	1984,1,0,0,0,1987,1974,1,0,0,0,1987,1988,1,0,0,0,1988,1989,1,0,0,0,1989,
  	1990,5,8,0,0,1990,235,1,0,0,0,1991,1993,5,4,0,0,1992,1994,5,144,0,0,1993,
  	1992,1,0,0,0,1993,1994,1,0,0,0,1994,1996,1,0,0,0,1995,1997,3,178,89,0,
  	1996,1995,1,0,0,0,1996,1997,1,0,0,0,1997,237,1,0,0,0,1998,2000,5,9,0,
  	0,1999,2001,5,144,0,0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,
  	0,0,0,2002,2004,3,240,120,0,2003,2005,5,144,0,0,2004,2003,1,0,0,0,2004,
  	2005,1,0,0,0,2005,2016,1,0,0,0,2006,2008,5,4,0,0,2007,2009,5,144,0,0,
  	2008,2007,1,0,0,0,2008,2009,1,0,0,0,2009,2010,1,0,0,0,2010,2012,3,240,
  	120,0,2011,2013,5,144,0,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,2015,
  	1,0,0,0,2014,2006,1,0,0,0,2015,2018,1,0,0,0,2016,2014,1,0,0,0,2016,2017,
  	1,0,0,0,2017,2019,1,0,0,0,2018,2016,1,0,0,0,2019,2020,5,10,0,0,2020,239,
  	1,0,0,0,2021,2024,3,278,139,0,2022,2024,5,130,0,0,2023,2021,1,0,0,0,2023,
  	2022,1,0,0,0,2024,2026,1,0,0,0,2025,2027,5,144,0,0,2026,2025,1,0,0,0,
  	2026,2027,1,0,0,0,2027,2028,1,0,0,0,2028,2030,5,6,0,0,2029,2031,5,144,
  	0,0,2030,2029,1,0,0,0,2030,2031,1,0,0,0,2031,2032,1,0,0,0,2032,2033,3,
  	178,89,0,2033,241,1,0,0,0,2034,2036,5,2,0,0,2035,2037,5,144,0,0,2036,
  	2035,1,0,0,0,2036,2037,1,0,0,0,2037,2038,1,0,0,0,2038,2040,3,178,89,0,
  	2039,2041,5,144,0,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,
  	0,0,2042,2043,5,3,0,0,2043,243,1,0,0,0,2044,2046,5,123,0,0,2045,2047,
  	5,144,0,0,2046,2045,1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,
  	2050,5,2,0,0,2049,2051,5,144,0,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,
  	2051,2052,1,0,0,0,2052,2054,5,97,0,0,2053,2055,5,144,0,0,2054,2053,1,
  	0,0,0,2054,2055,1,0,0,0,2055,2056,1,0,0,0,2056,2093,5,3,0,0,2057,2059,
  	3,246,123,0,2058,2060,5,144,0,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,
  	2061,1,0,0,0,2061,2063,5,2,0,0,2062,2064,5,144,0,0,2063,2062,1,0,0,0,
  	2063,2064,1,0,0,0,2064,2069,1,0,0,0,2065,2067,5,96,0,0,2066,2068,5,144,
  	0,0,2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,2070,1,0,0,0,2069,2065,1,
  	0,0,0,2069,2070,1,0,0,0,2070,2088,1,0,0,0,2071,2073,3,248,124,0,2072,
  	2074,5,144,0,0,2073,2072,1,0,0,0,2073,2074,1,0,0,0,2074,2085,1,0,0,0,
  	2075,2077,5,4,0,0,2076,2078,5,144,0,0,2077,2076,1,0,0,0,2077,2078,1,0,
  	0,0,2078,2079,1,0,0,0,2079,2081,3,248,124,0,2080,2082,5,144,0,0,2081,
  	2080,1,0,0,0,2081,2082,1,0,0,0,2082,2084,1,0,0,0,2083,2075,1,0,0,0,2084,
  	2087,1,0,0,0,2085,2083,1,0,0,0,2085,2086,1,0,0,0,2086,2089,1,0,0,0,2087,
  	2085,1,0,0,0,2088,2071,1,0,0,0,2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,
  	2091,5,3,0,0,2091,2093,1,0,0,0,2092,2044,1,0,0,0,2092,2057,1,0,0,0,2093,
  	245,1,0,0,0,2094,2095,3,278,139,0,2095,247,1,0,0,0,2096,2098,3,278,139,
  	0,2097,2099,5,144,0,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,2100,1,
  	0,0,0,2100,2101,5,6,0,0,2101,2103,5,5,0,0,2102,2104,5,144,0,0,2103,2102,
  	1,0,0,0,2103,2104,1,0,0,0,2104,2106,1,0,0,0,2105,2096,1,0,0,0,2105,2106,
  	1,0,0,0,2106,2107,1,0,0,0,2107,2108,3,178,89,0,2108,249,1,0,0,0,2109,
  	2114,3,146,73,0,2110,2112,5,144,0,0,2111,2110,1,0,0,0,2111,2112,1,0,0,
  	0,2112,2113,1,0,0,0,2113,2115,3,148,74,0,2114,2111,1,0,0,0,2115,2116,
  	1,0,0,0,2116,2114,1,0,0,0,2116,2117,1,0,0,0,2117,251,1,0,0,0,2118,2120,
  	5,124,0,0,2119,2121,5,144,0,0,2120,2119,1,0,0,0,2120,2121,1,0,0,0,2121,
  	2122,1,0,0,0,2122,2124,5,9,0,0,2123,2125,5,144,0,0,2124,2123,1,0,0,0,
  	2124,2125,1,0,0,0,2125,2126,1,0,0,0,2126,2128,5,86,0,0,2127,2129,5,144,
  	0,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,2130,1,0,0,0,2130,2135,3,
  	138,69,0,2131,2133,5,144,0,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,
  	2134,1,0,0,0,2134,2136,3,136,68,0,2135,2132,1,0,0,0,2135,2136,1,0,0,0,
  	2136,2138,1,0,0,0,2137,2139,5,144,0,0,2138,2137,1,0,0,0,2138,2139,1,0,
  	0,0,2139,2140,1,0,0,0,2140,2141,5,10,0,0,2141,253,1,0,0,0,2142,2144,5,
  	123,0,0,2143,2145,5,144,0,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,
  	2146,1,0,0,0,2146,2148,5,9,0,0,2147,2149,5,144,0,0,2148,2147,1,0,0,0,
  	2148,2149,1,0,0,0,2149,2150,1,0,0,0,2150,2152,5,86,0,0,2151,2153,5,144,
  	0,0,2152,2151,1,0,0,0,2152,2153,1,0,0,0,2153,2154,1,0,0,0,2154,2159,3,
  	138,69,0,2155,2157,5,144,0,0,2156,2155,1,0,0,0,2156,2157,1,0,0,0,2157,
  	2158,1,0,0,0,2158,2160,3,136,68,0,2159,2156,1,0,0,0,2159,2160,1,0,0,0,
  	2160,2162,1,0,0,0,2161,2163,5,144,0,0,2162,2161,1,0,0,0,2162,2163,1,0,
  	0,0,2163,2164,1,0,0,0,2164,2165,5,10,0,0,2165,255,1,0,0,0,2166,2168,5,
  	26,0,0,2167,2169,5,144,0,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,2169,2172,
  	1,0,0,0,2170,2173,3,270,135,0,2171,2173,5,97,0,0,2172,2170,1,0,0,0,2172,
  	2171,1,0,0,0,2173,257,1,0,0,0,2174,2179,5,125,0,0,2175,2177,5,144,0,0,
  	2176,2175,1,0,0,0,2176,2177,1,0,0,0,2177,2178,1,0,0,0,2178,2180,3,260,
  	130,0,2179,2176,1,0,0,0,2180,2181,1,0,0,0,2181,2179,1,0,0,0,2181,2182,
  	1,0,0,0,2182,2197,1,0,0,0,2183,2185,5,125,0,0,2184,2186,5,144,0,0,2185,
  	2184,1,0,0,0,2185,2186,1,0,0,0,2186,2187,1,0,0,0,2187,2192,3,178,89,0,
  	2188,2190,5,144,0,0,2189,2188,1,0,0,0,2189,2190,1,0,0,0,2190,2191,1,0,
  	0,0,2191,2193,3,260,130,0,2192,2189,1,0,0,0,2193,2194,1,0,0,0,2194,2192,
  	1,0,0,0,2194,2195,1,0,0,0,2195,2197,1,0,0,0,2196,2174,1,0,0,0,2196,2183,
  	1,0,0,0,2197,2206,1,0,0,0,2198,2200,5,144,0,0,2199,2198,1,0,0,0,2199,
  	2200,1,0,0,0,2200,2201,1,0,0,0,2201,2203,5,126,0,0,2202,2204,5,144,0,
  	0,2203,2202,1,0,0,0,2203,2204,1,0,0,0,2204,2205,1,0,0,0,2205,2207,3,178,
  	89,0,2206,2199,1,0,0,0,2206,2207,1,0,0,0,2207,2209,1,0,0,0,2208,2210,
  	5,144,0,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,2211,1,0,0,0,2211,
  	2212,5,127,0,0,2212,259,1,0,0,0,2213,2215,5,128,0,0,2214,2216,5,144,0,
  	0,2215,2214,1,0,0,0,2215,2216,1,0,0,0,2216,2217,1,0,0,0,2217,2219,3,178,
  	89,0,2218,2220,5,144,0,0,2219,2218,1,0,0,0,2219,2220,1,0,0,0,2220,2221,
  	1,0,0,0,2221,2223,5,129,0,0,2222,2224,5,144,0,0,2223,2222,1,0,0,0,2223,
  	2224,1,0,0,0,2224,2225,1,0,0,0,2225,2226,3,178,89,0,2226,261,1,0,0,0,
  	2227,2228,3,278,139,0,2228,263,1,0,0,0,2229,2232,3,274,137,0,2230,2232,
  	3,272,136,0,2231,2229,1,0,0,0,2231,2230,1,0,0,0,2232,265,1,0,0,0,2233,
  	2236,5,27,0,0,2234,2237,3,278,139,0,2235,2237,5,132,0,0,2236,2234,1,0,
  	0,0,2236,2235,1,0,0,0,2237,267,1,0,0,0,2238,2240,3,228,114,0,2239,2241,
  	5,144,0,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,0,2242,
  	2243,3,256,128,0,2243,269,1,0,0,0,2244,2245,3,276,138,0,2245,271,1,0,
  	0,0,2246,2247,5,132,0,0,2247,273,1,0,0,0,2248,2249,5,139,0,0,2249,275,
  	1,0,0,0,2250,2251,3,278,139,0,2251,277,1,0,0,0,2252,2258,5,140,0,0,2253,
  	2254,5,143,0,0,2254,2258,6,139,-1,0,2255,2258,5,133,0,0,2256,2258,3,280,
  	140,0,2257,2252,1,0,0,0,2257,2253,1,0,0,0,2257,2255,1,0,0,0,2257,2256,
  	1,0,0,0,2258,279,1,0,0,0,2259,2260,7,6,0,0,2260,281,1,0,0,0,2261,2262,
  	7,7,0,0,2262,283,1,0,0,0,2263,2264,7,8,0,0,2264,285,1,0,0,0,2265,2266,
  	7,9,0,0,2266,287,1,0,0,0,394,289,292,295,299,302,305,319,325,329,333,
  	337,340,346,349,353,357,361,365,369,374,385,389,393,398,411,415,423,427,
  	431,435,441,445,467,471,474,477,480,483,487,492,496,506,510,515,520,525,
  	531,535,539,544,551,555,559,562,566,570,575,580,584,594,604,608,612,616,
  	621,633,637,641,645,649,651,655,659,661,675,679,683,687,692,695,699,703,
  	705,709,713,715,753,764,786,790,795,806,810,814,822,826,830,836,840,844,
  	850,854,858,862,866,870,876,883,888,894,914,918,926,936,941,946,950,955,
  	961,966,969,973,977,981,987,991,996,1001,1005,1008,1012,1016,1020,1024,
  	1028,1034,1038,1043,1047,1056,1062,1070,1074,1078,1082,1089,1093,1097,
  	1101,1104,1107,1110,1116,1119,1123,1127,1131,1134,1138,1148,1154,1161,
  	1174,1178,1182,1186,1191,1196,1200,1206,1210,1214,1218,1223,1229,1232,
  	1238,1241,1247,1251,1255,1259,1263,1268,1273,1277,1282,1285,1294,1303,
  	1308,1321,1324,1332,1336,1341,1346,1350,1355,1361,1366,1373,1377,1381,
  	1383,1387,1389,1393,1395,1401,1407,1411,1414,1417,1423,1426,1429,1433,
  	1439,1442,1445,1449,1453,1457,1459,1463,1465,1469,1471,1475,1477,1483,
  	1487,1491,1495,1499,1503,1507,1511,1515,1518,1524,1528,1532,1535,1540,
  	1545,1550,1555,1561,1567,1570,1573,1576,1580,1583,1586,1589,1592,1596,
  	1600,1604,1608,1612,1615,1618,1622,1626,1630,1634,1636,1642,1645,1648,
  	1654,1657,1660,1681,1691,1701,1706,1710,1717,1721,1725,1729,1733,1741,
  	1745,1749,1753,1759,1763,1769,1773,1778,1783,1787,1792,1797,1801,1807,
  	1814,1818,1824,1831,1835,1841,1848,1852,1857,1862,1866,1871,1874,1881,
  	1884,1888,1896,1900,1915,1918,1923,1937,1941,1946,1958,1966,1972,1976,
  	1980,1984,1987,1993,1996,2000,2004,2008,2012,2016,2023,2026,2030,2036,
  	2040,2046,2050,2054,2059,2063,2067,2069,2073,2077,2081,2085,2088,2092,
  	2098,2103,2105,2111,2116,2120,2124,2128,2132,2135,2138,2144,2148,2152,
  	2156,2159,2162,2168,2172,2176,2181,2185,2189,2194,2196,2199,2203,2206,
  	2209,2215,2219,2223,2231,2236,2240,2257
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cypherParserStaticData = staticData.release();
}

}

CypherParser::CypherParser(TokenStream *input) : CypherParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

CypherParser::CypherParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  CypherParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *cypherParserStaticData->atn, cypherParserStaticData->decisionToDFA, cypherParserStaticData->sharedContextCache, options);
}

CypherParser::~CypherParser() {
  delete _interpreter;
}

const atn::ATN& CypherParser::getATN() const {
  return *cypherParserStaticData->atn;
}

std::string CypherParser::getGrammarFileName() const {
  return "Cypher.g4";
}

const std::vector<std::string>& CypherParser::getRuleNames() const {
  return cypherParserStaticData->ruleNames;
}

const dfa::Vocabulary& CypherParser::getVocabulary() const {
  return cypherParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CypherParser::getSerializedATN() const {
  return cypherParserStaticData->serializedATN;
}


//----------------- OC_CypherContext ------------------------------------------------------------------

CypherParser::OC_CypherContext::OC_CypherContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CypherContext::EOF() {
  return getToken(CypherParser::EOF, 0);
}

CypherParser::OC_StatementContext* CypherParser::OC_CypherContext::oC_Statement() {
  return getRuleContext<CypherParser::OC_StatementContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CypherContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CypherContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_AnyCypherOptionContext* CypherParser::OC_CypherContext::oC_AnyCypherOption() {
  return getRuleContext<CypherParser::OC_AnyCypherOptionContext>(0);
}


size_t CypherParser::OC_CypherContext::getRuleIndex() const {
  return CypherParser::RuleOC_Cypher;
}


CypherParser::OC_CypherContext* CypherParser::oC_Cypher() {
  OC_CypherContext *_localctx = _tracker.createInstance<OC_CypherContext>(_ctx, getState());
  enterRule(_localctx, 0, CypherParser::RuleOC_Cypher);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(289);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx)) {
    case 1: {
      setState(288);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(292);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::EXPLAIN

    || _la == CypherParser::PROFILE) {
      setState(291);
      oC_AnyCypherOption();
    }
    setState(295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(294);
      match(CypherParser::SP);
    }

    setState(297);
    oC_Statement();
    setState(302);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      setState(299);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(298);
        match(CypherParser::SP);
      }
      setState(301);
      match(CypherParser::T__0);
      break;
    }

    default:
      break;
    }
    setState(305);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(304);
      match(CypherParser::SP);
    }
    setState(307);
    match(CypherParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StatementContext ------------------------------------------------------------------

CypherParser::OC_StatementContext::OC_StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_QueryContext* CypherParser::OC_StatementContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

CypherParser::KU_DDLContext* CypherParser::OC_StatementContext::kU_DDL() {
  return getRuleContext<CypherParser::KU_DDLContext>(0);
}

CypherParser::KU_CopyFromContext* CypherParser::OC_StatementContext::kU_CopyFrom() {
  return getRuleContext<CypherParser::KU_CopyFromContext>(0);
}

CypherParser::KU_CopyFromByColumnContext* CypherParser::OC_StatementContext::kU_CopyFromByColumn() {
  return getRuleContext<CypherParser::KU_CopyFromByColumnContext>(0);
}

CypherParser::KU_CopyTOContext* CypherParser::OC_StatementContext::kU_CopyTO() {
  return getRuleContext<CypherParser::KU_CopyTOContext>(0);
}

CypherParser::KU_StandaloneCallContext* CypherParser::OC_StatementContext::kU_StandaloneCall() {
  return getRuleContext<CypherParser::KU_StandaloneCallContext>(0);
}

CypherParser::KU_CreateMacroContext* CypherParser::OC_StatementContext::kU_CreateMacro() {
  return getRuleContext<CypherParser::KU_CreateMacroContext>(0);
}

CypherParser::KU_CommentOnContext* CypherParser::OC_StatementContext::kU_CommentOn() {
  return getRuleContext<CypherParser::KU_CommentOnContext>(0);
}

CypherParser::KU_TransactionContext* CypherParser::OC_StatementContext::kU_Transaction() {
  return getRuleContext<CypherParser::KU_TransactionContext>(0);
}

CypherParser::KU_ExtensionContext* CypherParser::OC_StatementContext::kU_Extension() {
  return getRuleContext<CypherParser::KU_ExtensionContext>(0);
}


size_t CypherParser::OC_StatementContext::getRuleIndex() const {
  return CypherParser::RuleOC_Statement;
}


CypherParser::OC_StatementContext* CypherParser::oC_Statement() {
  OC_StatementContext *_localctx = _tracker.createInstance<OC_StatementContext>(_ctx, getState());
  enterRule(_localctx, 2, CypherParser::RuleOC_Statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(319);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(309);
      oC_Query();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(310);
      kU_DDL();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(311);
      kU_CopyFrom();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(312);
      kU_CopyFromByColumn();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(313);
      kU_CopyTO();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(314);
      kU_StandaloneCall();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(315);
      kU_CreateMacro();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(316);
      kU_CommentOn();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(317);
      kU_Transaction();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(318);
      kU_Extension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromContext ------------------------------------------------------------------

CypherParser::KU_CopyFromContext::KU_CopyFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_FilePathsContext* CypherParser::KU_CopyFromContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::KU_CopyFromContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}

CypherParser::KU_ColumnNamesContext* CypherParser::KU_CopyFromContext::kU_ColumnNames() {
  return getRuleContext<CypherParser::KU_ColumnNamesContext>(0);
}


size_t CypherParser::KU_CopyFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFrom;
}


CypherParser::KU_CopyFromContext* CypherParser::kU_CopyFrom() {
  KU_CopyFromContext *_localctx = _tracker.createInstance<KU_CopyFromContext>(_ctx, getState());
  enterRule(_localctx, 4, CypherParser::RuleKU_CopyFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(321);
    match(CypherParser::COPY);
    setState(322);
    match(CypherParser::SP);
    setState(323);
    oC_SchemaName();
    setState(340);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(325);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(324);
        match(CypherParser::SP);
      }
      setState(327);
      match(CypherParser::T__1);
      setState(329);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(328);
        match(CypherParser::SP);
      }
      setState(331);
      kU_ColumnNames();
      setState(333);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(332);
        match(CypherParser::SP);
      }
      setState(335);
      match(CypherParser::T__2);
      setState(337);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(336);
        match(CypherParser::SP);
      }
      break;
    }

    case 2: {
      setState(339);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(342);
    match(CypherParser::FROM);
    setState(343);
    match(CypherParser::SP);
    setState(346);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6:
      case CypherParser::GLOB:
      case CypherParser::StringLiteral: {
        setState(344);
        kU_FilePaths();
        break;
      }

      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(345);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(361);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(349);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(348);
        match(CypherParser::SP);
      }
      setState(351);
      match(CypherParser::T__1);
      setState(353);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(352);
        match(CypherParser::SP);
      }
      setState(355);
      kU_ParsingOptions();
      setState(357);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(356);
        match(CypherParser::SP);
      }
      setState(359);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ColumnNamesContext ------------------------------------------------------------------

CypherParser::KU_ColumnNamesContext::KU_ColumnNamesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_ColumnNamesContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_ColumnNamesContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ColumnNamesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ColumnNamesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ColumnNamesContext::getRuleIndex() const {
  return CypherParser::RuleKU_ColumnNames;
}


CypherParser::KU_ColumnNamesContext* CypherParser::kU_ColumnNames() {
  KU_ColumnNamesContext *_localctx = _tracker.createInstance<KU_ColumnNamesContext>(_ctx, getState());
  enterRule(_localctx, 6, CypherParser::RuleKU_ColumnNames);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(363);
    oC_SchemaName();
    setState(374);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(365);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(364);
          match(CypherParser::SP);
        }
        setState(367);
        match(CypherParser::T__3);
        setState(369);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(368);
          match(CypherParser::SP);
        }
        setState(371);
        oC_SchemaName(); 
      }
      setState(376);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyFromByColumnContext ------------------------------------------------------------------

CypherParser::KU_CopyFromByColumnContext::KU_CopyFromByColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CopyFromByColumnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyFromByColumnContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::BY() {
  return getToken(CypherParser::BY, 0);
}

tree::TerminalNode* CypherParser::KU_CopyFromByColumnContext::COLUMN() {
  return getToken(CypherParser::COLUMN, 0);
}


size_t CypherParser::KU_CopyFromByColumnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyFromByColumn;
}


CypherParser::KU_CopyFromByColumnContext* CypherParser::kU_CopyFromByColumn() {
  KU_CopyFromByColumnContext *_localctx = _tracker.createInstance<KU_CopyFromByColumnContext>(_ctx, getState());
  enterRule(_localctx, 8, CypherParser::RuleKU_CopyFromByColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(377);
    match(CypherParser::COPY);
    setState(378);
    match(CypherParser::SP);
    setState(379);
    oC_SchemaName();
    setState(380);
    match(CypherParser::SP);
    setState(381);
    match(CypherParser::FROM);
    setState(382);
    match(CypherParser::SP);
    setState(383);
    match(CypherParser::T__1);
    setState(385);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(384);
      match(CypherParser::SP);
    }
    setState(387);
    match(CypherParser::StringLiteral);
    setState(398);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3 || _la == CypherParser::SP) {
      setState(389);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(388);
        match(CypherParser::SP);
      }
      setState(391);
      match(CypherParser::T__3);
      setState(393);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(392);
        match(CypherParser::SP);
      }
      setState(395);
      match(CypherParser::StringLiteral);
      setState(400);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(401);
    match(CypherParser::T__2);
    setState(402);
    match(CypherParser::SP);
    setState(403);
    match(CypherParser::BY);
    setState(404);
    match(CypherParser::SP);
    setState(405);
    match(CypherParser::COLUMN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CopyTOContext ------------------------------------------------------------------

CypherParser::KU_CopyTOContext::KU_CopyTOContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::COPY() {
  return getToken(CypherParser::COPY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CopyTOContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_QueryContext* CypherParser::KU_CopyTOContext::oC_Query() {
  return getRuleContext<CypherParser::OC_QueryContext>(0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::TO() {
  return getToken(CypherParser::TO, 0);
}

tree::TerminalNode* CypherParser::KU_CopyTOContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_CopyTOContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_CopyTOContext::getRuleIndex() const {
  return CypherParser::RuleKU_CopyTO;
}


CypherParser::KU_CopyTOContext* CypherParser::kU_CopyTO() {
  KU_CopyTOContext *_localctx = _tracker.createInstance<KU_CopyTOContext>(_ctx, getState());
  enterRule(_localctx, 10, CypherParser::RuleKU_CopyTO);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(407);
    match(CypherParser::COPY);
    setState(408);
    match(CypherParser::SP);
    setState(409);
    match(CypherParser::T__1);
    setState(411);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(410);
      match(CypherParser::SP);
    }
    setState(413);
    oC_Query();
    setState(415);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(414);
      match(CypherParser::SP);
    }
    setState(417);
    match(CypherParser::T__2);
    setState(418);
    match(CypherParser::SP);
    setState(419);
    match(CypherParser::TO);
    setState(420);
    match(CypherParser::SP);
    setState(421);
    match(CypherParser::StringLiteral);
    setState(435);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(423);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(422);
        match(CypherParser::SP);
      }
      setState(425);
      match(CypherParser::T__1);
      setState(427);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(426);
        match(CypherParser::SP);
      }
      setState(429);
      kU_ParsingOptions();
      setState(431);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(430);
        match(CypherParser::SP);
      }
      setState(433);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StandaloneCallContext ------------------------------------------------------------------

CypherParser::KU_StandaloneCallContext::KU_StandaloneCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StandaloneCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StandaloneCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StandaloneCallContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_StandaloneCallContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}


size_t CypherParser::KU_StandaloneCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_StandaloneCall;
}


CypherParser::KU_StandaloneCallContext* CypherParser::kU_StandaloneCall() {
  KU_StandaloneCallContext *_localctx = _tracker.createInstance<KU_StandaloneCallContext>(_ctx, getState());
  enterRule(_localctx, 12, CypherParser::RuleKU_StandaloneCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(437);
    match(CypherParser::CALL);
    setState(438);
    match(CypherParser::SP);
    setState(439);
    oC_SymbolicName();
    setState(441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(440);
      match(CypherParser::SP);
    }
    setState(443);
    match(CypherParser::T__4);
    setState(445);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(444);
      match(CypherParser::SP);
    }
    setState(447);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CommentOnContext ------------------------------------------------------------------

CypherParser::KU_CommentOnContext::KU_CommentOnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CommentOnContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::ON() {
  return getToken(CypherParser::ON, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CommentOnContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::KU_CommentOnContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}


size_t CypherParser::KU_CommentOnContext::getRuleIndex() const {
  return CypherParser::RuleKU_CommentOn;
}


CypherParser::KU_CommentOnContext* CypherParser::kU_CommentOn() {
  KU_CommentOnContext *_localctx = _tracker.createInstance<KU_CommentOnContext>(_ctx, getState());
  enterRule(_localctx, 14, CypherParser::RuleKU_CommentOn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(449);
    match(CypherParser::COMMENT);
    setState(450);
    match(CypherParser::SP);
    setState(451);
    match(CypherParser::ON);
    setState(452);
    match(CypherParser::SP);
    setState(453);
    match(CypherParser::TABLE);
    setState(454);
    match(CypherParser::SP);
    setState(455);
    oC_SchemaName();
    setState(456);
    match(CypherParser::SP);
    setState(457);
    match(CypherParser::IS);
    setState(458);
    match(CypherParser::SP);
    setState(459);
    match(CypherParser::StringLiteral);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateMacroContext ------------------------------------------------------------------

CypherParser::KU_CreateMacroContext::KU_CreateMacroContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateMacroContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::MACRO() {
  return getToken(CypherParser::MACRO, 0);
}

CypherParser::OC_FunctionNameContext* CypherParser::KU_CreateMacroContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_CreateMacroContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_CreateMacroContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::KU_PositionalArgsContext* CypherParser::KU_CreateMacroContext::kU_PositionalArgs() {
  return getRuleContext<CypherParser::KU_PositionalArgsContext>(0);
}

std::vector<CypherParser::KU_DefaultArgContext *> CypherParser::KU_CreateMacroContext::kU_DefaultArg() {
  return getRuleContexts<CypherParser::KU_DefaultArgContext>();
}

CypherParser::KU_DefaultArgContext* CypherParser::KU_CreateMacroContext::kU_DefaultArg(size_t i) {
  return getRuleContext<CypherParser::KU_DefaultArgContext>(i);
}


size_t CypherParser::KU_CreateMacroContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateMacro;
}


CypherParser::KU_CreateMacroContext* CypherParser::kU_CreateMacro() {
  KU_CreateMacroContext *_localctx = _tracker.createInstance<KU_CreateMacroContext>(_ctx, getState());
  enterRule(_localctx, 16, CypherParser::RuleKU_CreateMacro);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(461);
    match(CypherParser::CREATE);
    setState(462);
    match(CypherParser::SP);
    setState(463);
    match(CypherParser::MACRO);
    setState(464);
    match(CypherParser::SP);
    setState(465);
    oC_FunctionName();
    setState(467);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(466);
      match(CypherParser::SP);
    }
    setState(469);
    match(CypherParser::T__1);
    setState(471);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(470);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(474);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      setState(473);
      kU_PositionalArgs();
      break;
    }

    default:
      break;
    }
    setState(477);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(476);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(480);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 4456513) != 0) || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & 1180689) != 0)) {
      setState(479);
      kU_DefaultArg();
    }
    setState(492);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(483);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(482);
          match(CypherParser::SP);
        }
        setState(485);
        match(CypherParser::T__3);
        setState(487);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(486);
          match(CypherParser::SP);
        }
        setState(489);
        kU_DefaultArg(); 
      }
      setState(494);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx);
    }
    setState(496);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(495);
      match(CypherParser::SP);
    }
    setState(498);
    match(CypherParser::T__2);
    setState(499);
    match(CypherParser::SP);
    setState(500);
    match(CypherParser::AS);
    setState(501);
    match(CypherParser::SP);
    setState(502);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PositionalArgsContext ------------------------------------------------------------------

CypherParser::KU_PositionalArgsContext::KU_PositionalArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_SymbolicNameContext *> CypherParser::KU_PositionalArgsContext::oC_SymbolicName() {
  return getRuleContexts<CypherParser::OC_SymbolicNameContext>();
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_PositionalArgsContext::oC_SymbolicName(size_t i) {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PositionalArgsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PositionalArgsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PositionalArgsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PositionalArgs;
}


CypherParser::KU_PositionalArgsContext* CypherParser::kU_PositionalArgs() {
  KU_PositionalArgsContext *_localctx = _tracker.createInstance<KU_PositionalArgsContext>(_ctx, getState());
  enterRule(_localctx, 18, CypherParser::RuleKU_PositionalArgs);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(504);
    oC_SymbolicName();
    setState(515);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(506);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(505);
          match(CypherParser::SP);
        }
        setState(508);
        match(CypherParser::T__3);
        setState(510);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(509);
          match(CypherParser::SP);
        }
        setState(512);
        oC_SymbolicName(); 
      }
      setState(517);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DefaultArgContext ------------------------------------------------------------------

CypherParser::KU_DefaultArgContext::KU_DefaultArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DefaultArgContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_DefaultArgContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DefaultArgContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DefaultArgContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_DefaultArgContext::getRuleIndex() const {
  return CypherParser::RuleKU_DefaultArg;
}


CypherParser::KU_DefaultArgContext* CypherParser::kU_DefaultArg() {
  KU_DefaultArgContext *_localctx = _tracker.createInstance<KU_DefaultArgContext>(_ctx, getState());
  enterRule(_localctx, 20, CypherParser::RuleKU_DefaultArg);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(518);
    oC_SymbolicName();
    setState(520);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(519);
      match(CypherParser::SP);
    }
    setState(522);
    match(CypherParser::T__5);
    setState(523);
    match(CypherParser::T__4);
    setState(525);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(524);
      match(CypherParser::SP);
    }
    setState(527);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FilePathsContext ------------------------------------------------------------------

CypherParser::KU_FilePathsContext::KU_FilePathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::StringLiteral() {
  return getTokens(CypherParser::StringLiteral);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::StringLiteral(size_t i) {
  return getToken(CypherParser::StringLiteral, i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FilePathsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_FilePathsContext::GLOB() {
  return getToken(CypherParser::GLOB, 0);
}


size_t CypherParser::KU_FilePathsContext::getRuleIndex() const {
  return CypherParser::RuleKU_FilePaths;
}


CypherParser::KU_FilePathsContext* CypherParser::kU_FilePaths() {
  KU_FilePathsContext *_localctx = _tracker.createInstance<KU_FilePathsContext>(_ctx, getState());
  enterRule(_localctx, 22, CypherParser::RuleKU_FilePaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(562);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 1);
        setState(529);
        match(CypherParser::T__6);
        setState(531);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(530);
          match(CypherParser::SP);
        }
        setState(533);
        match(CypherParser::StringLiteral);
        setState(544);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3 || _la == CypherParser::SP) {
          setState(535);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(534);
            match(CypherParser::SP);
          }
          setState(537);
          match(CypherParser::T__3);
          setState(539);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(538);
            match(CypherParser::SP);
          }
          setState(541);
          match(CypherParser::StringLiteral);
          setState(546);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(547);
        match(CypherParser::T__7);
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(548);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::GLOB: {
        enterOuterAlt(_localctx, 3);
        setState(549);
        match(CypherParser::GLOB);
        setState(551);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(550);
          match(CypherParser::SP);
        }
        setState(553);
        match(CypherParser::T__1);
        setState(555);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(554);
          match(CypherParser::SP);
        }
        setState(557);
        match(CypherParser::StringLiteral);
        setState(559);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(558);
          match(CypherParser::SP);
        }
        setState(561);
        match(CypherParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionsContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionsContext::KU_ParsingOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ParsingOptionContext *> CypherParser::KU_ParsingOptionsContext::kU_ParsingOption() {
  return getRuleContexts<CypherParser::KU_ParsingOptionContext>();
}

CypherParser::KU_ParsingOptionContext* CypherParser::KU_ParsingOptionsContext::kU_ParsingOption(size_t i) {
  return getRuleContext<CypherParser::KU_ParsingOptionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOptions;
}


CypherParser::KU_ParsingOptionsContext* CypherParser::kU_ParsingOptions() {
  KU_ParsingOptionsContext *_localctx = _tracker.createInstance<KU_ParsingOptionsContext>(_ctx, getState());
  enterRule(_localctx, 24, CypherParser::RuleKU_ParsingOptions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(564);
    kU_ParsingOption();
    setState(575);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(566);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(565);
          match(CypherParser::SP);
        }
        setState(568);
        match(CypherParser::T__3);
        setState(570);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(569);
          match(CypherParser::SP);
        }
        setState(572);
        kU_ParsingOption(); 
      }
      setState(577);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 56, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ParsingOptionContext ------------------------------------------------------------------

CypherParser::KU_ParsingOptionContext::KU_ParsingOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_ParsingOptionContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

CypherParser::OC_LiteralContext* CypherParser::KU_ParsingOptionContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_ParsingOptionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_ParsingOptionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_ParsingOptionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ParsingOption;
}


CypherParser::KU_ParsingOptionContext* CypherParser::kU_ParsingOption() {
  KU_ParsingOptionContext *_localctx = _tracker.createInstance<KU_ParsingOptionContext>(_ctx, getState());
  enterRule(_localctx, 26, CypherParser::RuleKU_ParsingOption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(578);
    oC_SymbolicName();
    setState(580);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(579);
      match(CypherParser::SP);
    }
    setState(582);
    match(CypherParser::T__4);
    setState(584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(583);
      match(CypherParser::SP);
    }
    setState(586);
    oC_Literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DDLContext ------------------------------------------------------------------

CypherParser::KU_DDLContext::KU_DDLContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_CreateNodeTableContext* CypherParser::KU_DDLContext::kU_CreateNodeTable() {
  return getRuleContext<CypherParser::KU_CreateNodeTableContext>(0);
}

CypherParser::KU_CreateRelTableContext* CypherParser::KU_DDLContext::kU_CreateRelTable() {
  return getRuleContext<CypherParser::KU_CreateRelTableContext>(0);
}

CypherParser::KU_CreateRelTableGroupContext* CypherParser::KU_DDLContext::kU_CreateRelTableGroup() {
  return getRuleContext<CypherParser::KU_CreateRelTableGroupContext>(0);
}

CypherParser::KU_CreateRdfGraphContext* CypherParser::KU_DDLContext::kU_CreateRdfGraph() {
  return getRuleContext<CypherParser::KU_CreateRdfGraphContext>(0);
}

CypherParser::KU_DropTableContext* CypherParser::KU_DDLContext::kU_DropTable() {
  return getRuleContext<CypherParser::KU_DropTableContext>(0);
}

CypherParser::KU_AlterTableContext* CypherParser::KU_DDLContext::kU_AlterTable() {
  return getRuleContext<CypherParser::KU_AlterTableContext>(0);
}


size_t CypherParser::KU_DDLContext::getRuleIndex() const {
  return CypherParser::RuleKU_DDL;
}


CypherParser::KU_DDLContext* CypherParser::kU_DDL() {
  KU_DDLContext *_localctx = _tracker.createInstance<KU_DDLContext>(_ctx, getState());
  enterRule(_localctx, 28, CypherParser::RuleKU_DDL);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(594);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(588);
      kU_CreateNodeTable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(589);
      kU_CreateRelTable();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(590);
      kU_CreateRelTableGroup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(591);
      kU_CreateRdfGraph();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(592);
      kU_DropTable();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(593);
      kU_AlterTable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeTableContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeTableContext::KU_CreateNodeTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateNodeTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateNodeTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateNodeTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::KU_CreateNodeConstraintContext* CypherParser::KU_CreateNodeTableContext::kU_CreateNodeConstraint() {
  return getRuleContext<CypherParser::KU_CreateNodeConstraintContext>(0);
}


size_t CypherParser::KU_CreateNodeTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeTable;
}


CypherParser::KU_CreateNodeTableContext* CypherParser::kU_CreateNodeTable() {
  KU_CreateNodeTableContext *_localctx = _tracker.createInstance<KU_CreateNodeTableContext>(_ctx, getState());
  enterRule(_localctx, 30, CypherParser::RuleKU_CreateNodeTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(596);
    match(CypherParser::CREATE);
    setState(597);
    match(CypherParser::SP);
    setState(598);
    match(CypherParser::NODE);
    setState(599);
    match(CypherParser::SP);
    setState(600);
    match(CypherParser::TABLE);
    setState(601);
    match(CypherParser::SP);
    setState(602);
    oC_SchemaName();
    setState(604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(603);
      match(CypherParser::SP);
    }
    setState(606);
    match(CypherParser::T__1);
    setState(608);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(607);
      match(CypherParser::SP);
    }
    setState(610);
    kU_PropertyDefinitions();
    setState(612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(611);
      match(CypherParser::SP);
    }

    setState(614);
    match(CypherParser::T__3);
    setState(616);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(615);
      match(CypherParser::SP);
    }
    setState(618);
    kU_CreateNodeConstraint();
    setState(621);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(620);
      match(CypherParser::SP);
    }
    setState(623);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableContext::KU_CreateRelTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableContext::kU_RelTableConnection() {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTable;
}


CypherParser::KU_CreateRelTableContext* CypherParser::kU_CreateRelTable() {
  KU_CreateRelTableContext *_localctx = _tracker.createInstance<KU_CreateRelTableContext>(_ctx, getState());
  enterRule(_localctx, 32, CypherParser::RuleKU_CreateRelTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(625);
    match(CypherParser::CREATE);
    setState(626);
    match(CypherParser::SP);
    setState(627);
    match(CypherParser::REL);
    setState(628);
    match(CypherParser::SP);
    setState(629);
    match(CypherParser::TABLE);
    setState(630);
    match(CypherParser::SP);
    setState(631);
    oC_SchemaName();
    setState(633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(632);
      match(CypherParser::SP);
    }
    setState(635);
    match(CypherParser::T__1);
    setState(637);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(636);
      match(CypherParser::SP);
    }
    setState(639);
    kU_RelTableConnection();
    setState(641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(640);
      match(CypherParser::SP);
    }
    setState(651);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
    case 1: {
      setState(643);
      match(CypherParser::T__3);
      setState(645);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(644);
        match(CypherParser::SP);
      }
      setState(647);
      kU_PropertyDefinitions();
      setState(649);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(648);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(661);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__3) {
      setState(653);
      match(CypherParser::T__3);
      setState(655);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(654);
        match(CypherParser::SP);
      }
      setState(657);
      oC_SymbolicName();
      setState(659);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(658);
        match(CypherParser::SP);
      }
    }
    setState(663);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRelTableGroupContext ------------------------------------------------------------------

CypherParser::KU_CreateRelTableGroupContext::KU_CreateRelTableGroupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRelTableGroupContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRelTableGroupContext::GROUP() {
  return getToken(CypherParser::GROUP, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

std::vector<CypherParser::KU_RelTableConnectionContext *> CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection() {
  return getRuleContexts<CypherParser::KU_RelTableConnectionContext>();
}

CypherParser::KU_RelTableConnectionContext* CypherParser::KU_CreateRelTableGroupContext::kU_RelTableConnection(size_t i) {
  return getRuleContext<CypherParser::KU_RelTableConnectionContext>(i);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_CreateRelTableGroupContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_CreateRelTableGroupContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::KU_CreateRelTableGroupContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRelTableGroup;
}


CypherParser::KU_CreateRelTableGroupContext* CypherParser::kU_CreateRelTableGroup() {
  KU_CreateRelTableGroupContext *_localctx = _tracker.createInstance<KU_CreateRelTableGroupContext>(_ctx, getState());
  enterRule(_localctx, 34, CypherParser::RuleKU_CreateRelTableGroup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(665);
    match(CypherParser::CREATE);
    setState(666);
    match(CypherParser::SP);
    setState(667);
    match(CypherParser::REL);
    setState(668);
    match(CypherParser::SP);
    setState(669);
    match(CypherParser::TABLE);
    setState(670);
    match(CypherParser::SP);
    setState(671);
    match(CypherParser::GROUP);
    setState(672);
    match(CypherParser::SP);
    setState(673);
    oC_SchemaName();
    setState(675);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(674);
      match(CypherParser::SP);
    }
    setState(677);
    match(CypherParser::T__1);
    setState(679);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(678);
      match(CypherParser::SP);
    }
    setState(681);
    kU_RelTableConnection();
    setState(683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(682);
      match(CypherParser::SP);
    }
    setState(690); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(685);
              match(CypherParser::T__3);
              setState(687);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(686);
                match(CypherParser::SP);
              }
              setState(689);
              kU_RelTableConnection();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(692); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(694);
      match(CypherParser::SP);
    }
    setState(705);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      setState(697);
      match(CypherParser::T__3);
      setState(699);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(698);
        match(CypherParser::SP);
      }
      setState(701);
      kU_PropertyDefinitions();
      setState(703);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(702);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(715);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__3) {
      setState(707);
      match(CypherParser::T__3);
      setState(709);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(708);
        match(CypherParser::SP);
      }
      setState(711);
      oC_SymbolicName();
      setState(713);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(712);
        match(CypherParser::SP);
      }
    }
    setState(717);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RelTableConnectionContext ------------------------------------------------------------------

CypherParser::KU_RelTableConnectionContext::KU_RelTableConnectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RelTableConnectionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_SchemaNameContext *> CypherParser::KU_RelTableConnectionContext::oC_SchemaName() {
  return getRuleContexts<CypherParser::OC_SchemaNameContext>();
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RelTableConnectionContext::oC_SchemaName(size_t i) {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RelTableConnectionContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RelTableConnectionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RelTableConnection;
}


CypherParser::KU_RelTableConnectionContext* CypherParser::kU_RelTableConnection() {
  KU_RelTableConnectionContext *_localctx = _tracker.createInstance<KU_RelTableConnectionContext>(_ctx, getState());
  enterRule(_localctx, 36, CypherParser::RuleKU_RelTableConnection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(719);
    match(CypherParser::FROM);
    setState(720);
    match(CypherParser::SP);
    setState(721);
    oC_SchemaName();
    setState(722);
    match(CypherParser::SP);
    setState(723);
    match(CypherParser::TO);
    setState(724);
    match(CypherParser::SP);
    setState(725);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateRdfGraphContext ------------------------------------------------------------------

CypherParser::KU_CreateRdfGraphContext::KU_CreateRdfGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateRdfGraphContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::RDF() {
  return getToken(CypherParser::RDF, 0);
}

tree::TerminalNode* CypherParser::KU_CreateRdfGraphContext::GRAPH() {
  return getToken(CypherParser::GRAPH, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_CreateRdfGraphContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_CreateRdfGraphContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateRdfGraph;
}


CypherParser::KU_CreateRdfGraphContext* CypherParser::kU_CreateRdfGraph() {
  KU_CreateRdfGraphContext *_localctx = _tracker.createInstance<KU_CreateRdfGraphContext>(_ctx, getState());
  enterRule(_localctx, 38, CypherParser::RuleKU_CreateRdfGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(727);
    match(CypherParser::CREATE);
    setState(728);
    match(CypherParser::SP);
    setState(729);
    match(CypherParser::RDF);
    setState(730);
    match(CypherParser::SP);
    setState(731);
    match(CypherParser::GRAPH);
    setState(732);
    match(CypherParser::SP);
    setState(733);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropTableContext ------------------------------------------------------------------

CypherParser::KU_DropTableContext::KU_DropTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropTableContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DropTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_DropTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_DropTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_DropTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropTable;
}


CypherParser::KU_DropTableContext* CypherParser::kU_DropTable() {
  KU_DropTableContext *_localctx = _tracker.createInstance<KU_DropTableContext>(_ctx, getState());
  enterRule(_localctx, 40, CypherParser::RuleKU_DropTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(735);
    match(CypherParser::DROP);
    setState(736);
    match(CypherParser::SP);
    setState(737);
    match(CypherParser::TABLE);
    setState(738);
    match(CypherParser::SP);
    setState(739);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterTableContext ------------------------------------------------------------------

CypherParser::KU_AlterTableContext::KU_AlterTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::ALTER() {
  return getToken(CypherParser::ALTER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AlterTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_AlterTableContext::TABLE() {
  return getToken(CypherParser::TABLE, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_AlterTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}

CypherParser::KU_AlterOptionsContext* CypherParser::KU_AlterTableContext::kU_AlterOptions() {
  return getRuleContext<CypherParser::KU_AlterOptionsContext>(0);
}


size_t CypherParser::KU_AlterTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterTable;
}


CypherParser::KU_AlterTableContext* CypherParser::kU_AlterTable() {
  KU_AlterTableContext *_localctx = _tracker.createInstance<KU_AlterTableContext>(_ctx, getState());
  enterRule(_localctx, 42, CypherParser::RuleKU_AlterTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(741);
    match(CypherParser::ALTER);
    setState(742);
    match(CypherParser::SP);
    setState(743);
    match(CypherParser::TABLE);
    setState(744);
    match(CypherParser::SP);
    setState(745);
    oC_SchemaName();
    setState(746);
    match(CypherParser::SP);
    setState(747);
    kU_AlterOptions();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AlterOptionsContext ------------------------------------------------------------------

CypherParser::KU_AlterOptionsContext::KU_AlterOptionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_AddPropertyContext* CypherParser::KU_AlterOptionsContext::kU_AddProperty() {
  return getRuleContext<CypherParser::KU_AddPropertyContext>(0);
}

CypherParser::KU_DropPropertyContext* CypherParser::KU_AlterOptionsContext::kU_DropProperty() {
  return getRuleContext<CypherParser::KU_DropPropertyContext>(0);
}

CypherParser::KU_RenameTableContext* CypherParser::KU_AlterOptionsContext::kU_RenameTable() {
  return getRuleContext<CypherParser::KU_RenameTableContext>(0);
}

CypherParser::KU_RenamePropertyContext* CypherParser::KU_AlterOptionsContext::kU_RenameProperty() {
  return getRuleContext<CypherParser::KU_RenamePropertyContext>(0);
}


size_t CypherParser::KU_AlterOptionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_AlterOptions;
}


CypherParser::KU_AlterOptionsContext* CypherParser::kU_AlterOptions() {
  KU_AlterOptionsContext *_localctx = _tracker.createInstance<KU_AlterOptionsContext>(_ctx, getState());
  enterRule(_localctx, 44, CypherParser::RuleKU_AlterOptions);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(753);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(749);
      kU_AddProperty();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(750);
      kU_DropProperty();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(751);
      kU_RenameTable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(752);
      kU_RenameProperty();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddPropertyContext ------------------------------------------------------------------

CypherParser::KU_AddPropertyContext::KU_AddPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::ADD() {
  return getToken(CypherParser::ADD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_AddPropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_AddPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_AddPropertyContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}

tree::TerminalNode* CypherParser::KU_AddPropertyContext::DEFAULT() {
  return getToken(CypherParser::DEFAULT, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_AddPropertyContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_AddPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddProperty;
}


CypherParser::KU_AddPropertyContext* CypherParser::kU_AddProperty() {
  KU_AddPropertyContext *_localctx = _tracker.createInstance<KU_AddPropertyContext>(_ctx, getState());
  enterRule(_localctx, 46, CypherParser::RuleKU_AddProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(755);
    match(CypherParser::ADD);
    setState(756);
    match(CypherParser::SP);
    setState(757);
    oC_PropertyKeyName();
    setState(758);
    match(CypherParser::SP);
    setState(759);
    kU_DataType(0);
    setState(764);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(760);
      match(CypherParser::SP);
      setState(761);
      match(CypherParser::DEFAULT);
      setState(762);
      match(CypherParser::SP);
      setState(763);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DropPropertyContext ------------------------------------------------------------------

CypherParser::KU_DropPropertyContext::KU_DropPropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::DROP() {
  return getToken(CypherParser::DROP, 0);
}

tree::TerminalNode* CypherParser::KU_DropPropertyContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_DropPropertyContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_DropPropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_DropProperty;
}


CypherParser::KU_DropPropertyContext* CypherParser::kU_DropProperty() {
  KU_DropPropertyContext *_localctx = _tracker.createInstance<KU_DropPropertyContext>(_ctx, getState());
  enterRule(_localctx, 48, CypherParser::RuleKU_DropProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(766);
    match(CypherParser::DROP);
    setState(767);
    match(CypherParser::SP);
    setState(768);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenameTableContext ------------------------------------------------------------------

CypherParser::KU_RenameTableContext::KU_RenameTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenameTableContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_RenameTableContext::TO() {
  return getToken(CypherParser::TO, 0);
}

CypherParser::OC_SchemaNameContext* CypherParser::KU_RenameTableContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::KU_RenameTableContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameTable;
}


CypherParser::KU_RenameTableContext* CypherParser::kU_RenameTable() {
  KU_RenameTableContext *_localctx = _tracker.createInstance<KU_RenameTableContext>(_ctx, getState());
  enterRule(_localctx, 50, CypherParser::RuleKU_RenameTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(770);
    match(CypherParser::RENAME);
    setState(771);
    match(CypherParser::SP);
    setState(772);
    match(CypherParser::TO);
    setState(773);
    match(CypherParser::SP);
    setState(774);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RenamePropertyContext ------------------------------------------------------------------

CypherParser::KU_RenamePropertyContext::KU_RenamePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::RENAME() {
  return getToken(CypherParser::RENAME, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RenamePropertyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_RenamePropertyContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

tree::TerminalNode* CypherParser::KU_RenamePropertyContext::TO() {
  return getToken(CypherParser::TO, 0);
}


size_t CypherParser::KU_RenamePropertyContext::getRuleIndex() const {
  return CypherParser::RuleKU_RenameProperty;
}


CypherParser::KU_RenamePropertyContext* CypherParser::kU_RenameProperty() {
  KU_RenamePropertyContext *_localctx = _tracker.createInstance<KU_RenamePropertyContext>(_ctx, getState());
  enterRule(_localctx, 52, CypherParser::RuleKU_RenameProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(776);
    match(CypherParser::RENAME);
    setState(777);
    match(CypherParser::SP);
    setState(778);
    oC_PropertyKeyName();
    setState(779);
    match(CypherParser::SP);
    setState(780);
    match(CypherParser::TO);
    setState(781);
    match(CypherParser::SP);
    setState(782);
    oC_PropertyKeyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionsContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionsContext::KU_PropertyDefinitionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_PropertyDefinitionContext *> CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition() {
  return getRuleContexts<CypherParser::KU_PropertyDefinitionContext>();
}

CypherParser::KU_PropertyDefinitionContext* CypherParser::KU_PropertyDefinitionsContext::kU_PropertyDefinition(size_t i) {
  return getRuleContext<CypherParser::KU_PropertyDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertyDefinitionsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_PropertyDefinitionsContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinitions;
}


CypherParser::KU_PropertyDefinitionsContext* CypherParser::kU_PropertyDefinitions() {
  KU_PropertyDefinitionsContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionsContext>(_ctx, getState());
  enterRule(_localctx, 54, CypherParser::RuleKU_PropertyDefinitions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(784);
    kU_PropertyDefinition();
    setState(795);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(786);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(785);
          match(CypherParser::SP);
        }
        setState(788);
        match(CypherParser::T__3);
        setState(790);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(789);
          match(CypherParser::SP);
        }
        setState(792);
        kU_PropertyDefinition(); 
      }
      setState(797);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertyDefinitionContext ------------------------------------------------------------------

CypherParser::KU_PropertyDefinitionContext::KU_PropertyDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertyDefinitionContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_PropertyDefinitionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::KU_DataTypeContext* CypherParser::KU_PropertyDefinitionContext::kU_DataType() {
  return getRuleContext<CypherParser::KU_DataTypeContext>(0);
}


size_t CypherParser::KU_PropertyDefinitionContext::getRuleIndex() const {
  return CypherParser::RuleKU_PropertyDefinition;
}


CypherParser::KU_PropertyDefinitionContext* CypherParser::kU_PropertyDefinition() {
  KU_PropertyDefinitionContext *_localctx = _tracker.createInstance<KU_PropertyDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 56, CypherParser::RuleKU_PropertyDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(798);
    oC_PropertyKeyName();
    setState(799);
    match(CypherParser::SP);
    setState(800);
    kU_DataType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CreateNodeConstraintContext ------------------------------------------------------------------

CypherParser::KU_CreateNodeConstraintContext::KU_CreateNodeConstraintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::PRIMARY() {
  return getToken(CypherParser::PRIMARY, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CreateNodeConstraintContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_CreateNodeConstraintContext::KEY() {
  return getToken(CypherParser::KEY, 0);
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_CreateNodeConstraintContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}


size_t CypherParser::KU_CreateNodeConstraintContext::getRuleIndex() const {
  return CypherParser::RuleKU_CreateNodeConstraint;
}


CypherParser::KU_CreateNodeConstraintContext* CypherParser::kU_CreateNodeConstraint() {
  KU_CreateNodeConstraintContext *_localctx = _tracker.createInstance<KU_CreateNodeConstraintContext>(_ctx, getState());
  enterRule(_localctx, 58, CypherParser::RuleKU_CreateNodeConstraint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(802);
    match(CypherParser::PRIMARY);
    setState(803);
    match(CypherParser::SP);
    setState(804);
    match(CypherParser::KEY);
    setState(806);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(805);
      match(CypherParser::SP);
    }
    setState(808);
    match(CypherParser::T__1);
    setState(810);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(809);
      match(CypherParser::SP);
    }
    setState(812);
    oC_PropertyKeyName();
    setState(814);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(813);
      match(CypherParser::SP);
    }
    setState(816);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_DataTypeContext ------------------------------------------------------------------

CypherParser::KU_DataTypeContext::KU_DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_DataTypeContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_DataTypeContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_DataTypeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_DataTypeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::KU_DataTypeContext *> CypherParser::KU_DataTypeContext::kU_DataType() {
  return getRuleContexts<CypherParser::KU_DataTypeContext>();
}

CypherParser::KU_DataTypeContext* CypherParser::KU_DataTypeContext::kU_DataType(size_t i) {
  return getRuleContext<CypherParser::KU_DataTypeContext>(i);
}

CypherParser::KU_ListIdentifiersContext* CypherParser::KU_DataTypeContext::kU_ListIdentifiers() {
  return getRuleContext<CypherParser::KU_ListIdentifiersContext>(0);
}


size_t CypherParser::KU_DataTypeContext::getRuleIndex() const {
  return CypherParser::RuleKU_DataType;
}



CypherParser::KU_DataTypeContext* CypherParser::kU_DataType() {
   return kU_DataType(0);
}

CypherParser::KU_DataTypeContext* CypherParser::kU_DataType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  CypherParser::KU_DataTypeContext *_localctx = _tracker.createInstance<KU_DataTypeContext>(_ctx, parentState);
  CypherParser::KU_DataTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 60;
  enterRecursionRule(_localctx, 60, CypherParser::RuleKU_DataType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(870);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      setState(819);
      oC_SymbolicName();
      break;
    }

    case 2: {
      setState(820);
      match(CypherParser::UNION);
      setState(822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(821);
        match(CypherParser::SP);
      }
      setState(824);
      match(CypherParser::T__1);
      setState(826);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(825);
        match(CypherParser::SP);
      }
      setState(828);
      kU_PropertyDefinitions();
      setState(830);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(829);
        match(CypherParser::SP);
      }
      setState(832);
      match(CypherParser::T__2);
      break;
    }

    case 3: {
      setState(834);
      oC_SymbolicName();
      setState(836);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(835);
        match(CypherParser::SP);
      }
      setState(838);
      match(CypherParser::T__1);
      setState(840);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(839);
        match(CypherParser::SP);
      }
      setState(842);
      kU_PropertyDefinitions();
      setState(844);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(843);
        match(CypherParser::SP);
      }
      setState(846);
      match(CypherParser::T__2);
      break;
    }

    case 4: {
      setState(848);
      oC_SymbolicName();
      setState(850);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(849);
        match(CypherParser::SP);
      }
      setState(852);
      match(CypherParser::T__1);
      setState(854);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(853);
        match(CypherParser::SP);
      }
      setState(856);
      kU_DataType(0);
      setState(858);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(857);
        match(CypherParser::SP);
      }
      setState(860);
      match(CypherParser::T__3);
      setState(862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(861);
        match(CypherParser::SP);
      }
      setState(864);
      kU_DataType(0);
      setState(866);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(865);
        match(CypherParser::SP);
      }
      setState(868);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(876);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<KU_DataTypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleKU_DataType);
        setState(872);

        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
        setState(873);
        kU_ListIdentifiers(); 
      }
      setState(878);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- KU_ListIdentifiersContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifiersContext::KU_ListIdentifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_ListIdentifierContext *> CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier() {
  return getRuleContexts<CypherParser::KU_ListIdentifierContext>();
}

CypherParser::KU_ListIdentifierContext* CypherParser::KU_ListIdentifiersContext::kU_ListIdentifier(size_t i) {
  return getRuleContext<CypherParser::KU_ListIdentifierContext>(i);
}


size_t CypherParser::KU_ListIdentifiersContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifiers;
}


CypherParser::KU_ListIdentifiersContext* CypherParser::kU_ListIdentifiers() {
  KU_ListIdentifiersContext *_localctx = _tracker.createInstance<KU_ListIdentifiersContext>(_ctx, getState());
  enterRule(_localctx, 62, CypherParser::RuleKU_ListIdentifiers);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(879);
    kU_ListIdentifier();
    setState(883);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(880);
        kU_ListIdentifier(); 
      }
      setState(885);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListIdentifierContext ------------------------------------------------------------------

CypherParser::KU_ListIdentifierContext::KU_ListIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_IntegerLiteralContext* CypherParser::KU_ListIdentifierContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::KU_ListIdentifierContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListIdentifier;
}


CypherParser::KU_ListIdentifierContext* CypherParser::kU_ListIdentifier() {
  KU_ListIdentifierContext *_localctx = _tracker.createInstance<KU_ListIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 64, CypherParser::RuleKU_ListIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(886);
    match(CypherParser::T__6);
    setState(888);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DecimalInteger) {
      setState(887);
      oC_IntegerLiteral();
    }
    setState(890);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnyCypherOptionContext ------------------------------------------------------------------

CypherParser::OC_AnyCypherOptionContext::OC_AnyCypherOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExplainContext* CypherParser::OC_AnyCypherOptionContext::oC_Explain() {
  return getRuleContext<CypherParser::OC_ExplainContext>(0);
}

CypherParser::OC_ProfileContext* CypherParser::OC_AnyCypherOptionContext::oC_Profile() {
  return getRuleContext<CypherParser::OC_ProfileContext>(0);
}


size_t CypherParser::OC_AnyCypherOptionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnyCypherOption;
}


CypherParser::OC_AnyCypherOptionContext* CypherParser::oC_AnyCypherOption() {
  OC_AnyCypherOptionContext *_localctx = _tracker.createInstance<OC_AnyCypherOptionContext>(_ctx, getState());
  enterRule(_localctx, 66, CypherParser::RuleOC_AnyCypherOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(894);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::EXPLAIN: {
        enterOuterAlt(_localctx, 1);
        setState(892);
        oC_Explain();
        break;
      }

      case CypherParser::PROFILE: {
        enterOuterAlt(_localctx, 2);
        setState(893);
        oC_Profile();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExplainContext ------------------------------------------------------------------

CypherParser::OC_ExplainContext::OC_ExplainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExplainContext::EXPLAIN() {
  return getToken(CypherParser::EXPLAIN, 0);
}


size_t CypherParser::OC_ExplainContext::getRuleIndex() const {
  return CypherParser::RuleOC_Explain;
}


CypherParser::OC_ExplainContext* CypherParser::oC_Explain() {
  OC_ExplainContext *_localctx = _tracker.createInstance<OC_ExplainContext>(_ctx, getState());
  enterRule(_localctx, 68, CypherParser::RuleOC_Explain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(896);
    match(CypherParser::EXPLAIN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProfileContext ------------------------------------------------------------------

CypherParser::OC_ProfileContext::OC_ProfileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProfileContext::PROFILE() {
  return getToken(CypherParser::PROFILE, 0);
}


size_t CypherParser::OC_ProfileContext::getRuleIndex() const {
  return CypherParser::RuleOC_Profile;
}


CypherParser::OC_ProfileContext* CypherParser::oC_Profile() {
  OC_ProfileContext *_localctx = _tracker.createInstance<OC_ProfileContext>(_ctx, getState());
  enterRule(_localctx, 70, CypherParser::RuleOC_Profile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(898);
    match(CypherParser::PROFILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_TransactionContext ------------------------------------------------------------------

CypherParser::KU_TransactionContext::KU_TransactionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_TransactionContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_TransactionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::TRANSACTION() {
  return getToken(CypherParser::TRANSACTION, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::READ() {
  return getToken(CypherParser::READ, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ONLY() {
  return getToken(CypherParser::ONLY, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT() {
  return getToken(CypherParser::COMMIT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::COMMIT_SKIP_CHECKPOINT() {
  return getToken(CypherParser::COMMIT_SKIP_CHECKPOINT, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK() {
  return getToken(CypherParser::ROLLBACK, 0);
}

tree::TerminalNode* CypherParser::KU_TransactionContext::ROLLBACK_SKIP_CHECKPOINT() {
  return getToken(CypherParser::ROLLBACK_SKIP_CHECKPOINT, 0);
}


size_t CypherParser::KU_TransactionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Transaction;
}


CypherParser::KU_TransactionContext* CypherParser::kU_Transaction() {
  KU_TransactionContext *_localctx = _tracker.createInstance<KU_TransactionContext>(_ctx, getState());
  enterRule(_localctx, 72, CypherParser::RuleKU_Transaction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(914);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(900);
      match(CypherParser::BEGIN);
      setState(901);
      match(CypherParser::SP);
      setState(902);
      match(CypherParser::TRANSACTION);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(903);
      match(CypherParser::BEGIN);
      setState(904);
      match(CypherParser::SP);
      setState(905);
      match(CypherParser::TRANSACTION);
      setState(906);
      match(CypherParser::SP);
      setState(907);
      match(CypherParser::READ);
      setState(908);
      match(CypherParser::SP);
      setState(909);
      match(CypherParser::ONLY);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(910);
      match(CypherParser::COMMIT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(911);
      match(CypherParser::COMMIT_SKIP_CHECKPOINT);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(912);
      match(CypherParser::ROLLBACK);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(913);
      match(CypherParser::ROLLBACK_SKIP_CHECKPOINT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ExtensionContext ------------------------------------------------------------------

CypherParser::KU_ExtensionContext::KU_ExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_LoadExtensionContext* CypherParser::KU_ExtensionContext::kU_LoadExtension() {
  return getRuleContext<CypherParser::KU_LoadExtensionContext>(0);
}

CypherParser::KU_InstallExtensionContext* CypherParser::KU_ExtensionContext::kU_InstallExtension() {
  return getRuleContext<CypherParser::KU_InstallExtensionContext>(0);
}


size_t CypherParser::KU_ExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_Extension;
}


CypherParser::KU_ExtensionContext* CypherParser::kU_Extension() {
  KU_ExtensionContext *_localctx = _tracker.createInstance<KU_ExtensionContext>(_ctx, getState());
  enterRule(_localctx, 74, CypherParser::RuleKU_Extension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(918);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 1);
        setState(916);
        kU_LoadExtension();
        break;
      }

      case CypherParser::INSTALL: {
        enterOuterAlt(_localctx, 2);
        setState(917);
        kU_InstallExtension();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadExtensionContext ------------------------------------------------------------------

CypherParser::KU_LoadExtensionContext::KU_LoadExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadExtensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::EXTENSION() {
  return getToken(CypherParser::EXTENSION, 0);
}

tree::TerminalNode* CypherParser::KU_LoadExtensionContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_LoadExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadExtension;
}


CypherParser::KU_LoadExtensionContext* CypherParser::kU_LoadExtension() {
  KU_LoadExtensionContext *_localctx = _tracker.createInstance<KU_LoadExtensionContext>(_ctx, getState());
  enterRule(_localctx, 76, CypherParser::RuleKU_LoadExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(920);
    match(CypherParser::LOAD);
    setState(921);
    match(CypherParser::SP);
    setState(922);
    match(CypherParser::EXTENSION);
    setState(923);
    match(CypherParser::SP);
    setState(926);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::StringLiteral: {
        setState(924);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(925);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InstallExtensionContext ------------------------------------------------------------------

CypherParser::KU_InstallExtensionContext::KU_InstallExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::INSTALL() {
  return getToken(CypherParser::INSTALL, 0);
}

tree::TerminalNode* CypherParser::KU_InstallExtensionContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_VariableContext* CypherParser::KU_InstallExtensionContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::KU_InstallExtensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_InstallExtension;
}


CypherParser::KU_InstallExtensionContext* CypherParser::kU_InstallExtension() {
  KU_InstallExtensionContext *_localctx = _tracker.createInstance<KU_InstallExtensionContext>(_ctx, getState());
  enterRule(_localctx, 78, CypherParser::RuleKU_InstallExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(928);
    match(CypherParser::INSTALL);
    setState(929);
    match(CypherParser::SP);
    setState(930);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_QueryContext ------------------------------------------------------------------

CypherParser::OC_QueryContext::OC_QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RegularQueryContext* CypherParser::OC_QueryContext::oC_RegularQuery() {
  return getRuleContext<CypherParser::OC_RegularQueryContext>(0);
}


size_t CypherParser::OC_QueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_Query;
}


CypherParser::OC_QueryContext* CypherParser::oC_Query() {
  OC_QueryContext *_localctx = _tracker.createInstance<OC_QueryContext>(_ctx, getState());
  enterRule(_localctx, 80, CypherParser::RuleOC_Query);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(932);
    oC_RegularQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularQueryContext ------------------------------------------------------------------

CypherParser::OC_RegularQueryContext::OC_RegularQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_RegularQueryContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}

std::vector<CypherParser::OC_UnionContext *> CypherParser::OC_RegularQueryContext::oC_Union() {
  return getRuleContexts<CypherParser::OC_UnionContext>();
}

CypherParser::OC_UnionContext* CypherParser::OC_RegularQueryContext::oC_Union(size_t i) {
  return getRuleContext<CypherParser::OC_UnionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RegularQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RegularQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_ReturnContext *> CypherParser::OC_RegularQueryContext::oC_Return() {
  return getRuleContexts<CypherParser::OC_ReturnContext>();
}

CypherParser::OC_ReturnContext* CypherParser::OC_RegularQueryContext::oC_Return(size_t i) {
  return getRuleContext<CypherParser::OC_ReturnContext>(i);
}


size_t CypherParser::OC_RegularQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularQuery;
}


CypherParser::OC_RegularQueryContext* CypherParser::oC_RegularQuery() {
  OC_RegularQueryContext *_localctx = _tracker.createInstance<OC_RegularQueryContext>(_ctx, getState());
  enterRule(_localctx, 82, CypherParser::RuleOC_RegularQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(955);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(934);
      oC_SingleQuery();
      setState(941);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(936);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(935);
            match(CypherParser::SP);
          }
          setState(938);
          oC_Union(); 
        }
        setState(943);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(948); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(944);
                oC_Return();
                setState(946);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(945);
                  match(CypherParser::SP);
                }
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(950); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(952);
      oC_SingleQuery();
       notifyReturnNotAtEnd(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnionContext ------------------------------------------------------------------

CypherParser::OC_UnionContext::OC_UnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnionContext::UNION() {
  return getToken(CypherParser::UNION, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnionContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_SingleQueryContext* CypherParser::OC_UnionContext::oC_SingleQuery() {
  return getRuleContext<CypherParser::OC_SingleQueryContext>(0);
}


size_t CypherParser::OC_UnionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Union;
}


CypherParser::OC_UnionContext* CypherParser::oC_Union() {
  OC_UnionContext *_localctx = _tracker.createInstance<OC_UnionContext>(_ctx, getState());
  enterRule(_localctx, 84, CypherParser::RuleOC_Union);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(969);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(957);
      match(CypherParser::UNION);
      setState(958);
      match(CypherParser::SP);
      setState(959);
      match(CypherParser::ALL);
      setState(961);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(960);
        match(CypherParser::SP);
      }
      setState(963);
      oC_SingleQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(964);
      match(CypherParser::UNION);
      setState(966);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(965);
        match(CypherParser::SP);
      }
      setState(968);
      oC_SingleQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SingleQueryContext ------------------------------------------------------------------

CypherParser::OC_SingleQueryContext::OC_SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_SingleQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

CypherParser::OC_MultiPartQueryContext* CypherParser::OC_SingleQueryContext::oC_MultiPartQuery() {
  return getRuleContext<CypherParser::OC_MultiPartQueryContext>(0);
}


size_t CypherParser::OC_SingleQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SingleQuery;
}


CypherParser::OC_SingleQueryContext* CypherParser::oC_SingleQuery() {
  OC_SingleQueryContext *_localctx = _tracker.createInstance<OC_SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 86, CypherParser::RuleOC_SingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(973);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(971);
      oC_SinglePartQuery();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(972);
      oC_MultiPartQuery();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SinglePartQueryContext ------------------------------------------------------------------

CypherParser::OC_SinglePartQueryContext::OC_SinglePartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ReturnContext* CypherParser::OC_SinglePartQueryContext::oC_Return() {
  return getRuleContext<CypherParser::OC_ReturnContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SinglePartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SinglePartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::OC_SinglePartQueryContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}


size_t CypherParser::OC_SinglePartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_SinglePartQuery;
}


CypherParser::OC_SinglePartQueryContext* CypherParser::oC_SinglePartQuery() {
  OC_SinglePartQueryContext *_localctx = _tracker.createInstance<OC_SinglePartQueryContext>(_ctx, getState());
  enterRule(_localctx, 88, CypherParser::RuleOC_SinglePartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1020);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(981);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 47) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 47)) & 1992864825345) != 0)) {
        setState(975);
        oC_ReadingClause();
        setState(977);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(976);
          match(CypherParser::SP);
        }
        setState(983);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(984);
      oC_Return();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(991);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (((((_la - 47) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 47)) & 1992864825345) != 0)) {
        setState(985);
        oC_ReadingClause();
        setState(987);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(986);
          match(CypherParser::SP);
        }
        setState(993);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(994);
      oC_UpdatingClause();
      setState(1001);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(996);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(995);
            match(CypherParser::SP);
          }
          setState(998);
          oC_UpdatingClause(); 
        }
        setState(1003);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx);
      }
      setState(1008);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
      case 1: {
        setState(1005);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1004);
          match(CypherParser::SP);
        }
        setState(1007);
        oC_Return();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1014); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1010);
        oC_ReadingClause();
        setState(1012);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
        case 1: {
          setState(1011);
          match(CypherParser::SP);
          break;
        }

        default:
          break;
        }
        setState(1016); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (((((_la - 47) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 47)) & 1992864825345) != 0));
       notifyQueryNotConcludeWithReturn(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiPartQueryContext ------------------------------------------------------------------

CypherParser::OC_MultiPartQueryContext::OC_MultiPartQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SinglePartQueryContext* CypherParser::OC_MultiPartQueryContext::oC_SinglePartQuery() {
  return getRuleContext<CypherParser::OC_SinglePartQueryContext>(0);
}

std::vector<CypherParser::KU_QueryPartContext *> CypherParser::OC_MultiPartQueryContext::kU_QueryPart() {
  return getRuleContexts<CypherParser::KU_QueryPartContext>();
}

CypherParser::KU_QueryPartContext* CypherParser::OC_MultiPartQueryContext::kU_QueryPart(size_t i) {
  return getRuleContext<CypherParser::KU_QueryPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiPartQueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiPartQueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiPartQueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiPartQuery;
}


CypherParser::OC_MultiPartQueryContext* CypherParser::oC_MultiPartQuery() {
  OC_MultiPartQueryContext *_localctx = _tracker.createInstance<OC_MultiPartQueryContext>(_ctx, getState());
  enterRule(_localctx, 90, CypherParser::RuleOC_MultiPartQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1026); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1022);
              kU_QueryPart();
              setState(1024);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(1023);
                match(CypherParser::SP);
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1028); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1030);
    oC_SinglePartQuery();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_QueryPartContext ------------------------------------------------------------------

CypherParser::KU_QueryPartContext::KU_QueryPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_WithContext* CypherParser::KU_QueryPartContext::oC_With() {
  return getRuleContext<CypherParser::OC_WithContext>(0);
}

std::vector<CypherParser::OC_ReadingClauseContext *> CypherParser::KU_QueryPartContext::oC_ReadingClause() {
  return getRuleContexts<CypherParser::OC_ReadingClauseContext>();
}

CypherParser::OC_ReadingClauseContext* CypherParser::KU_QueryPartContext::oC_ReadingClause(size_t i) {
  return getRuleContext<CypherParser::OC_ReadingClauseContext>(i);
}

std::vector<CypherParser::OC_UpdatingClauseContext *> CypherParser::KU_QueryPartContext::oC_UpdatingClause() {
  return getRuleContexts<CypherParser::OC_UpdatingClauseContext>();
}

CypherParser::OC_UpdatingClauseContext* CypherParser::KU_QueryPartContext::oC_UpdatingClause(size_t i) {
  return getRuleContext<CypherParser::OC_UpdatingClauseContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_QueryPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_QueryPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_QueryPartContext::getRuleIndex() const {
  return CypherParser::RuleKU_QueryPart;
}


CypherParser::KU_QueryPartContext* CypherParser::kU_QueryPart() {
  KU_QueryPartContext *_localctx = _tracker.createInstance<KU_QueryPartContext>(_ctx, getState());
  enterRule(_localctx, 92, CypherParser::RuleKU_QueryPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1038);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 47) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 47)) & 1992864825345) != 0)) {
      setState(1032);
      oC_ReadingClause();
      setState(1034);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1033);
        match(CypherParser::SP);
      }
      setState(1040);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1047);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 88) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 88)) & 59) != 0)) {
      setState(1041);
      oC_UpdatingClause();
      setState(1043);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1042);
        match(CypherParser::SP);
      }
      setState(1049);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1050);
    oC_With();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpdatingClauseContext ------------------------------------------------------------------

CypherParser::OC_UpdatingClauseContext::OC_UpdatingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_CreateContext* CypherParser::OC_UpdatingClauseContext::oC_Create() {
  return getRuleContext<CypherParser::OC_CreateContext>(0);
}

CypherParser::OC_MergeContext* CypherParser::OC_UpdatingClauseContext::oC_Merge() {
  return getRuleContext<CypherParser::OC_MergeContext>(0);
}

CypherParser::OC_SetContext* CypherParser::OC_UpdatingClauseContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

CypherParser::OC_DeleteContext* CypherParser::OC_UpdatingClauseContext::oC_Delete() {
  return getRuleContext<CypherParser::OC_DeleteContext>(0);
}


size_t CypherParser::OC_UpdatingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpdatingClause;
}


CypherParser::OC_UpdatingClauseContext* CypherParser::oC_UpdatingClause() {
  OC_UpdatingClauseContext *_localctx = _tracker.createInstance<OC_UpdatingClauseContext>(_ctx, getState());
  enterRule(_localctx, 94, CypherParser::RuleOC_UpdatingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1056);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::CREATE: {
        enterOuterAlt(_localctx, 1);
        setState(1052);
        oC_Create();
        break;
      }

      case CypherParser::MERGE: {
        enterOuterAlt(_localctx, 2);
        setState(1053);
        oC_Merge();
        break;
      }

      case CypherParser::SET: {
        enterOuterAlt(_localctx, 3);
        setState(1054);
        oC_Set();
        break;
      }

      case CypherParser::DETACH:
      case CypherParser::DELETE: {
        enterOuterAlt(_localctx, 4);
        setState(1055);
        oC_Delete();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReadingClauseContext ------------------------------------------------------------------

CypherParser::OC_ReadingClauseContext::OC_ReadingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_MatchContext* CypherParser::OC_ReadingClauseContext::oC_Match() {
  return getRuleContext<CypherParser::OC_MatchContext>(0);
}

CypherParser::OC_UnwindContext* CypherParser::OC_ReadingClauseContext::oC_Unwind() {
  return getRuleContext<CypherParser::OC_UnwindContext>(0);
}

CypherParser::KU_InQueryCallContext* CypherParser::OC_ReadingClauseContext::kU_InQueryCall() {
  return getRuleContext<CypherParser::KU_InQueryCallContext>(0);
}

CypherParser::KU_LoadFromContext* CypherParser::OC_ReadingClauseContext::kU_LoadFrom() {
  return getRuleContext<CypherParser::KU_LoadFromContext>(0);
}


size_t CypherParser::OC_ReadingClauseContext::getRuleIndex() const {
  return CypherParser::RuleOC_ReadingClause;
}


CypherParser::OC_ReadingClauseContext* CypherParser::oC_ReadingClause() {
  OC_ReadingClauseContext *_localctx = _tracker.createInstance<OC_ReadingClauseContext>(_ctx, getState());
  enterRule(_localctx, 96, CypherParser::RuleOC_ReadingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1062);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::OPTIONAL:
      case CypherParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1058);
        oC_Match();
        break;
      }

      case CypherParser::UNWIND: {
        enterOuterAlt(_localctx, 2);
        setState(1059);
        oC_Unwind();
        break;
      }

      case CypherParser::CALL: {
        enterOuterAlt(_localctx, 3);
        setState(1060);
        kU_InQueryCall();
        break;
      }

      case CypherParser::LOAD: {
        enterOuterAlt(_localctx, 4);
        setState(1061);
        kU_LoadFrom();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_LoadFromContext ------------------------------------------------------------------

CypherParser::KU_LoadFromContext::KU_LoadFromContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::LOAD() {
  return getToken(CypherParser::LOAD, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_LoadFromContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::FROM() {
  return getToken(CypherParser::FROM, 0);
}

CypherParser::KU_FilePathsContext* CypherParser::KU_LoadFromContext::kU_FilePaths() {
  return getRuleContext<CypherParser::KU_FilePathsContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::KU_LoadFromContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::KU_LoadFromContext::HEADERS() {
  return getToken(CypherParser::HEADERS, 0);
}

CypherParser::KU_PropertyDefinitionsContext* CypherParser::KU_LoadFromContext::kU_PropertyDefinitions() {
  return getRuleContext<CypherParser::KU_PropertyDefinitionsContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_LoadFromContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_ParsingOptionsContext* CypherParser::KU_LoadFromContext::kU_ParsingOptions() {
  return getRuleContext<CypherParser::KU_ParsingOptionsContext>(0);
}


size_t CypherParser::KU_LoadFromContext::getRuleIndex() const {
  return CypherParser::RuleKU_LoadFrom;
}


CypherParser::KU_LoadFromContext* CypherParser::kU_LoadFrom() {
  KU_LoadFromContext *_localctx = _tracker.createInstance<KU_LoadFromContext>(_ctx, getState());
  enterRule(_localctx, 98, CypherParser::RuleKU_LoadFrom);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1064);
    match(CypherParser::LOAD);
    setState(1082);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      setState(1065);
      match(CypherParser::SP);
      setState(1066);
      match(CypherParser::WITH);
      setState(1067);
      match(CypherParser::SP);
      setState(1068);
      match(CypherParser::HEADERS);
      setState(1070);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1069);
        match(CypherParser::SP);
      }
      setState(1072);
      match(CypherParser::T__1);
      setState(1074);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1073);
        match(CypherParser::SP);
      }
      setState(1076);
      kU_PropertyDefinitions();
      setState(1078);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1077);
        match(CypherParser::SP);
      }
      setState(1080);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
    setState(1084);
    match(CypherParser::SP);
    setState(1085);
    match(CypherParser::FROM);
    setState(1086);
    match(CypherParser::SP);
    setState(1104);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::T__6:
      case CypherParser::GLOB:
      case CypherParser::StringLiteral: {
        setState(1087);
        kU_FilePaths();
        setState(1101);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
        case 1: {
          setState(1089);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1088);
            match(CypherParser::SP);
          }
          setState(1091);
          match(CypherParser::T__1);
          setState(1093);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1092);
            match(CypherParser::SP);
          }
          setState(1095);
          kU_ParsingOptions();
          setState(1097);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1096);
            match(CypherParser::SP);
          }
          setState(1099);
          match(CypherParser::T__2);
          break;
        }

        default:
          break;
        }
        break;
      }

      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(1103);
        oC_Variable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1110);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      setState(1107);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1106);
        match(CypherParser::SP);
      }
      setState(1109);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_InQueryCallContext ------------------------------------------------------------------

CypherParser::KU_InQueryCallContext::KU_InQueryCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::CALL() {
  return getToken(CypherParser::CALL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_InQueryCallContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_InQueryCallContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::KU_InQueryCallContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::KU_InQueryCallContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_InQueryCallContext::getRuleIndex() const {
  return CypherParser::RuleKU_InQueryCall;
}


CypherParser::KU_InQueryCallContext* CypherParser::kU_InQueryCall() {
  KU_InQueryCallContext *_localctx = _tracker.createInstance<KU_InQueryCallContext>(_ctx, getState());
  enterRule(_localctx, 100, CypherParser::RuleKU_InQueryCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1112);
    match(CypherParser::CALL);
    setState(1113);
    match(CypherParser::SP);
    setState(1114);
    oC_FunctionInvocation();
    setState(1119);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      setState(1116);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1115);
        match(CypherParser::SP);
      }
      setState(1118);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MatchContext ------------------------------------------------------------------

CypherParser::OC_MatchContext::OC_MatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MatchContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MatchContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_MatchContext::OPTIONAL() {
  return getToken(CypherParser::OPTIONAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MatchContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MatchContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_MatchContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_MatchContext::getRuleIndex() const {
  return CypherParser::RuleOC_Match;
}


CypherParser::OC_MatchContext* CypherParser::oC_Match() {
  OC_MatchContext *_localctx = _tracker.createInstance<OC_MatchContext>(_ctx, getState());
  enterRule(_localctx, 102, CypherParser::RuleOC_Match);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1123);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::OPTIONAL) {
      setState(1121);
      match(CypherParser::OPTIONAL);
      setState(1122);
      match(CypherParser::SP);
    }
    setState(1125);
    match(CypherParser::MATCH);
    setState(1127);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1126);
      match(CypherParser::SP);
    }
    setState(1129);
    oC_Pattern();
    setState(1134);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
    case 1: {
      setState(1131);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1130);
        match(CypherParser::SP);
      }
      setState(1133);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnwindContext ------------------------------------------------------------------

CypherParser::OC_UnwindContext::OC_UnwindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UnwindContext::UNWIND() {
  return getToken(CypherParser::UNWIND, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_UnwindContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnwindContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_UnwindContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_UnwindContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_UnwindContext::getRuleIndex() const {
  return CypherParser::RuleOC_Unwind;
}


CypherParser::OC_UnwindContext* CypherParser::oC_Unwind() {
  OC_UnwindContext *_localctx = _tracker.createInstance<OC_UnwindContext>(_ctx, getState());
  enterRule(_localctx, 104, CypherParser::RuleOC_Unwind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1136);
    match(CypherParser::UNWIND);
    setState(1138);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1137);
      match(CypherParser::SP);
    }
    setState(1140);
    oC_Expression();
    setState(1141);
    match(CypherParser::SP);
    setState(1142);
    match(CypherParser::AS);
    setState(1143);
    match(CypherParser::SP);
    setState(1144);
    oC_Variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CreateContext ------------------------------------------------------------------

CypherParser::OC_CreateContext::OC_CreateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CreateContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_CreateContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_CreateContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_CreateContext::getRuleIndex() const {
  return CypherParser::RuleOC_Create;
}


CypherParser::OC_CreateContext* CypherParser::oC_Create() {
  OC_CreateContext *_localctx = _tracker.createInstance<OC_CreateContext>(_ctx, getState());
  enterRule(_localctx, 106, CypherParser::RuleOC_Create);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1146);
    match(CypherParser::CREATE);
    setState(1148);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1147);
      match(CypherParser::SP);
    }
    setState(1150);
    oC_Pattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeContext ------------------------------------------------------------------

CypherParser::OC_MergeContext::OC_MergeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeContext::MERGE() {
  return getToken(CypherParser::MERGE, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_MergeContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_MergeActionContext *> CypherParser::OC_MergeContext::oC_MergeAction() {
  return getRuleContexts<CypherParser::OC_MergeActionContext>();
}

CypherParser::OC_MergeActionContext* CypherParser::OC_MergeContext::oC_MergeAction(size_t i) {
  return getRuleContext<CypherParser::OC_MergeActionContext>(i);
}


size_t CypherParser::OC_MergeContext::getRuleIndex() const {
  return CypherParser::RuleOC_Merge;
}


CypherParser::OC_MergeContext* CypherParser::oC_Merge() {
  OC_MergeContext *_localctx = _tracker.createInstance<OC_MergeContext>(_ctx, getState());
  enterRule(_localctx, 108, CypherParser::RuleOC_Merge);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1152);
    match(CypherParser::MERGE);
    setState(1154);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1153);
      match(CypherParser::SP);
    }
    setState(1156);
    oC_Pattern();
    setState(1161);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1157);
        match(CypherParser::SP);
        setState(1158);
        oC_MergeAction(); 
      }
      setState(1163);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MergeActionContext ------------------------------------------------------------------

CypherParser::OC_MergeActionContext::OC_MergeActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::ON() {
  return getToken(CypherParser::ON, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MergeActionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_SetContext* CypherParser::OC_MergeActionContext::oC_Set() {
  return getRuleContext<CypherParser::OC_SetContext>(0);
}

tree::TerminalNode* CypherParser::OC_MergeActionContext::CREATE() {
  return getToken(CypherParser::CREATE, 0);
}


size_t CypherParser::OC_MergeActionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MergeAction;
}


CypherParser::OC_MergeActionContext* CypherParser::oC_MergeAction() {
  OC_MergeActionContext *_localctx = _tracker.createInstance<OC_MergeActionContext>(_ctx, getState());
  enterRule(_localctx, 110, CypherParser::RuleOC_MergeAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1174);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1164);
      match(CypherParser::ON);
      setState(1165);
      match(CypherParser::SP);
      setState(1166);
      match(CypherParser::MATCH);
      setState(1167);
      match(CypherParser::SP);
      setState(1168);
      oC_Set();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1169);
      match(CypherParser::ON);
      setState(1170);
      match(CypherParser::SP);
      setState(1171);
      match(CypherParser::CREATE);
      setState(1172);
      match(CypherParser::SP);
      setState(1173);
      oC_Set();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetContext ------------------------------------------------------------------

CypherParser::OC_SetContext::OC_SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SetContext::SET() {
  return getToken(CypherParser::SET, 0);
}

std::vector<CypherParser::OC_SetItemContext *> CypherParser::OC_SetContext::oC_SetItem() {
  return getRuleContexts<CypherParser::OC_SetItemContext>();
}

CypherParser::OC_SetItemContext* CypherParser::OC_SetContext::oC_SetItem(size_t i) {
  return getRuleContext<CypherParser::OC_SetItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetContext::getRuleIndex() const {
  return CypherParser::RuleOC_Set;
}


CypherParser::OC_SetContext* CypherParser::oC_Set() {
  OC_SetContext *_localctx = _tracker.createInstance<OC_SetContext>(_ctx, getState());
  enterRule(_localctx, 112, CypherParser::RuleOC_Set);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1176);
    match(CypherParser::SET);
    setState(1178);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1177);
      match(CypherParser::SP);
    }
    setState(1180);
    oC_SetItem();
    setState(1191);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1182);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1181);
          match(CypherParser::SP);
        }
        setState(1184);
        match(CypherParser::T__3);
        setState(1186);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1185);
          match(CypherParser::SP);
        }
        setState(1188);
        oC_SetItem(); 
      }
      setState(1193);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SetItemContext ------------------------------------------------------------------

CypherParser::OC_SetItemContext::OC_SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyExpressionContext* CypherParser::OC_SetItemContext::oC_PropertyExpression() {
  return getRuleContext<CypherParser::OC_PropertyExpressionContext>(0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SetItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_SetItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_SetItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_SetItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SetItem;
}


CypherParser::OC_SetItemContext* CypherParser::oC_SetItem() {
  OC_SetItemContext *_localctx = _tracker.createInstance<OC_SetItemContext>(_ctx, getState());
  enterRule(_localctx, 114, CypherParser::RuleOC_SetItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1194);
    oC_PropertyExpression();
    setState(1196);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1195);
      match(CypherParser::SP);
    }
    setState(1198);
    match(CypherParser::T__4);
    setState(1200);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1199);
      match(CypherParser::SP);
    }
    setState(1202);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DeleteContext ------------------------------------------------------------------

CypherParser::OC_DeleteContext::OC_DeleteContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DELETE() {
  return getToken(CypherParser::DELETE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_DeleteContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_DeleteContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::DETACH() {
  return getToken(CypherParser::DETACH, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_DeleteContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_DeleteContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_DeleteContext::getRuleIndex() const {
  return CypherParser::RuleOC_Delete;
}


CypherParser::OC_DeleteContext* CypherParser::oC_Delete() {
  OC_DeleteContext *_localctx = _tracker.createInstance<OC_DeleteContext>(_ctx, getState());
  enterRule(_localctx, 116, CypherParser::RuleOC_Delete);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1206);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::DETACH) {
      setState(1204);
      match(CypherParser::DETACH);
      setState(1205);
      match(CypherParser::SP);
    }
    setState(1208);
    match(CypherParser::DELETE);
    setState(1210);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1209);
      match(CypherParser::SP);
    }
    setState(1212);
    oC_Expression();
    setState(1223);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1214);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1213);
          match(CypherParser::SP);
        }
        setState(1216);
        match(CypherParser::T__3);
        setState(1218);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1217);
          match(CypherParser::SP);
        }
        setState(1220);
        oC_Expression(); 
      }
      setState(1225);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WithContext ------------------------------------------------------------------

CypherParser::OC_WithContext::OC_WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WithContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_WithContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}

CypherParser::OC_WhereContext* CypherParser::OC_WithContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

tree::TerminalNode* CypherParser::OC_WithContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_WithContext::getRuleIndex() const {
  return CypherParser::RuleOC_With;
}


CypherParser::OC_WithContext* CypherParser::oC_With() {
  OC_WithContext *_localctx = _tracker.createInstance<OC_WithContext>(_ctx, getState());
  enterRule(_localctx, 118, CypherParser::RuleOC_With);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1226);
    match(CypherParser::WITH);
    setState(1227);
    oC_ProjectionBody();
    setState(1232);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(1229);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1228);
        match(CypherParser::SP);
      }
      setState(1231);
      oC_Where();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ReturnContext ------------------------------------------------------------------

CypherParser::OC_ReturnContext::OC_ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ReturnContext::RETURN() {
  return getToken(CypherParser::RETURN, 0);
}

CypherParser::OC_ProjectionBodyContext* CypherParser::OC_ReturnContext::oC_ProjectionBody() {
  return getRuleContext<CypherParser::OC_ProjectionBodyContext>(0);
}


size_t CypherParser::OC_ReturnContext::getRuleIndex() const {
  return CypherParser::RuleOC_Return;
}


CypherParser::OC_ReturnContext* CypherParser::oC_Return() {
  OC_ReturnContext *_localctx = _tracker.createInstance<OC_ReturnContext>(_ctx, getState());
  enterRule(_localctx, 120, CypherParser::RuleOC_Return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1234);
    match(CypherParser::RETURN);
    setState(1235);
    oC_ProjectionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionBodyContext ------------------------------------------------------------------

CypherParser::OC_ProjectionBodyContext::OC_ProjectionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionBodyContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::OC_ProjectionBodyContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}

tree::TerminalNode* CypherParser::OC_ProjectionBodyContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

CypherParser::OC_OrderContext* CypherParser::OC_ProjectionBodyContext::oC_Order() {
  return getRuleContext<CypherParser::OC_OrderContext>(0);
}

CypherParser::OC_SkipContext* CypherParser::OC_ProjectionBodyContext::oC_Skip() {
  return getRuleContext<CypherParser::OC_SkipContext>(0);
}

CypherParser::OC_LimitContext* CypherParser::OC_ProjectionBodyContext::oC_Limit() {
  return getRuleContext<CypherParser::OC_LimitContext>(0);
}


size_t CypherParser::OC_ProjectionBodyContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionBody;
}


CypherParser::OC_ProjectionBodyContext* CypherParser::oC_ProjectionBody() {
  OC_ProjectionBodyContext *_localctx = _tracker.createInstance<OC_ProjectionBodyContext>(_ctx, getState());
  enterRule(_localctx, 122, CypherParser::RuleOC_ProjectionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1241);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      setState(1238);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1237);
        match(CypherParser::SP);
      }
      setState(1240);
      match(CypherParser::DISTINCT);
      break;
    }

    default:
      break;
    }
    setState(1243);
    match(CypherParser::SP);
    setState(1244);
    oC_ProjectionItems();
    setState(1247);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      setState(1245);
      match(CypherParser::SP);
      setState(1246);
      oC_Order();
      break;
    }

    default:
      break;
    }
    setState(1251);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(1249);
      match(CypherParser::SP);
      setState(1250);
      oC_Skip();
      break;
    }

    default:
      break;
    }
    setState(1255);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(1253);
      match(CypherParser::SP);
      setState(1254);
      oC_Limit();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemsContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemsContext::OC_ProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<CypherParser::OC_ProjectionItemContext *> CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem() {
  return getRuleContexts<CypherParser::OC_ProjectionItemContext>();
}

CypherParser::OC_ProjectionItemContext* CypherParser::OC_ProjectionItemsContext::oC_ProjectionItem(size_t i) {
  return getRuleContext<CypherParser::OC_ProjectionItemContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItems;
}


CypherParser::OC_ProjectionItemsContext* CypherParser::oC_ProjectionItems() {
  OC_ProjectionItemsContext *_localctx = _tracker.createInstance<OC_ProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 124, CypherParser::RuleOC_ProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1285);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::STAR: {
        enterOuterAlt(_localctx, 1);
        setState(1257);
        match(CypherParser::STAR);
        setState(1268);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1259);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1258);
              match(CypherParser::SP);
            }
            setState(1261);
            match(CypherParser::T__3);
            setState(1263);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1262);
              match(CypherParser::SP);
            }
            setState(1265);
            oC_ProjectionItem(); 
          }
          setState(1270);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx);
        }
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__6:
      case CypherParser::T__8:
      case CypherParser::T__26:
      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::NOT:
      case CypherParser::MINUS:
      case CypherParser::NULL_:
      case CypherParser::TRUE:
      case CypherParser::FALSE:
      case CypherParser::COUNT:
      case CypherParser::EXISTS:
      case CypherParser::CASE:
      case CypherParser::END:
      case CypherParser::StringLiteral:
      case CypherParser::DecimalInteger:
      case CypherParser::HexLetter:
      case CypherParser::RegularDecimalReal:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(1271);
        oC_ProjectionItem();
        setState(1282);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1273);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1272);
              match(CypherParser::SP);
            }
            setState(1275);
            match(CypherParser::T__3);
            setState(1277);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == CypherParser::SP) {
              setState(1276);
              match(CypherParser::SP);
            }
            setState(1279);
            oC_ProjectionItem(); 
          }
          setState(1284);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ProjectionItemContext ------------------------------------------------------------------

CypherParser::OC_ProjectionItemContext::OC_ProjectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ProjectionItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ProjectionItemContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ProjectionItemContext::AS() {
  return getToken(CypherParser::AS, 0);
}

CypherParser::OC_VariableContext* CypherParser::OC_ProjectionItemContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_ProjectionItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_ProjectionItem;
}


CypherParser::OC_ProjectionItemContext* CypherParser::oC_ProjectionItem() {
  OC_ProjectionItemContext *_localctx = _tracker.createInstance<OC_ProjectionItemContext>(_ctx, getState());
  enterRule(_localctx, 126, CypherParser::RuleOC_ProjectionItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1294);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1287);
      oC_Expression();
      setState(1288);
      match(CypherParser::SP);
      setState(1289);
      match(CypherParser::AS);
      setState(1290);
      match(CypherParser::SP);
      setState(1291);
      oC_Variable();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1293);
      oC_Expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrderContext ------------------------------------------------------------------

CypherParser::OC_OrderContext::OC_OrderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_OrderContext::ORDER() {
  return getToken(CypherParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrderContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrderContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_OrderContext::BY() {
  return getToken(CypherParser::BY, 0);
}

std::vector<CypherParser::OC_SortItemContext *> CypherParser::OC_OrderContext::oC_SortItem() {
  return getRuleContexts<CypherParser::OC_SortItemContext>();
}

CypherParser::OC_SortItemContext* CypherParser::OC_OrderContext::oC_SortItem(size_t i) {
  return getRuleContext<CypherParser::OC_SortItemContext>(i);
}


size_t CypherParser::OC_OrderContext::getRuleIndex() const {
  return CypherParser::RuleOC_Order;
}


CypherParser::OC_OrderContext* CypherParser::oC_Order() {
  OC_OrderContext *_localctx = _tracker.createInstance<OC_OrderContext>(_ctx, getState());
  enterRule(_localctx, 128, CypherParser::RuleOC_Order);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1296);
    match(CypherParser::ORDER);
    setState(1297);
    match(CypherParser::SP);
    setState(1298);
    match(CypherParser::BY);
    setState(1299);
    match(CypherParser::SP);
    setState(1300);
    oC_SortItem();
    setState(1308);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3) {
      setState(1301);
      match(CypherParser::T__3);
      setState(1303);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1302);
        match(CypherParser::SP);
      }
      setState(1305);
      oC_SortItem();
      setState(1310);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SkipContext ------------------------------------------------------------------

CypherParser::OC_SkipContext::OC_SkipContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SkipContext::L_SKIP() {
  return getToken(CypherParser::L_SKIP, 0);
}

tree::TerminalNode* CypherParser::OC_SkipContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SkipContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_SkipContext::getRuleIndex() const {
  return CypherParser::RuleOC_Skip;
}


CypherParser::OC_SkipContext* CypherParser::oC_Skip() {
  OC_SkipContext *_localctx = _tracker.createInstance<OC_SkipContext>(_ctx, getState());
  enterRule(_localctx, 130, CypherParser::RuleOC_Skip);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1311);
    match(CypherParser::L_SKIP);
    setState(1312);
    match(CypherParser::SP);
    setState(1313);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LimitContext ------------------------------------------------------------------

CypherParser::OC_LimitContext::OC_LimitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LimitContext::LIMIT() {
  return getToken(CypherParser::LIMIT, 0);
}

tree::TerminalNode* CypherParser::OC_LimitContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_LimitContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_LimitContext::getRuleIndex() const {
  return CypherParser::RuleOC_Limit;
}


CypherParser::OC_LimitContext* CypherParser::oC_Limit() {
  OC_LimitContext *_localctx = _tracker.createInstance<OC_LimitContext>(_ctx, getState());
  enterRule(_localctx, 132, CypherParser::RuleOC_Limit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1315);
    match(CypherParser::LIMIT);
    setState(1316);
    match(CypherParser::SP);
    setState(1317);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SortItemContext ------------------------------------------------------------------

CypherParser::OC_SortItemContext::OC_SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_SortItemContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASCENDING() {
  return getToken(CypherParser::ASCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::ASC() {
  return getToken(CypherParser::ASC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESCENDING() {
  return getToken(CypherParser::DESCENDING, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::DESC() {
  return getToken(CypherParser::DESC, 0);
}

tree::TerminalNode* CypherParser::OC_SortItemContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_SortItemContext::getRuleIndex() const {
  return CypherParser::RuleOC_SortItem;
}


CypherParser::OC_SortItemContext* CypherParser::oC_SortItem() {
  OC_SortItemContext *_localctx = _tracker.createInstance<OC_SortItemContext>(_ctx, getState());
  enterRule(_localctx, 134, CypherParser::RuleOC_SortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1319);
    oC_Expression();
    setState(1324);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      setState(1321);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1320);
        match(CypherParser::SP);
      }
      setState(1323);
      _la = _input->LA(1);
      if (!(((((_la - 103) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 103)) & 15) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_WhereContext ------------------------------------------------------------------

CypherParser::OC_WhereContext::OC_WhereContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_WhereContext::WHERE() {
  return getToken(CypherParser::WHERE, 0);
}

tree::TerminalNode* CypherParser::OC_WhereContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_WhereContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::OC_WhereContext::getRuleIndex() const {
  return CypherParser::RuleOC_Where;
}


CypherParser::OC_WhereContext* CypherParser::oC_Where() {
  OC_WhereContext *_localctx = _tracker.createInstance<OC_WhereContext>(_ctx, getState());
  enterRule(_localctx, 136, CypherParser::RuleOC_Where);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1326);
    match(CypherParser::WHERE);
    setState(1327);
    match(CypherParser::SP);
    setState(1328);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternContext ------------------------------------------------------------------

CypherParser::OC_PatternContext::OC_PatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PatternPartContext *> CypherParser::OC_PatternContext::oC_PatternPart() {
  return getRuleContexts<CypherParser::OC_PatternPartContext>();
}

CypherParser::OC_PatternPartContext* CypherParser::OC_PatternContext::oC_PatternPart(size_t i) {
  return getRuleContext<CypherParser::OC_PatternPartContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_Pattern;
}


CypherParser::OC_PatternContext* CypherParser::oC_Pattern() {
  OC_PatternContext *_localctx = _tracker.createInstance<OC_PatternContext>(_ctx, getState());
  enterRule(_localctx, 138, CypherParser::RuleOC_Pattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1330);
    oC_PatternPart();
    setState(1341);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1332);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1331);
          match(CypherParser::SP);
        }
        setState(1334);
        match(CypherParser::T__3);
        setState(1336);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1335);
          match(CypherParser::SP);
        }
        setState(1338);
        oC_PatternPart(); 
      }
      setState(1343);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternPartContext ------------------------------------------------------------------

CypherParser::OC_PatternPartContext::OC_PatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_VariableContext* CypherParser::OC_PatternPartContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_AnonymousPatternPartContext* CypherParser::OC_PatternPartContext::oC_AnonymousPatternPart() {
  return getRuleContext<CypherParser::OC_AnonymousPatternPartContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternPartContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternPartContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternPart;
}


CypherParser::OC_PatternPartContext* CypherParser::oC_PatternPart() {
  OC_PatternPartContext *_localctx = _tracker.createInstance<OC_PatternPartContext>(_ctx, getState());
  enterRule(_localctx, 140, CypherParser::RuleOC_PatternPart);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1355);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(1344);
        oC_Variable();
        setState(1346);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1345);
          match(CypherParser::SP);
        }
        setState(1348);
        match(CypherParser::T__4);
        setState(1350);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1349);
          match(CypherParser::SP);
        }
        setState(1352);
        oC_AnonymousPatternPart();
        break;
      }

      case CypherParser::T__1: {
        enterOuterAlt(_localctx, 2);
        setState(1354);
        oC_AnonymousPatternPart();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AnonymousPatternPartContext ------------------------------------------------------------------

CypherParser::OC_AnonymousPatternPartContext::OC_AnonymousPatternPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PatternElementContext* CypherParser::OC_AnonymousPatternPartContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_AnonymousPatternPartContext::getRuleIndex() const {
  return CypherParser::RuleOC_AnonymousPatternPart;
}


CypherParser::OC_AnonymousPatternPartContext* CypherParser::oC_AnonymousPatternPart() {
  OC_AnonymousPatternPartContext *_localctx = _tracker.createInstance<OC_AnonymousPatternPartContext>(_ctx, getState());
  enterRule(_localctx, 142, CypherParser::RuleOC_AnonymousPatternPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1357);
    oC_PatternElement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementContext ------------------------------------------------------------------

CypherParser::OC_PatternElementContext::OC_PatternElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PatternElementContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PatternElementContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PatternElementContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PatternElementContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_PatternElementContext* CypherParser::OC_PatternElementContext::oC_PatternElement() {
  return getRuleContext<CypherParser::OC_PatternElementContext>(0);
}


size_t CypherParser::OC_PatternElementContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElement;
}


CypherParser::OC_PatternElementContext* CypherParser::oC_PatternElement() {
  OC_PatternElementContext *_localctx = _tracker.createInstance<OC_PatternElementContext>(_ctx, getState());
  enterRule(_localctx, 144, CypherParser::RuleOC_PatternElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1373);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1359);
      oC_NodePattern();
      setState(1366);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1361);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(1360);
            match(CypherParser::SP);
          }
          setState(1363);
          oC_PatternElementChain(); 
        }
        setState(1368);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1369);
      match(CypherParser::T__1);
      setState(1370);
      oC_PatternElement();
      setState(1371);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodePatternContext ------------------------------------------------------------------

CypherParser::OC_NodePatternContext::OC_NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodePatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodePatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_NodePatternContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_NodeLabelsContext* CypherParser::OC_NodePatternContext::oC_NodeLabels() {
  return getRuleContext<CypherParser::OC_NodeLabelsContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_NodePatternContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_NodePatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodePattern;
}


CypherParser::OC_NodePatternContext* CypherParser::oC_NodePattern() {
  OC_NodePatternContext *_localctx = _tracker.createInstance<OC_NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 146, CypherParser::RuleOC_NodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1375);
    match(CypherParser::T__1);
    setState(1377);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1376);
      match(CypherParser::SP);
    }
    setState(1383);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 4456513) != 0) || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & 1180689) != 0)) {
      setState(1379);
      oC_Variable();
      setState(1381);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1380);
        match(CypherParser::SP);
      }
    }
    setState(1389);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__5) {
      setState(1385);
      oC_NodeLabels();
      setState(1387);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1386);
        match(CypherParser::SP);
      }
    }
    setState(1395);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1391);
      kU_Properties();
      setState(1393);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1392);
        match(CypherParser::SP);
      }
    }
    setState(1397);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PatternElementChainContext ------------------------------------------------------------------

CypherParser::OC_PatternElementChainContext::OC_PatternElementChainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_RelationshipPatternContext* CypherParser::OC_PatternElementChainContext::oC_RelationshipPattern() {
  return getRuleContext<CypherParser::OC_RelationshipPatternContext>(0);
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PatternElementChainContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

tree::TerminalNode* CypherParser::OC_PatternElementChainContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PatternElementChainContext::getRuleIndex() const {
  return CypherParser::RuleOC_PatternElementChain;
}


CypherParser::OC_PatternElementChainContext* CypherParser::oC_PatternElementChain() {
  OC_PatternElementChainContext *_localctx = _tracker.createInstance<OC_PatternElementChainContext>(_ctx, getState());
  enterRule(_localctx, 148, CypherParser::RuleOC_PatternElementChain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1399);
    oC_RelationshipPattern();
    setState(1401);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1400);
      match(CypherParser::SP);
    }
    setState(1403);
    oC_NodePattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipPatternContext ------------------------------------------------------------------

CypherParser::OC_RelationshipPatternContext::OC_RelationshipPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LeftArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_LeftArrowHead() {
  return getRuleContext<CypherParser::OC_LeftArrowHeadContext>(0);
}

std::vector<CypherParser::OC_DashContext *> CypherParser::OC_RelationshipPatternContext::oC_Dash() {
  return getRuleContexts<CypherParser::OC_DashContext>();
}

CypherParser::OC_DashContext* CypherParser::OC_RelationshipPatternContext::oC_Dash(size_t i) {
  return getRuleContext<CypherParser::OC_DashContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipPatternContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipPatternContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_RelationshipDetailContext* CypherParser::OC_RelationshipPatternContext::oC_RelationshipDetail() {
  return getRuleContext<CypherParser::OC_RelationshipDetailContext>(0);
}

CypherParser::OC_RightArrowHeadContext* CypherParser::OC_RelationshipPatternContext::oC_RightArrowHead() {
  return getRuleContext<CypherParser::OC_RightArrowHeadContext>(0);
}


size_t CypherParser::OC_RelationshipPatternContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipPattern;
}


CypherParser::OC_RelationshipPatternContext* CypherParser::oC_RelationshipPattern() {
  OC_RelationshipPatternContext *_localctx = _tracker.createInstance<OC_RelationshipPatternContext>(_ctx, getState());
  enterRule(_localctx, 150, CypherParser::RuleOC_RelationshipPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1449);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1405);
      oC_LeftArrowHead();
      setState(1407);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1406);
        match(CypherParser::SP);
      }
      setState(1409);
      oC_Dash();
      setState(1411);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
      case 1: {
        setState(1410);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1414);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1413);
        oC_RelationshipDetail();
      }
      setState(1417);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1416);
        match(CypherParser::SP);
      }
      setState(1419);
      oC_Dash();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1421);
      oC_Dash();
      setState(1423);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
      case 1: {
        setState(1422);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1426);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1425);
        oC_RelationshipDetail();
      }
      setState(1429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1428);
        match(CypherParser::SP);
      }
      setState(1431);
      oC_Dash();
      setState(1433);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1432);
        match(CypherParser::SP);
      }
      setState(1435);
      oC_RightArrowHead();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1437);
      oC_Dash();
      setState(1439);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
      case 1: {
        setState(1438);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1442);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::T__6) {
        setState(1441);
        oC_RelationshipDetail();
      }
      setState(1445);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1444);
        match(CypherParser::SP);
      }
      setState(1447);
      oC_Dash();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipDetailContext ------------------------------------------------------------------

CypherParser::OC_RelationshipDetailContext::OC_RelationshipDetailContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipDetailContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipDetailContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_VariableContext* CypherParser::OC_RelationshipDetailContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}

CypherParser::OC_RelationshipTypesContext* CypherParser::OC_RelationshipDetailContext::oC_RelationshipTypes() {
  return getRuleContext<CypherParser::OC_RelationshipTypesContext>(0);
}

CypherParser::OC_RangeLiteralContext* CypherParser::OC_RelationshipDetailContext::oC_RangeLiteral() {
  return getRuleContext<CypherParser::OC_RangeLiteralContext>(0);
}

CypherParser::KU_PropertiesContext* CypherParser::OC_RelationshipDetailContext::kU_Properties() {
  return getRuleContext<CypherParser::KU_PropertiesContext>(0);
}


size_t CypherParser::OC_RelationshipDetailContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipDetail;
}


CypherParser::OC_RelationshipDetailContext* CypherParser::oC_RelationshipDetail() {
  OC_RelationshipDetailContext *_localctx = _tracker.createInstance<OC_RelationshipDetailContext>(_ctx, getState());
  enterRule(_localctx, 152, CypherParser::RuleOC_RelationshipDetail);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1451);
    match(CypherParser::T__6);
    setState(1453);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1452);
      match(CypherParser::SP);
    }
    setState(1459);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 4456513) != 0) || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & 1180689) != 0)) {
      setState(1455);
      oC_Variable();
      setState(1457);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1456);
        match(CypherParser::SP);
      }
    }
    setState(1465);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__5) {
      setState(1461);
      oC_RelationshipTypes();
      setState(1463);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1462);
        match(CypherParser::SP);
      }
    }
    setState(1471);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::STAR) {
      setState(1467);
      oC_RangeLiteral();
      setState(1469);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1468);
        match(CypherParser::SP);
      }
    }
    setState(1477);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__8) {
      setState(1473);
      kU_Properties();
      setState(1475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1474);
        match(CypherParser::SP);
      }
    }
    setState(1479);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_PropertiesContext ------------------------------------------------------------------

CypherParser::KU_PropertiesContext::KU_PropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_PropertiesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_PropertiesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<CypherParser::OC_PropertyKeyNameContext *> CypherParser::KU_PropertiesContext::oC_PropertyKeyName() {
  return getRuleContexts<CypherParser::OC_PropertyKeyNameContext>();
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::KU_PropertiesContext::oC_PropertyKeyName(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(i);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_PropertiesContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_PropertiesContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_PropertiesContext::getRuleIndex() const {
  return CypherParser::RuleKU_Properties;
}


CypherParser::KU_PropertiesContext* CypherParser::kU_Properties() {
  KU_PropertiesContext *_localctx = _tracker.createInstance<KU_PropertiesContext>(_ctx, getState());
  enterRule(_localctx, 154, CypherParser::RuleKU_Properties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1481);
    match(CypherParser::T__8);
    setState(1483);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1482);
      match(CypherParser::SP);
    }
    setState(1518);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 48) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 48)) & 4456513) != 0) || ((((_la - 123) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 123)) & 1180689) != 0)) {
      setState(1485);
      oC_PropertyKeyName();
      setState(1487);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1486);
        match(CypherParser::SP);
      }
      setState(1489);
      match(CypherParser::T__5);
      setState(1491);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1490);
        match(CypherParser::SP);
      }
      setState(1493);
      oC_Expression();
      setState(1495);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1494);
        match(CypherParser::SP);
      }
      setState(1515);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__3) {
        setState(1497);
        match(CypherParser::T__3);
        setState(1499);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1498);
          match(CypherParser::SP);
        }
        setState(1501);
        oC_PropertyKeyName();
        setState(1503);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1502);
          match(CypherParser::SP);
        }
        setState(1505);
        match(CypherParser::T__5);
        setState(1507);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1506);
          match(CypherParser::SP);
        }
        setState(1509);
        oC_Expression();
        setState(1511);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1510);
          match(CypherParser::SP);
        }
        setState(1517);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1520);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelationshipTypesContext ------------------------------------------------------------------

CypherParser::OC_RelationshipTypesContext::OC_RelationshipTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_RelTypeNameContext *> CypherParser::OC_RelationshipTypesContext::oC_RelTypeName() {
  return getRuleContexts<CypherParser::OC_RelTypeNameContext>();
}

CypherParser::OC_RelTypeNameContext* CypherParser::OC_RelationshipTypesContext::oC_RelTypeName(size_t i) {
  return getRuleContext<CypherParser::OC_RelTypeNameContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RelationshipTypesContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RelationshipTypesContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_RelationshipTypesContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelationshipTypes;
}


CypherParser::OC_RelationshipTypesContext* CypherParser::oC_RelationshipTypes() {
  OC_RelationshipTypesContext *_localctx = _tracker.createInstance<OC_RelationshipTypesContext>(_ctx, getState());
  enterRule(_localctx, 156, CypherParser::RuleOC_RelationshipTypes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1522);
    match(CypherParser::T__5);
    setState(1524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1523);
      match(CypherParser::SP);
    }
    setState(1526);
    oC_RelTypeName();
    setState(1540);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1528);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1527);
          match(CypherParser::SP);
        }
        setState(1530);
        match(CypherParser::T__10);
        setState(1532);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::T__5) {
          setState(1531);
          match(CypherParser::T__5);
        }
        setState(1535);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1534);
          match(CypherParser::SP);
        }
        setState(1537);
        oC_RelTypeName(); 
      }
      setState(1542);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelsContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelsContext::OC_NodeLabelsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NodeLabelContext *> CypherParser::OC_NodeLabelsContext::oC_NodeLabel() {
  return getRuleContexts<CypherParser::OC_NodeLabelContext>();
}

CypherParser::OC_NodeLabelContext* CypherParser::OC_NodeLabelsContext::oC_NodeLabel(size_t i) {
  return getRuleContext<CypherParser::OC_NodeLabelContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NodeLabelsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NodeLabelsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NodeLabelsContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabels;
}


CypherParser::OC_NodeLabelsContext* CypherParser::oC_NodeLabels() {
  OC_NodeLabelsContext *_localctx = _tracker.createInstance<OC_NodeLabelsContext>(_ctx, getState());
  enterRule(_localctx, 158, CypherParser::RuleOC_NodeLabels);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1543);
    oC_NodeLabel();
    setState(1550);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1545);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1544);
          match(CypherParser::SP);
        }
        setState(1547);
        oC_NodeLabel(); 
      }
      setState(1552);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NodeLabelContext ------------------------------------------------------------------

CypherParser::OC_NodeLabelContext::OC_NodeLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LabelNameContext* CypherParser::OC_NodeLabelContext::oC_LabelName() {
  return getRuleContext<CypherParser::OC_LabelNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_NodeLabelContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_NodeLabelContext::getRuleIndex() const {
  return CypherParser::RuleOC_NodeLabel;
}


CypherParser::OC_NodeLabelContext* CypherParser::oC_NodeLabel() {
  OC_NodeLabelContext *_localctx = _tracker.createInstance<OC_NodeLabelContext>(_ctx, getState());
  enterRule(_localctx, 160, CypherParser::RuleOC_NodeLabel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1553);
    match(CypherParser::T__5);
    setState(1555);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1554);
      match(CypherParser::SP);
    }
    setState(1557);
    oC_LabelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RangeLiteralContext ------------------------------------------------------------------

CypherParser::OC_RangeLiteralContext::OC_RangeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_RangeLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::SHORTEST() {
  return getToken(CypherParser::SHORTEST, 0);
}

tree::TerminalNode* CypherParser::OC_RangeLiteralContext::ALL() {
  return getToken(CypherParser::ALL, 0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_RangeLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}

CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::OC_RangeLiteralContext::kU_RecursiveRelationshipComprehension() {
  return getRuleContext<CypherParser::KU_RecursiveRelationshipComprehensionContext>(0);
}

CypherParser::OC_LowerBoundContext* CypherParser::OC_RangeLiteralContext::oC_LowerBound() {
  return getRuleContext<CypherParser::OC_LowerBoundContext>(0);
}

CypherParser::OC_UpperBoundContext* CypherParser::OC_RangeLiteralContext::oC_UpperBound() {
  return getRuleContext<CypherParser::OC_UpperBoundContext>(0);
}


size_t CypherParser::OC_RangeLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_RangeLiteral;
}


CypherParser::OC_RangeLiteralContext* CypherParser::oC_RangeLiteral() {
  OC_RangeLiteralContext *_localctx = _tracker.createInstance<OC_RangeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 162, CypherParser::RuleOC_RangeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1559);
    match(CypherParser::STAR);
    setState(1561);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx)) {
    case 1: {
      setState(1560);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1567);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::SHORTEST: {
        setState(1563);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::ALL: {
        setState(1564);
        match(CypherParser::ALL);
        setState(1565);
        match(CypherParser::SP);
        setState(1566);
        match(CypherParser::SHORTEST);
        break;
      }

      case CypherParser::T__1:
      case CypherParser::T__7:
      case CypherParser::T__8:
      case CypherParser::T__11:
      case CypherParser::DecimalInteger:
      case CypherParser::SP: {
        break;
      }

    default:
      break;
    }
    setState(1570);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
    case 1: {
      setState(1569);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1586);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
    case 1: {
      setState(1573);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1572);
        oC_LowerBound();
      }
      setState(1576);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1575);
        match(CypherParser::SP);
      }
      setState(1578);
      match(CypherParser::T__11);
      setState(1580);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
      case 1: {
        setState(1579);
        match(CypherParser::SP);
        break;
      }

      default:
        break;
      }
      setState(1583);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DecimalInteger) {
        setState(1582);
        oC_UpperBound();
      }
      break;
    }

    case 2: {
      setState(1585);
      oC_IntegerLiteral();
      break;
    }

    default:
      break;
    }
    setState(1592);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
    case 1: {
      setState(1589);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1588);
        match(CypherParser::SP);
      }
      setState(1591);
      kU_RecursiveRelationshipComprehension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_RecursiveRelationshipComprehensionContext ------------------------------------------------------------------

CypherParser::KU_RecursiveRelationshipComprehensionContext::KU_RecursiveRelationshipComprehensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_VariableContext *> CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable() {
  return getRuleContexts<CypherParser::OC_VariableContext>();
}

CypherParser::OC_VariableContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Variable(size_t i) {
  return getRuleContext<CypherParser::OC_VariableContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_RecursiveRelationshipComprehensionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_RecursiveRelationshipComprehensionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}

CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateRelProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateRelProjectionItemsContext>(0);
}

CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::KU_RecursiveRelationshipComprehensionContext::kU_IntermediateNodeProjectionItems() {
  return getRuleContext<CypherParser::KU_IntermediateNodeProjectionItemsContext>(0);
}


size_t CypherParser::KU_RecursiveRelationshipComprehensionContext::getRuleIndex() const {
  return CypherParser::RuleKU_RecursiveRelationshipComprehension;
}


CypherParser::KU_RecursiveRelationshipComprehensionContext* CypherParser::kU_RecursiveRelationshipComprehension() {
  KU_RecursiveRelationshipComprehensionContext *_localctx = _tracker.createInstance<KU_RecursiveRelationshipComprehensionContext>(_ctx, getState());
  enterRule(_localctx, 164, CypherParser::RuleKU_RecursiveRelationshipComprehension);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1594);
    match(CypherParser::T__1);
    setState(1596);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1595);
      match(CypherParser::SP);
    }
    setState(1598);
    oC_Variable();
    setState(1600);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1599);
      match(CypherParser::SP);
    }
    setState(1602);
    match(CypherParser::T__3);
    setState(1604);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1603);
      match(CypherParser::SP);
    }
    setState(1606);
    oC_Variable();
    setState(1615);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 264, _ctx)) {
    case 1: {
      setState(1608);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1607);
        match(CypherParser::SP);
      }
      setState(1610);
      match(CypherParser::T__10);
      setState(1612);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1611);
        match(CypherParser::SP);
      }
      setState(1614);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(1636);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::T__10 || _la == CypherParser::SP) {
      setState(1618);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1617);
        match(CypherParser::SP);
      }
      setState(1620);
      match(CypherParser::T__10);
      setState(1622);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1621);
        match(CypherParser::SP);
      }
      setState(1624);
      kU_IntermediateRelProjectionItems();
      setState(1626);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1625);
        match(CypherParser::SP);
      }
      setState(1628);
      match(CypherParser::T__3);
      setState(1630);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1629);
        match(CypherParser::SP);
      }
      setState(1632);
      kU_IntermediateNodeProjectionItems();
      setState(1634);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1633);
        match(CypherParser::SP);
      }
    }
    setState(1638);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateNodeProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateNodeProjectionItemsContext::KU_IntermediateNodeProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateNodeProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateNodeProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateNodeProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateNodeProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateNodeProjectionItems;
}


CypherParser::KU_IntermediateNodeProjectionItemsContext* CypherParser::kU_IntermediateNodeProjectionItems() {
  KU_IntermediateNodeProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateNodeProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 166, CypherParser::RuleKU_IntermediateNodeProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1640);
    match(CypherParser::T__8);
    setState(1642);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 271, _ctx)) {
    case 1: {
      setState(1641);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1645);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18295873620411012) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 3441101961179430929) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 9741) != 0)) {
      setState(1644);
      oC_ProjectionItems();
    }
    setState(1648);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1647);
      match(CypherParser::SP);
    }
    setState(1650);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_IntermediateRelProjectionItemsContext ------------------------------------------------------------------

CypherParser::KU_IntermediateRelProjectionItemsContext::KU_IntermediateRelProjectionItemsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::KU_IntermediateRelProjectionItemsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_IntermediateRelProjectionItemsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ProjectionItemsContext* CypherParser::KU_IntermediateRelProjectionItemsContext::oC_ProjectionItems() {
  return getRuleContext<CypherParser::OC_ProjectionItemsContext>(0);
}


size_t CypherParser::KU_IntermediateRelProjectionItemsContext::getRuleIndex() const {
  return CypherParser::RuleKU_IntermediateRelProjectionItems;
}


CypherParser::KU_IntermediateRelProjectionItemsContext* CypherParser::kU_IntermediateRelProjectionItems() {
  KU_IntermediateRelProjectionItemsContext *_localctx = _tracker.createInstance<KU_IntermediateRelProjectionItemsContext>(_ctx, getState());
  enterRule(_localctx, 168, CypherParser::RuleKU_IntermediateRelProjectionItems);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1652);
    match(CypherParser::T__8);
    setState(1654);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 274, _ctx)) {
    case 1: {
      setState(1653);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1657);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18295873620411012) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 3441101961179430929) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 9741) != 0)) {
      setState(1656);
      oC_ProjectionItems();
    }
    setState(1660);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1659);
      match(CypherParser::SP);
    }
    setState(1662);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LowerBoundContext ------------------------------------------------------------------

CypherParser::OC_LowerBoundContext::OC_LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_LowerBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_LowerBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_LowerBound;
}


CypherParser::OC_LowerBoundContext* CypherParser::oC_LowerBound() {
  OC_LowerBoundContext *_localctx = _tracker.createInstance<OC_LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 170, CypherParser::RuleOC_LowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1664);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UpperBoundContext ------------------------------------------------------------------

CypherParser::OC_UpperBoundContext::OC_UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_UpperBoundContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_UpperBoundContext::getRuleIndex() const {
  return CypherParser::RuleOC_UpperBound;
}


CypherParser::OC_UpperBoundContext* CypherParser::oC_UpperBound() {
  OC_UpperBoundContext *_localctx = _tracker.createInstance<OC_UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 172, CypherParser::RuleOC_UpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1666);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LabelNameContext ------------------------------------------------------------------

CypherParser::OC_LabelNameContext::OC_LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_LabelNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_LabelNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_LabelName;
}


CypherParser::OC_LabelNameContext* CypherParser::oC_LabelName() {
  OC_LabelNameContext *_localctx = _tracker.createInstance<OC_LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 174, CypherParser::RuleOC_LabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1668);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RelTypeNameContext ------------------------------------------------------------------

CypherParser::OC_RelTypeNameContext::OC_RelTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_RelTypeNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_RelTypeNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_RelTypeName;
}


CypherParser::OC_RelTypeNameContext* CypherParser::oC_RelTypeName() {
  OC_RelTypeNameContext *_localctx = _tracker.createInstance<OC_RelTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 176, CypherParser::RuleOC_RelTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1670);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExpressionContext ------------------------------------------------------------------

CypherParser::OC_ExpressionContext::OC_ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_OrExpressionContext* CypherParser::OC_ExpressionContext::oC_OrExpression() {
  return getRuleContext<CypherParser::OC_OrExpressionContext>(0);
}


size_t CypherParser::OC_ExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_Expression;
}


CypherParser::OC_ExpressionContext* CypherParser::oC_Expression() {
  OC_ExpressionContext *_localctx = _tracker.createInstance<OC_ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 178, CypherParser::RuleOC_Expression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1672);
    oC_OrExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_OrExpressionContext ------------------------------------------------------------------

CypherParser::OC_OrExpressionContext::OC_OrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_XorExpressionContext *> CypherParser::OC_OrExpressionContext::oC_XorExpression() {
  return getRuleContexts<CypherParser::OC_XorExpressionContext>();
}

CypherParser::OC_XorExpressionContext* CypherParser::OC_OrExpressionContext::oC_XorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_XorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_OrExpressionContext::OR() {
  return getTokens(CypherParser::OR);
}

tree::TerminalNode* CypherParser::OC_OrExpressionContext::OR(size_t i) {
  return getToken(CypherParser::OR, i);
}


size_t CypherParser::OC_OrExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_OrExpression;
}


CypherParser::OC_OrExpressionContext* CypherParser::oC_OrExpression() {
  OC_OrExpressionContext *_localctx = _tracker.createInstance<OC_OrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 180, CypherParser::RuleOC_OrExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1674);
    oC_XorExpression();
    setState(1681);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1675);
        match(CypherParser::SP);
        setState(1676);
        match(CypherParser::OR);
        setState(1677);
        match(CypherParser::SP);
        setState(1678);
        oC_XorExpression(); 
      }
      setState(1683);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_XorExpressionContext ------------------------------------------------------------------

CypherParser::OC_XorExpressionContext::OC_XorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AndExpressionContext *> CypherParser::OC_XorExpressionContext::oC_AndExpression() {
  return getRuleContexts<CypherParser::OC_AndExpressionContext>();
}

CypherParser::OC_AndExpressionContext* CypherParser::OC_XorExpressionContext::oC_AndExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_XorExpressionContext::XOR() {
  return getTokens(CypherParser::XOR);
}

tree::TerminalNode* CypherParser::OC_XorExpressionContext::XOR(size_t i) {
  return getToken(CypherParser::XOR, i);
}


size_t CypherParser::OC_XorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_XorExpression;
}


CypherParser::OC_XorExpressionContext* CypherParser::oC_XorExpression() {
  OC_XorExpressionContext *_localctx = _tracker.createInstance<OC_XorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 182, CypherParser::RuleOC_XorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1684);
    oC_AndExpression();
    setState(1691);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1685);
        match(CypherParser::SP);
        setState(1686);
        match(CypherParser::XOR);
        setState(1687);
        match(CypherParser::SP);
        setState(1688);
        oC_AndExpression(); 
      }
      setState(1693);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AndExpressionContext ------------------------------------------------------------------

CypherParser::OC_AndExpressionContext::OC_AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_NotExpressionContext *> CypherParser::OC_AndExpressionContext::oC_NotExpression() {
  return getRuleContexts<CypherParser::OC_NotExpressionContext>();
}

CypherParser::OC_NotExpressionContext* CypherParser::OC_AndExpressionContext::oC_NotExpression(size_t i) {
  return getRuleContext<CypherParser::OC_NotExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AndExpressionContext::AND() {
  return getTokens(CypherParser::AND);
}

tree::TerminalNode* CypherParser::OC_AndExpressionContext::AND(size_t i) {
  return getToken(CypherParser::AND, i);
}


size_t CypherParser::OC_AndExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AndExpression;
}


CypherParser::OC_AndExpressionContext* CypherParser::oC_AndExpression() {
  OC_AndExpressionContext *_localctx = _tracker.createInstance<OC_AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 184, CypherParser::RuleOC_AndExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1694);
    oC_NotExpression();
    setState(1701);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1695);
        match(CypherParser::SP);
        setState(1696);
        match(CypherParser::AND);
        setState(1697);
        match(CypherParser::SP);
        setState(1698);
        oC_NotExpression(); 
      }
      setState(1703);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NotExpressionContext ------------------------------------------------------------------

CypherParser::OC_NotExpressionContext::OC_NotExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ComparisonExpressionContext* CypherParser::OC_NotExpressionContext::oC_ComparisonExpression() {
  return getRuleContext<CypherParser::OC_ComparisonExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::NOT() {
  return getTokens(CypherParser::NOT);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::NOT(size_t i) {
  return getToken(CypherParser::NOT, i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_NotExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NotExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_NotExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NotExpression;
}


CypherParser::OC_NotExpressionContext* CypherParser::oC_NotExpression() {
  OC_NotExpressionContext *_localctx = _tracker.createInstance<OC_NotExpressionContext>(_ctx, getState());
  enterRule(_localctx, 186, CypherParser::RuleOC_NotExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1710);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::NOT) {
      setState(1704);
      match(CypherParser::NOT);
      setState(1706);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1705);
        match(CypherParser::SP);
      }
      setState(1712);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1713);
    oC_ComparisonExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ComparisonExpressionContext ------------------------------------------------------------------

CypherParser::OC_ComparisonExpressionContext::OC_ComparisonExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseOrOperatorExpressionContext *> CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseOrOperatorExpressionContext>();
}

CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::OC_ComparisonExpressionContext::kU_BitwiseOrOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseOrOperatorExpressionContext>(i);
}

std::vector<CypherParser::KU_ComparisonOperatorContext *> CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator() {
  return getRuleContexts<CypherParser::KU_ComparisonOperatorContext>();
}

CypherParser::KU_ComparisonOperatorContext* CypherParser::OC_ComparisonExpressionContext::kU_ComparisonOperator(size_t i) {
  return getRuleContext<CypherParser::KU_ComparisonOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ComparisonExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_ComparisonExpressionContext::INVALID_NOT_EQUAL() {
  return getToken(CypherParser::INVALID_NOT_EQUAL, 0);
}


size_t CypherParser::OC_ComparisonExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ComparisonExpression;
}


CypherParser::OC_ComparisonExpressionContext* CypherParser::oC_ComparisonExpression() {
  OC_ComparisonExpressionContext *_localctx = _tracker.createInstance<OC_ComparisonExpressionContext>(_ctx, getState());
  enterRule(_localctx, 188, CypherParser::RuleOC_ComparisonExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1763);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1715);
      kU_BitwiseOrOperatorExpression();
      setState(1725);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
      case 1: {
        setState(1717);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1716);
          match(CypherParser::SP);
        }
        setState(1719);
        kU_ComparisonOperator();
        setState(1721);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1720);
          match(CypherParser::SP);
        }
        setState(1723);
        kU_BitwiseOrOperatorExpression();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1727);
      kU_BitwiseOrOperatorExpression();

      setState(1729);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1728);
        match(CypherParser::SP);
      }
      setState(1731);
      antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken = match(CypherParser::INVALID_NOT_EQUAL);
      setState(1733);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1732);
        match(CypherParser::SP);
      }
      setState(1735);
      kU_BitwiseOrOperatorExpression();
       notifyInvalidNotEqualOperator(antlrcpp::downCast<OC_ComparisonExpressionContext *>(_localctx)->invalid_not_equalToken); 
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1739);
      kU_BitwiseOrOperatorExpression();
      setState(1741);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1740);
        match(CypherParser::SP);
      }
      setState(1743);
      kU_ComparisonOperator();
      setState(1745);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1744);
        match(CypherParser::SP);
      }
      setState(1747);
      kU_BitwiseOrOperatorExpression();
      setState(1757); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1749);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1748);
                  match(CypherParser::SP);
                }
                setState(1751);
                kU_ComparisonOperator();
                setState(1753);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(1752);
                  match(CypherParser::SP);
                }
                setState(1755);
                kU_BitwiseOrOperatorExpression();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1759); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
       notifyNonBinaryComparison(_localctx->start); 
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ComparisonOperatorContext ------------------------------------------------------------------

CypherParser::KU_ComparisonOperatorContext::KU_ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_ComparisonOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_ComparisonOperator;
}


CypherParser::KU_ComparisonOperatorContext* CypherParser::kU_ComparisonOperator() {
  KU_ComparisonOperatorContext *_localctx = _tracker.createInstance<KU_ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 190, CypherParser::RuleKU_ComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1765);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 253984) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseOrOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseOrOperatorExpressionContext::KU_BitwiseOrOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitwiseAndOperatorExpressionContext *> CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitwiseAndOperatorExpressionContext>();
}

CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::KU_BitwiseOrOperatorExpressionContext::kU_BitwiseAndOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitwiseAndOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseOrOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseOrOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseOrOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseOrOperatorExpression;
}


CypherParser::KU_BitwiseOrOperatorExpressionContext* CypherParser::kU_BitwiseOrOperatorExpression() {
  KU_BitwiseOrOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseOrOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 192, CypherParser::RuleKU_BitwiseOrOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1767);
    kU_BitwiseAndOperatorExpression();
    setState(1778);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1769);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1768);
          match(CypherParser::SP);
        }
        setState(1771);
        match(CypherParser::T__10);
        setState(1773);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1772);
          match(CypherParser::SP);
        }
        setState(1775);
        kU_BitwiseAndOperatorExpression(); 
      }
      setState(1780);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitwiseAndOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitwiseAndOperatorExpressionContext::KU_BitwiseAndOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_BitShiftOperatorExpressionContext *> CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorExpressionContext>();
}

CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::KU_BitwiseAndOperatorExpressionContext::kU_BitShiftOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitwiseAndOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitwiseAndOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitwiseAndOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitwiseAndOperatorExpression;
}


CypherParser::KU_BitwiseAndOperatorExpressionContext* CypherParser::kU_BitwiseAndOperatorExpression() {
  KU_BitwiseAndOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitwiseAndOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 194, CypherParser::RuleKU_BitwiseAndOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1781);
    kU_BitShiftOperatorExpression();
    setState(1792);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1783);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1782);
          match(CypherParser::SP);
        }
        setState(1785);
        match(CypherParser::T__17);
        setState(1787);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1786);
          match(CypherParser::SP);
        }
        setState(1789);
        kU_BitShiftOperatorExpression(); 
      }
      setState(1794);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorExpressionContext::KU_BitShiftOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_AddOrSubtractExpressionContext *> CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression() {
  return getRuleContexts<CypherParser::OC_AddOrSubtractExpressionContext>();
}

CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::KU_BitShiftOperatorExpressionContext::oC_AddOrSubtractExpression(size_t i) {
  return getRuleContext<CypherParser::OC_AddOrSubtractExpressionContext>(i);
}

std::vector<CypherParser::KU_BitShiftOperatorContext *> CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator() {
  return getRuleContexts<CypherParser::KU_BitShiftOperatorContext>();
}

CypherParser::KU_BitShiftOperatorContext* CypherParser::KU_BitShiftOperatorExpressionContext::kU_BitShiftOperator(size_t i) {
  return getRuleContext<CypherParser::KU_BitShiftOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_BitShiftOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_BitShiftOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_BitShiftOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperatorExpression;
}


CypherParser::KU_BitShiftOperatorExpressionContext* CypherParser::kU_BitShiftOperatorExpression() {
  KU_BitShiftOperatorExpressionContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 196, CypherParser::RuleKU_BitShiftOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1795);
    oC_AddOrSubtractExpression();
    setState(1807);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1797);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1796);
          match(CypherParser::SP);
        }
        setState(1799);
        kU_BitShiftOperator();
        setState(1801);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1800);
          match(CypherParser::SP);
        }
        setState(1803);
        oC_AddOrSubtractExpression(); 
      }
      setState(1809);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_BitShiftOperatorContext ------------------------------------------------------------------

CypherParser::KU_BitShiftOperatorContext::KU_BitShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::KU_BitShiftOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_BitShiftOperator;
}


CypherParser::KU_BitShiftOperatorContext* CypherParser::kU_BitShiftOperator() {
  KU_BitShiftOperatorContext *_localctx = _tracker.createInstance<KU_BitShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 198, CypherParser::RuleKU_BitShiftOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1810);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__18

    || _la == CypherParser::T__19)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AddOrSubtractExpressionContext ------------------------------------------------------------------

CypherParser::OC_AddOrSubtractExpressionContext::OC_AddOrSubtractExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_MultiplyDivideModuloExpressionContext *> CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression() {
  return getRuleContexts<CypherParser::OC_MultiplyDivideModuloExpressionContext>();
}

CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::OC_AddOrSubtractExpressionContext::oC_MultiplyDivideModuloExpression(size_t i) {
  return getRuleContext<CypherParser::OC_MultiplyDivideModuloExpressionContext>(i);
}

std::vector<CypherParser::KU_AddOrSubtractOperatorContext *> CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator() {
  return getRuleContexts<CypherParser::KU_AddOrSubtractOperatorContext>();
}

CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::OC_AddOrSubtractExpressionContext::kU_AddOrSubtractOperator(size_t i) {
  return getRuleContext<CypherParser::KU_AddOrSubtractOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_AddOrSubtractExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_AddOrSubtractExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_AddOrSubtractExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_AddOrSubtractExpression;
}


CypherParser::OC_AddOrSubtractExpressionContext* CypherParser::oC_AddOrSubtractExpression() {
  OC_AddOrSubtractExpressionContext *_localctx = _tracker.createInstance<OC_AddOrSubtractExpressionContext>(_ctx, getState());
  enterRule(_localctx, 200, CypherParser::RuleOC_AddOrSubtractExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1812);
    oC_MultiplyDivideModuloExpression();
    setState(1824);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1814);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1813);
          match(CypherParser::SP);
        }
        setState(1816);
        kU_AddOrSubtractOperator();
        setState(1818);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1817);
          match(CypherParser::SP);
        }
        setState(1820);
        oC_MultiplyDivideModuloExpression(); 
      }
      setState(1826);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_AddOrSubtractOperatorContext ------------------------------------------------------------------

CypherParser::KU_AddOrSubtractOperatorContext::KU_AddOrSubtractOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_AddOrSubtractOperatorContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::KU_AddOrSubtractOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_AddOrSubtractOperator;
}


CypherParser::KU_AddOrSubtractOperatorContext* CypherParser::kU_AddOrSubtractOperator() {
  KU_AddOrSubtractOperatorContext *_localctx = _tracker.createInstance<KU_AddOrSubtractOperatorContext>(_ctx, getState());
  enterRule(_localctx, 202, CypherParser::RuleKU_AddOrSubtractOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1827);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__20 || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_MultiplyDivideModuloExpressionContext ------------------------------------------------------------------

CypherParser::OC_MultiplyDivideModuloExpressionContext::OC_MultiplyDivideModuloExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_PowerOfExpressionContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression() {
  return getRuleContexts<CypherParser::OC_PowerOfExpressionContext>();
}

CypherParser::OC_PowerOfExpressionContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::oC_PowerOfExpression(size_t i) {
  return getRuleContext<CypherParser::OC_PowerOfExpressionContext>(i);
}

std::vector<CypherParser::KU_MultiplyDivideModuloOperatorContext *> CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator() {
  return getRuleContexts<CypherParser::KU_MultiplyDivideModuloOperatorContext>();
}

CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::OC_MultiplyDivideModuloExpressionContext::kU_MultiplyDivideModuloOperator(size_t i) {
  return getRuleContext<CypherParser::KU_MultiplyDivideModuloOperatorContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_MultiplyDivideModuloExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_MultiplyDivideModuloExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_MultiplyDivideModuloExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_MultiplyDivideModuloExpression;
}


CypherParser::OC_MultiplyDivideModuloExpressionContext* CypherParser::oC_MultiplyDivideModuloExpression() {
  OC_MultiplyDivideModuloExpressionContext *_localctx = _tracker.createInstance<OC_MultiplyDivideModuloExpressionContext>(_ctx, getState());
  enterRule(_localctx, 204, CypherParser::RuleOC_MultiplyDivideModuloExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1829);
    oC_PowerOfExpression();
    setState(1841);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1831);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1830);
          match(CypherParser::SP);
        }
        setState(1833);
        kU_MultiplyDivideModuloOperator();
        setState(1835);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1834);
          match(CypherParser::SP);
        }
        setState(1837);
        oC_PowerOfExpression(); 
      }
      setState(1843);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_MultiplyDivideModuloOperatorContext ------------------------------------------------------------------

CypherParser::KU_MultiplyDivideModuloOperatorContext::KU_MultiplyDivideModuloOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_MultiplyDivideModuloOperatorContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}


size_t CypherParser::KU_MultiplyDivideModuloOperatorContext::getRuleIndex() const {
  return CypherParser::RuleKU_MultiplyDivideModuloOperator;
}


CypherParser::KU_MultiplyDivideModuloOperatorContext* CypherParser::kU_MultiplyDivideModuloOperator() {
  KU_MultiplyDivideModuloOperatorContext *_localctx = _tracker.createInstance<KU_MultiplyDivideModuloOperatorContext>(_ctx, getState());
  enterRule(_localctx, 206, CypherParser::RuleKU_MultiplyDivideModuloOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1844);
    _la = _input->LA(1);
    if (!(_la == CypherParser::T__21

    || _la == CypherParser::T__22 || _la == CypherParser::STAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PowerOfExpressionContext ------------------------------------------------------------------

CypherParser::OC_PowerOfExpressionContext::OC_PowerOfExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext *> CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression() {
  return getRuleContexts<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>();
}

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::OC_PowerOfExpressionContext::oC_UnaryAddSubtractOrFactorialExpression(size_t i) {
  return getRuleContext<CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PowerOfExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PowerOfExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PowerOfExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PowerOfExpression;
}


CypherParser::OC_PowerOfExpressionContext* CypherParser::oC_PowerOfExpression() {
  OC_PowerOfExpressionContext *_localctx = _tracker.createInstance<OC_PowerOfExpressionContext>(_ctx, getState());
  enterRule(_localctx, 208, CypherParser::RuleOC_PowerOfExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1846);
    oC_UnaryAddSubtractOrFactorialExpression();
    setState(1857);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1848);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1847);
          match(CypherParser::SP);
        }
        setState(1850);
        match(CypherParser::T__23);
        setState(1852);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1851);
          match(CypherParser::SP);
        }
        setState(1854);
        oC_UnaryAddSubtractOrFactorialExpression(); 
      }
      setState(1859);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_UnaryAddSubtractOrFactorialExpressionContext ------------------------------------------------------------------

CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::OC_UnaryAddSubtractOrFactorialExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::oC_StringListNullOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringListNullOperatorExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS() {
  return getTokens(CypherParser::MINUS);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::MINUS(size_t i) {
  return getToken(CypherParser::MINUS, i);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::FACTORIAL() {
  return getToken(CypherParser::FACTORIAL, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression;
}


CypherParser::OC_UnaryAddSubtractOrFactorialExpressionContext* CypherParser::oC_UnaryAddSubtractOrFactorialExpression() {
  OC_UnaryAddSubtractOrFactorialExpressionContext *_localctx = _tracker.createInstance<OC_UnaryAddSubtractOrFactorialExpressionContext>(_ctx, getState());
  enterRule(_localctx, 210, CypherParser::RuleOC_UnaryAddSubtractOrFactorialExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1866);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::MINUS) {
      setState(1860);
      match(CypherParser::MINUS);
      setState(1862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1861);
        match(CypherParser::SP);
      }
      setState(1868);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1869);
    oC_StringListNullOperatorExpression();
    setState(1874);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
    case 1: {
      setState(1871);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1870);
        match(CypherParser::SP);
      }
      setState(1873);
      match(CypherParser::FACTORIAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringListNullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringListNullOperatorExpressionContext::OC_StringListNullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_StringOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_StringOperatorExpression() {
  return getRuleContext<CypherParser::OC_StringOperatorExpressionContext>(0);
}

CypherParser::OC_NullOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_NullOperatorExpression() {
  return getRuleContext<CypherParser::OC_NullOperatorExpressionContext>(0);
}

std::vector<CypherParser::OC_ListOperatorExpressionContext *> CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression() {
  return getRuleContexts<CypherParser::OC_ListOperatorExpressionContext>();
}

CypherParser::OC_ListOperatorExpressionContext* CypherParser::OC_StringListNullOperatorExpressionContext::oC_ListOperatorExpression(size_t i) {
  return getRuleContext<CypherParser::OC_ListOperatorExpressionContext>(i);
}


size_t CypherParser::OC_StringListNullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringListNullOperatorExpression;
}


CypherParser::OC_StringListNullOperatorExpressionContext* CypherParser::oC_StringListNullOperatorExpression() {
  OC_StringListNullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringListNullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 212, CypherParser::RuleOC_StringListNullOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1876);
    oC_PropertyOrLabelsExpression();
    setState(1884);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
    case 1: {
      setState(1877);
      oC_StringOperatorExpression();
      break;
    }

    case 2: {
      setState(1879); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1878);
        oC_ListOperatorExpression();
        setState(1881); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == CypherParser::T__6);
      break;
    }

    case 3: {
      setState(1883);
      oC_NullOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_ListOperatorExpressionContext::OC_ListOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::KU_ListExtractOperatorExpressionContext* CypherParser::OC_ListOperatorExpressionContext::kU_ListExtractOperatorExpression() {
  return getRuleContext<CypherParser::KU_ListExtractOperatorExpressionContext>(0);
}

CypherParser::KU_ListSliceOperatorExpressionContext* CypherParser::OC_ListOperatorExpressionContext::kU_ListSliceOperatorExpression() {
  return getRuleContext<CypherParser::KU_ListSliceOperatorExpressionContext>(0);
}


size_t CypherParser::OC_ListOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListOperatorExpression;
}


CypherParser::OC_ListOperatorExpressionContext* CypherParser::oC_ListOperatorExpression() {
  OC_ListOperatorExpressionContext *_localctx = _tracker.createInstance<OC_ListOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 214, CypherParser::RuleOC_ListOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1888);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1886);
      kU_ListExtractOperatorExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1887);
      kU_ListSliceOperatorExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListExtractOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_ListExtractOperatorExpressionContext::KU_ListExtractOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListExtractOperatorExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListExtractOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListExtractOperatorExpression;
}


CypherParser::KU_ListExtractOperatorExpressionContext* CypherParser::kU_ListExtractOperatorExpression() {
  KU_ListExtractOperatorExpressionContext *_localctx = _tracker.createInstance<KU_ListExtractOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 216, CypherParser::RuleKU_ListExtractOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1890);
    match(CypherParser::T__6);
    setState(1891);
    oC_Expression();
    setState(1892);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListSliceOperatorExpressionContext ------------------------------------------------------------------

CypherParser::KU_ListSliceOperatorExpressionContext::KU_ListSliceOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::KU_ListSliceOperatorExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListSliceOperatorExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}


size_t CypherParser::KU_ListSliceOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListSliceOperatorExpression;
}


CypherParser::KU_ListSliceOperatorExpressionContext* CypherParser::kU_ListSliceOperatorExpression() {
  KU_ListSliceOperatorExpressionContext *_localctx = _tracker.createInstance<KU_ListSliceOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 218, CypherParser::RuleKU_ListSliceOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1894);
    match(CypherParser::T__6);
    setState(1896);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18295873620411012) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 3441101959031947281) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 9741) != 0)) {
      setState(1895);
      oC_Expression();
    }
    setState(1898);
    match(CypherParser::T__5);
    setState(1900);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18295873620411012) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 3441101959031947281) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 9741) != 0)) {
      setState(1899);
      oC_Expression();
    }
    setState(1902);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_StringOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_StringOperatorExpressionContext::OC_StringOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_PropertyOrLabelsExpression() {
  return getRuleContext<CypherParser::OC_PropertyOrLabelsExpressionContext>(0);
}

CypherParser::OC_RegularExpressionContext* CypherParser::OC_StringOperatorExpressionContext::oC_RegularExpression() {
  return getRuleContext<CypherParser::OC_RegularExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_StringOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::STARTS() {
  return getToken(CypherParser::STARTS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::WITH() {
  return getToken(CypherParser::WITH, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::ENDS() {
  return getToken(CypherParser::ENDS, 0);
}

tree::TerminalNode* CypherParser::OC_StringOperatorExpressionContext::CONTAINS() {
  return getToken(CypherParser::CONTAINS, 0);
}


size_t CypherParser::OC_StringOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_StringOperatorExpression;
}


CypherParser::OC_StringOperatorExpressionContext* CypherParser::oC_StringOperatorExpression() {
  OC_StringOperatorExpressionContext *_localctx = _tracker.createInstance<OC_StringOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 220, CypherParser::RuleOC_StringOperatorExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1915);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx)) {
    case 1: {
      setState(1904);
      oC_RegularExpression();
      break;
    }

    case 2: {
      setState(1905);
      match(CypherParser::SP);
      setState(1906);
      match(CypherParser::STARTS);
      setState(1907);
      match(CypherParser::SP);
      setState(1908);
      match(CypherParser::WITH);
      break;
    }

    case 3: {
      setState(1909);
      match(CypherParser::SP);
      setState(1910);
      match(CypherParser::ENDS);
      setState(1911);
      match(CypherParser::SP);
      setState(1912);
      match(CypherParser::WITH);
      break;
    }

    case 4: {
      setState(1913);
      match(CypherParser::SP);
      setState(1914);
      match(CypherParser::CONTAINS);
      break;
    }

    default:
      break;
    }
    setState(1918);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1917);
      match(CypherParser::SP);
    }
    setState(1920);
    oC_PropertyOrLabelsExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RegularExpressionContext ------------------------------------------------------------------

CypherParser::OC_RegularExpressionContext::OC_RegularExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_RegularExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_RegularExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_RegularExpression;
}


CypherParser::OC_RegularExpressionContext* CypherParser::oC_RegularExpression() {
  OC_RegularExpressionContext *_localctx = _tracker.createInstance<OC_RegularExpressionContext>(_ctx, getState());
  enterRule(_localctx, 222, CypherParser::RuleOC_RegularExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1923);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1922);
      match(CypherParser::SP);
    }
    setState(1925);
    match(CypherParser::T__24);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NullOperatorExpressionContext ------------------------------------------------------------------

CypherParser::OC_NullOperatorExpressionContext::OC_NullOperatorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_NullOperatorExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::IS() {
  return getToken(CypherParser::IS, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

tree::TerminalNode* CypherParser::OC_NullOperatorExpressionContext::NOT() {
  return getToken(CypherParser::NOT, 0);
}


size_t CypherParser::OC_NullOperatorExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_NullOperatorExpression;
}


CypherParser::OC_NullOperatorExpressionContext* CypherParser::oC_NullOperatorExpression() {
  OC_NullOperatorExpressionContext *_localctx = _tracker.createInstance<OC_NullOperatorExpressionContext>(_ctx, getState());
  enterRule(_localctx, 224, CypherParser::RuleOC_NullOperatorExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1937);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1927);
      match(CypherParser::SP);
      setState(1928);
      match(CypherParser::IS);
      setState(1929);
      match(CypherParser::SP);
      setState(1930);
      match(CypherParser::NULL_);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1931);
      match(CypherParser::SP);
      setState(1932);
      match(CypherParser::IS);
      setState(1933);
      match(CypherParser::SP);
      setState(1934);
      match(CypherParser::NOT);
      setState(1935);
      match(CypherParser::SP);
      setState(1936);
      match(CypherParser::NULL_);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyOrLabelsExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyOrLabelsExpressionContext::OC_PropertyOrLabelsExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

std::vector<CypherParser::OC_PropertyLookupContext *> CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup() {
  return getRuleContexts<CypherParser::OC_PropertyLookupContext>();
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyOrLabelsExpressionContext::oC_PropertyLookup(size_t i) {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PropertyOrLabelsExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PropertyOrLabelsExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PropertyOrLabelsExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyOrLabelsExpression;
}


CypherParser::OC_PropertyOrLabelsExpressionContext* CypherParser::oC_PropertyOrLabelsExpression() {
  OC_PropertyOrLabelsExpressionContext *_localctx = _tracker.createInstance<OC_PropertyOrLabelsExpressionContext>(_ctx, getState());
  enterRule(_localctx, 226, CypherParser::RuleOC_PropertyOrLabelsExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1939);
    oC_Atom();
    setState(1946);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1941);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1940);
          match(CypherParser::SP);
        }
        setState(1943);
        oC_PropertyLookup(); 
      }
      setState(1948);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_AtomContext ------------------------------------------------------------------

CypherParser::OC_AtomContext::OC_AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_LiteralContext* CypherParser::OC_AtomContext::oC_Literal() {
  return getRuleContext<CypherParser::OC_LiteralContext>(0);
}

CypherParser::OC_ParameterContext* CypherParser::OC_AtomContext::oC_Parameter() {
  return getRuleContext<CypherParser::OC_ParameterContext>(0);
}

CypherParser::OC_CaseExpressionContext* CypherParser::OC_AtomContext::oC_CaseExpression() {
  return getRuleContext<CypherParser::OC_CaseExpressionContext>(0);
}

CypherParser::OC_ParenthesizedExpressionContext* CypherParser::OC_AtomContext::oC_ParenthesizedExpression() {
  return getRuleContext<CypherParser::OC_ParenthesizedExpressionContext>(0);
}

CypherParser::OC_FunctionInvocationContext* CypherParser::OC_AtomContext::oC_FunctionInvocation() {
  return getRuleContext<CypherParser::OC_FunctionInvocationContext>(0);
}

CypherParser::OC_PathPatternsContext* CypherParser::OC_AtomContext::oC_PathPatterns() {
  return getRuleContext<CypherParser::OC_PathPatternsContext>(0);
}

CypherParser::OC_ExistSubqueryContext* CypherParser::OC_AtomContext::oC_ExistSubquery() {
  return getRuleContext<CypherParser::OC_ExistSubqueryContext>(0);
}

CypherParser::KU_CountSubqueryContext* CypherParser::OC_AtomContext::kU_CountSubquery() {
  return getRuleContext<CypherParser::KU_CountSubqueryContext>(0);
}

CypherParser::OC_VariableContext* CypherParser::OC_AtomContext::oC_Variable() {
  return getRuleContext<CypherParser::OC_VariableContext>(0);
}


size_t CypherParser::OC_AtomContext::getRuleIndex() const {
  return CypherParser::RuleOC_Atom;
}


CypherParser::OC_AtomContext* CypherParser::oC_Atom() {
  OC_AtomContext *_localctx = _tracker.createInstance<OC_AtomContext>(_ctx, getState());
  enterRule(_localctx, 228, CypherParser::RuleOC_Atom);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1958);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1949);
      oC_Literal();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1950);
      oC_Parameter();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1951);
      oC_CaseExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1952);
      oC_ParenthesizedExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1953);
      oC_FunctionInvocation();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1954);
      oC_PathPatterns();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1955);
      oC_ExistSubquery();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1956);
      kU_CountSubquery();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1957);
      oC_Variable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LiteralContext ------------------------------------------------------------------

CypherParser::OC_LiteralContext::OC_LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NumberLiteralContext* CypherParser::OC_LiteralContext::oC_NumberLiteral() {
  return getRuleContext<CypherParser::OC_NumberLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

CypherParser::OC_BooleanLiteralContext* CypherParser::OC_LiteralContext::oC_BooleanLiteral() {
  return getRuleContext<CypherParser::OC_BooleanLiteralContext>(0);
}

tree::TerminalNode* CypherParser::OC_LiteralContext::NULL_() {
  return getToken(CypherParser::NULL_, 0);
}

CypherParser::OC_ListLiteralContext* CypherParser::OC_LiteralContext::oC_ListLiteral() {
  return getRuleContext<CypherParser::OC_ListLiteralContext>(0);
}

CypherParser::KU_StructLiteralContext* CypherParser::OC_LiteralContext::kU_StructLiteral() {
  return getRuleContext<CypherParser::KU_StructLiteralContext>(0);
}


size_t CypherParser::OC_LiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_Literal;
}


CypherParser::OC_LiteralContext* CypherParser::oC_Literal() {
  OC_LiteralContext *_localctx = _tracker.createInstance<OC_LiteralContext>(_ctx, getState());
  enterRule(_localctx, 230, CypherParser::RuleOC_Literal);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1966);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::DecimalInteger:
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(1960);
        oC_NumberLiteral();
        break;
      }

      case CypherParser::StringLiteral: {
        enterOuterAlt(_localctx, 2);
        setState(1961);
        match(CypherParser::StringLiteral);
        break;
      }

      case CypherParser::TRUE:
      case CypherParser::FALSE: {
        enterOuterAlt(_localctx, 3);
        setState(1962);
        oC_BooleanLiteral();
        break;
      }

      case CypherParser::NULL_: {
        enterOuterAlt(_localctx, 4);
        setState(1963);
        match(CypherParser::NULL_);
        break;
      }

      case CypherParser::T__6: {
        enterOuterAlt(_localctx, 5);
        setState(1964);
        oC_ListLiteral();
        break;
      }

      case CypherParser::T__8: {
        enterOuterAlt(_localctx, 6);
        setState(1965);
        kU_StructLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_BooleanLiteralContext ------------------------------------------------------------------

CypherParser::OC_BooleanLiteralContext::OC_BooleanLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::TRUE() {
  return getToken(CypherParser::TRUE, 0);
}

tree::TerminalNode* CypherParser::OC_BooleanLiteralContext::FALSE() {
  return getToken(CypherParser::FALSE, 0);
}


size_t CypherParser::OC_BooleanLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_BooleanLiteral;
}


CypherParser::OC_BooleanLiteralContext* CypherParser::oC_BooleanLiteral() {
  OC_BooleanLiteralContext *_localctx = _tracker.createInstance<OC_BooleanLiteralContext>(_ctx, getState());
  enterRule(_localctx, 232, CypherParser::RuleOC_BooleanLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1968);
    _la = _input->LA(1);
    if (!(_la == CypherParser::TRUE

    || _la == CypherParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ListLiteralContext ------------------------------------------------------------------

CypherParser::OC_ListLiteralContext::OC_ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> CypherParser::OC_ListLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ListLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ListLiteralContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<CypherParser::KU_ListEntryContext *> CypherParser::OC_ListLiteralContext::kU_ListEntry() {
  return getRuleContexts<CypherParser::KU_ListEntryContext>();
}

CypherParser::KU_ListEntryContext* CypherParser::OC_ListLiteralContext::kU_ListEntry(size_t i) {
  return getRuleContext<CypherParser::KU_ListEntryContext>(i);
}


size_t CypherParser::OC_ListLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_ListLiteral;
}


CypherParser::OC_ListLiteralContext* CypherParser::oC_ListLiteral() {
  OC_ListLiteralContext *_localctx = _tracker.createInstance<OC_ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 234, CypherParser::RuleOC_ListLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1970);
    match(CypherParser::T__6);
    setState(1972);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1971);
      match(CypherParser::SP);
    }
    setState(1987);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18295873620411012) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 3441101959031947281) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 9741) != 0)) {
      setState(1974);
      oC_Expression();
      setState(1976);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(1975);
        match(CypherParser::SP);
      }
      setState(1984);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == CypherParser::T__3) {
        setState(1978);
        kU_ListEntry();
        setState(1980);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(1979);
          match(CypherParser::SP);
        }
        setState(1986);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(1989);
    match(CypherParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_ListEntryContext ------------------------------------------------------------------

CypherParser::KU_ListEntryContext::KU_ListEntryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_ListEntryContext::SP() {
  return getToken(CypherParser::SP, 0);
}

CypherParser::OC_ExpressionContext* CypherParser::KU_ListEntryContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}


size_t CypherParser::KU_ListEntryContext::getRuleIndex() const {
  return CypherParser::RuleKU_ListEntry;
}


CypherParser::KU_ListEntryContext* CypherParser::kU_ListEntry() {
  KU_ListEntryContext *_localctx = _tracker.createInstance<KU_ListEntryContext>(_ctx, getState());
  enterRule(_localctx, 236, CypherParser::RuleKU_ListEntry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1991);
    match(CypherParser::T__3);
    setState(1993);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      setState(1992);
      match(CypherParser::SP);
      break;
    }

    default:
      break;
    }
    setState(1996);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 18295873620411012) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 3441101959031947281) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 130)) & 9741) != 0)) {
      setState(1995);
      oC_Expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructLiteralContext ------------------------------------------------------------------

CypherParser::KU_StructLiteralContext::KU_StructLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<CypherParser::KU_StructFieldContext *> CypherParser::KU_StructLiteralContext::kU_StructField() {
  return getRuleContexts<CypherParser::KU_StructFieldContext>();
}

CypherParser::KU_StructFieldContext* CypherParser::KU_StructLiteralContext::kU_StructField(size_t i) {
  return getRuleContext<CypherParser::KU_StructFieldContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructLiteralContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructLiteralContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructLiteralContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructLiteral;
}


CypherParser::KU_StructLiteralContext* CypherParser::kU_StructLiteral() {
  KU_StructLiteralContext *_localctx = _tracker.createInstance<KU_StructLiteralContext>(_ctx, getState());
  enterRule(_localctx, 238, CypherParser::RuleKU_StructLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1998);
    match(CypherParser::T__8);
    setState(2000);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(1999);
      match(CypherParser::SP);
    }
    setState(2002);
    kU_StructField();
    setState(2004);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2003);
      match(CypherParser::SP);
    }
    setState(2016);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == CypherParser::T__3) {
      setState(2006);
      match(CypherParser::T__3);
      setState(2008);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2007);
        match(CypherParser::SP);
      }
      setState(2010);
      kU_StructField();
      setState(2012);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2011);
        match(CypherParser::SP);
      }
      setState(2018);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2019);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_StructFieldContext ------------------------------------------------------------------

CypherParser::KU_StructFieldContext::KU_StructFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_StructFieldContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_StructFieldContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::StringLiteral() {
  return getToken(CypherParser::StringLiteral, 0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_StructFieldContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_StructFieldContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_StructFieldContext::getRuleIndex() const {
  return CypherParser::RuleKU_StructField;
}


CypherParser::KU_StructFieldContext* CypherParser::kU_StructField() {
  KU_StructFieldContext *_localctx = _tracker.createInstance<KU_StructFieldContext>(_ctx, getState());
  enterRule(_localctx, 240, CypherParser::RuleKU_StructField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2023);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2021);
        oC_SymbolicName();
        break;
      }

      case CypherParser::StringLiteral: {
        setState(2022);
        match(CypherParser::StringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2026);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2025);
      match(CypherParser::SP);
    }
    setState(2028);
    match(CypherParser::T__5);
    setState(2030);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2029);
      match(CypherParser::SP);
    }
    setState(2032);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParenthesizedExpressionContext ------------------------------------------------------------------

CypherParser::OC_ParenthesizedExpressionContext::OC_ParenthesizedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::OC_ParenthesizedExpressionContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ParenthesizedExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ParenthesizedExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_ParenthesizedExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_ParenthesizedExpression;
}


CypherParser::OC_ParenthesizedExpressionContext* CypherParser::oC_ParenthesizedExpression() {
  OC_ParenthesizedExpressionContext *_localctx = _tracker.createInstance<OC_ParenthesizedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 242, CypherParser::RuleOC_ParenthesizedExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2034);
    match(CypherParser::T__1);
    setState(2036);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2035);
      match(CypherParser::SP);
    }
    setState(2038);
    oC_Expression();
    setState(2040);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2039);
      match(CypherParser::SP);
    }
    setState(2042);
    match(CypherParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionInvocationContext ------------------------------------------------------------------

CypherParser::OC_FunctionInvocationContext::OC_FunctionInvocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_FunctionInvocationContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_FunctionNameContext* CypherParser::OC_FunctionInvocationContext::oC_FunctionName() {
  return getRuleContext<CypherParser::OC_FunctionNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_FunctionInvocationContext::DISTINCT() {
  return getToken(CypherParser::DISTINCT, 0);
}

std::vector<CypherParser::KU_FunctionParameterContext *> CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter() {
  return getRuleContexts<CypherParser::KU_FunctionParameterContext>();
}

CypherParser::KU_FunctionParameterContext* CypherParser::OC_FunctionInvocationContext::kU_FunctionParameter(size_t i) {
  return getRuleContext<CypherParser::KU_FunctionParameterContext>(i);
}


size_t CypherParser::OC_FunctionInvocationContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionInvocation;
}


CypherParser::OC_FunctionInvocationContext* CypherParser::oC_FunctionInvocation() {
  OC_FunctionInvocationContext *_localctx = _tracker.createInstance<OC_FunctionInvocationContext>(_ctx, getState());
  enterRule(_localctx, 244, CypherParser::RuleOC_FunctionInvocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2092);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2044);
      match(CypherParser::COUNT);
      setState(2046);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2045);
        match(CypherParser::SP);
      }
      setState(2048);
      match(CypherParser::T__1);
      setState(2050);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2049);
        match(CypherParser::SP);
      }
      setState(2052);
      match(CypherParser::STAR);
      setState(2054);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2053);
        match(CypherParser::SP);
      }
      setState(2056);
      match(CypherParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2057);
      oC_FunctionName();
      setState(2059);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2058);
        match(CypherParser::SP);
      }
      setState(2061);
      match(CypherParser::T__1);
      setState(2063);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2062);
        match(CypherParser::SP);
      }
      setState(2069);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::DISTINCT) {
        setState(2065);
        match(CypherParser::DISTINCT);
        setState(2067);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2066);
          match(CypherParser::SP);
        }
      }
      setState(2088);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 18295873620411012) != 0) || ((((_la - 66) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 66)) & 3441101959031947281) != 0) || ((((_la - 130) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 130)) & 9741) != 0)) {
        setState(2071);
        kU_FunctionParameter();
        setState(2073);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == CypherParser::SP) {
          setState(2072);
          match(CypherParser::SP);
        }
        setState(2085);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == CypherParser::T__3) {
          setState(2075);
          match(CypherParser::T__3);
          setState(2077);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2076);
            match(CypherParser::SP);
          }
          setState(2079);
          kU_FunctionParameter();
          setState(2081);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == CypherParser::SP) {
            setState(2080);
            match(CypherParser::SP);
          }
          setState(2087);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2090);
      match(CypherParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_FunctionNameContext ------------------------------------------------------------------

CypherParser::OC_FunctionNameContext::OC_FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_FunctionNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_FunctionNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_FunctionName;
}


CypherParser::OC_FunctionNameContext* CypherParser::oC_FunctionName() {
  OC_FunctionNameContext *_localctx = _tracker.createInstance<OC_FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 246, CypherParser::RuleOC_FunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2094);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_FunctionParameterContext ------------------------------------------------------------------

CypherParser::KU_FunctionParameterContext::KU_FunctionParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_ExpressionContext* CypherParser::KU_FunctionParameterContext::oC_Expression() {
  return getRuleContext<CypherParser::OC_ExpressionContext>(0);
}

CypherParser::OC_SymbolicNameContext* CypherParser::KU_FunctionParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_FunctionParameterContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_FunctionParameterContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::KU_FunctionParameterContext::getRuleIndex() const {
  return CypherParser::RuleKU_FunctionParameter;
}


CypherParser::KU_FunctionParameterContext* CypherParser::kU_FunctionParameter() {
  KU_FunctionParameterContext *_localctx = _tracker.createInstance<KU_FunctionParameterContext>(_ctx, getState());
  enterRule(_localctx, 248, CypherParser::RuleKU_FunctionParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2105);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
    case 1: {
      setState(2096);
      oC_SymbolicName();
      setState(2098);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2097);
        match(CypherParser::SP);
      }
      setState(2100);
      match(CypherParser::T__5);
      setState(2101);
      match(CypherParser::T__4);
      setState(2103);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2102);
        match(CypherParser::SP);
      }
      break;
    }

    default:
      break;
    }
    setState(2107);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PathPatternsContext ------------------------------------------------------------------

CypherParser::OC_PathPatternsContext::OC_PathPatternsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_NodePatternContext* CypherParser::OC_PathPatternsContext::oC_NodePattern() {
  return getRuleContext<CypherParser::OC_NodePatternContext>(0);
}

std::vector<CypherParser::OC_PatternElementChainContext *> CypherParser::OC_PathPatternsContext::oC_PatternElementChain() {
  return getRuleContexts<CypherParser::OC_PatternElementChainContext>();
}

CypherParser::OC_PatternElementChainContext* CypherParser::OC_PathPatternsContext::oC_PatternElementChain(size_t i) {
  return getRuleContext<CypherParser::OC_PatternElementChainContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_PathPatternsContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_PathPatternsContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_PathPatternsContext::getRuleIndex() const {
  return CypherParser::RuleOC_PathPatterns;
}


CypherParser::OC_PathPatternsContext* CypherParser::oC_PathPatterns() {
  OC_PathPatternsContext *_localctx = _tracker.createInstance<OC_PathPatternsContext>(_ctx, getState());
  enterRule(_localctx, 250, CypherParser::RuleOC_PathPatterns);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2109);
    oC_NodePattern();
    setState(2114); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2111);
              _errHandler->sync(this);

              _la = _input->LA(1);
              if (_la == CypherParser::SP) {
                setState(2110);
                match(CypherParser::SP);
              }
              setState(2113);
              oC_PatternElementChain();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2116); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ExistSubqueryContext ------------------------------------------------------------------

CypherParser::OC_ExistSubqueryContext::OC_ExistSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::EXISTS() {
  return getToken(CypherParser::EXISTS, 0);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::OC_ExistSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_ExistSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_ExistSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::OC_ExistSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::OC_ExistSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleOC_ExistSubquery;
}


CypherParser::OC_ExistSubqueryContext* CypherParser::oC_ExistSubquery() {
  OC_ExistSubqueryContext *_localctx = _tracker.createInstance<OC_ExistSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 252, CypherParser::RuleOC_ExistSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2118);
    match(CypherParser::EXISTS);
    setState(2120);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2119);
      match(CypherParser::SP);
    }
    setState(2122);
    match(CypherParser::T__8);
    setState(2124);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2123);
      match(CypherParser::SP);
    }
    setState(2126);
    match(CypherParser::MATCH);
    setState(2128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2127);
      match(CypherParser::SP);
    }
    setState(2130);
    oC_Pattern();
    setState(2135);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx)) {
    case 1: {
      setState(2132);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2131);
        match(CypherParser::SP);
      }
      setState(2134);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2138);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2137);
      match(CypherParser::SP);
    }
    setState(2140);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_CountSubqueryContext ------------------------------------------------------------------

CypherParser::KU_CountSubqueryContext::KU_CountSubqueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::MATCH() {
  return getToken(CypherParser::MATCH, 0);
}

CypherParser::OC_PatternContext* CypherParser::KU_CountSubqueryContext::oC_Pattern() {
  return getRuleContext<CypherParser::OC_PatternContext>(0);
}

std::vector<tree::TerminalNode *> CypherParser::KU_CountSubqueryContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::KU_CountSubqueryContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

CypherParser::OC_WhereContext* CypherParser::KU_CountSubqueryContext::oC_Where() {
  return getRuleContext<CypherParser::OC_WhereContext>(0);
}


size_t CypherParser::KU_CountSubqueryContext::getRuleIndex() const {
  return CypherParser::RuleKU_CountSubquery;
}


CypherParser::KU_CountSubqueryContext* CypherParser::kU_CountSubquery() {
  KU_CountSubqueryContext *_localctx = _tracker.createInstance<KU_CountSubqueryContext>(_ctx, getState());
  enterRule(_localctx, 254, CypherParser::RuleKU_CountSubquery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2142);
    match(CypherParser::COUNT);
    setState(2144);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2143);
      match(CypherParser::SP);
    }
    setState(2146);
    match(CypherParser::T__8);
    setState(2148);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2147);
      match(CypherParser::SP);
    }
    setState(2150);
    match(CypherParser::MATCH);
    setState(2152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2151);
      match(CypherParser::SP);
    }
    setState(2154);
    oC_Pattern();
    setState(2159);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 373, _ctx)) {
    case 1: {
      setState(2156);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2155);
        match(CypherParser::SP);
      }
      setState(2158);
      oC_Where();
      break;
    }

    default:
      break;
    }
    setState(2162);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2161);
      match(CypherParser::SP);
    }
    setState(2164);
    match(CypherParser::T__9);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyLookupContext ------------------------------------------------------------------

CypherParser::OC_PropertyLookupContext::OC_PropertyLookupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_PropertyKeyNameContext* CypherParser::OC_PropertyLookupContext::oC_PropertyKeyName() {
  return getRuleContext<CypherParser::OC_PropertyKeyNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::STAR() {
  return getToken(CypherParser::STAR, 0);
}

tree::TerminalNode* CypherParser::OC_PropertyLookupContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyLookupContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyLookup;
}


CypherParser::OC_PropertyLookupContext* CypherParser::oC_PropertyLookup() {
  OC_PropertyLookupContext *_localctx = _tracker.createInstance<OC_PropertyLookupContext>(_ctx, getState());
  enterRule(_localctx, 256, CypherParser::RuleOC_PropertyLookup);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2166);
    match(CypherParser::T__25);
    setState(2168);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2167);
      match(CypherParser::SP);
    }
    setState(2172);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2170);
        oC_PropertyKeyName();
        break;
      }

      case CypherParser::STAR: {
        setState(2171);
        match(CypherParser::STAR);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseExpressionContext ------------------------------------------------------------------

CypherParser::OC_CaseExpressionContext::OC_CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::END() {
  return getToken(CypherParser::END, 0);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::ELSE() {
  return getToken(CypherParser::ELSE, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseExpressionContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseExpressionContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseExpressionContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}

tree::TerminalNode* CypherParser::OC_CaseExpressionContext::CASE() {
  return getToken(CypherParser::CASE, 0);
}

std::vector<CypherParser::OC_CaseAlternativeContext *> CypherParser::OC_CaseExpressionContext::oC_CaseAlternative() {
  return getRuleContexts<CypherParser::OC_CaseAlternativeContext>();
}

CypherParser::OC_CaseAlternativeContext* CypherParser::OC_CaseExpressionContext::oC_CaseAlternative(size_t i) {
  return getRuleContext<CypherParser::OC_CaseAlternativeContext>(i);
}


size_t CypherParser::OC_CaseExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseExpression;
}


CypherParser::OC_CaseExpressionContext* CypherParser::oC_CaseExpression() {
  OC_CaseExpressionContext *_localctx = _tracker.createInstance<OC_CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 258, CypherParser::RuleOC_CaseExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2196);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx)) {
    case 1: {
      setState(2174);
      match(CypherParser::CASE);
      setState(2179); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2176);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2175);
                  match(CypherParser::SP);
                }
                setState(2178);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2181); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      setState(2183);
      match(CypherParser::CASE);
      setState(2185);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2184);
        match(CypherParser::SP);
      }
      setState(2187);
      oC_Expression();
      setState(2192); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2189);
                _errHandler->sync(this);

                _la = _input->LA(1);
                if (_la == CypherParser::SP) {
                  setState(2188);
                  match(CypherParser::SP);
                }
                setState(2191);
                oC_CaseAlternative();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2194); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 381, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
    setState(2206);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx)) {
    case 1: {
      setState(2199);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2198);
        match(CypherParser::SP);
      }
      setState(2201);
      match(CypherParser::ELSE);
      setState(2203);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == CypherParser::SP) {
        setState(2202);
        match(CypherParser::SP);
      }
      setState(2205);
      oC_Expression();
      break;
    }

    default:
      break;
    }
    setState(2209);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2208);
      match(CypherParser::SP);
    }
    setState(2211);
    match(CypherParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_CaseAlternativeContext ------------------------------------------------------------------

CypherParser::OC_CaseAlternativeContext::OC_CaseAlternativeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::WHEN() {
  return getToken(CypherParser::WHEN, 0);
}

std::vector<CypherParser::OC_ExpressionContext *> CypherParser::OC_CaseAlternativeContext::oC_Expression() {
  return getRuleContexts<CypherParser::OC_ExpressionContext>();
}

CypherParser::OC_ExpressionContext* CypherParser::OC_CaseAlternativeContext::oC_Expression(size_t i) {
  return getRuleContext<CypherParser::OC_ExpressionContext>(i);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::THEN() {
  return getToken(CypherParser::THEN, 0);
}

std::vector<tree::TerminalNode *> CypherParser::OC_CaseAlternativeContext::SP() {
  return getTokens(CypherParser::SP);
}

tree::TerminalNode* CypherParser::OC_CaseAlternativeContext::SP(size_t i) {
  return getToken(CypherParser::SP, i);
}


size_t CypherParser::OC_CaseAlternativeContext::getRuleIndex() const {
  return CypherParser::RuleOC_CaseAlternative;
}


CypherParser::OC_CaseAlternativeContext* CypherParser::oC_CaseAlternative() {
  OC_CaseAlternativeContext *_localctx = _tracker.createInstance<OC_CaseAlternativeContext>(_ctx, getState());
  enterRule(_localctx, 260, CypherParser::RuleOC_CaseAlternative);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2213);
    match(CypherParser::WHEN);
    setState(2215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2214);
      match(CypherParser::SP);
    }
    setState(2217);
    oC_Expression();
    setState(2219);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2218);
      match(CypherParser::SP);
    }
    setState(2221);
    match(CypherParser::THEN);
    setState(2223);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2222);
      match(CypherParser::SP);
    }
    setState(2225);
    oC_Expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_VariableContext ------------------------------------------------------------------

CypherParser::OC_VariableContext::OC_VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_VariableContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_VariableContext::getRuleIndex() const {
  return CypherParser::RuleOC_Variable;
}


CypherParser::OC_VariableContext* CypherParser::oC_Variable() {
  OC_VariableContext *_localctx = _tracker.createInstance<OC_VariableContext>(_ctx, getState());
  enterRule(_localctx, 262, CypherParser::RuleOC_Variable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2227);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_NumberLiteralContext ------------------------------------------------------------------

CypherParser::OC_NumberLiteralContext::OC_NumberLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_DoubleLiteralContext* CypherParser::OC_NumberLiteralContext::oC_DoubleLiteral() {
  return getRuleContext<CypherParser::OC_DoubleLiteralContext>(0);
}

CypherParser::OC_IntegerLiteralContext* CypherParser::OC_NumberLiteralContext::oC_IntegerLiteral() {
  return getRuleContext<CypherParser::OC_IntegerLiteralContext>(0);
}


size_t CypherParser::OC_NumberLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_NumberLiteral;
}


CypherParser::OC_NumberLiteralContext* CypherParser::oC_NumberLiteral() {
  OC_NumberLiteralContext *_localctx = _tracker.createInstance<OC_NumberLiteralContext>(_ctx, getState());
  enterRule(_localctx, 264, CypherParser::RuleOC_NumberLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2231);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::RegularDecimalReal: {
        enterOuterAlt(_localctx, 1);
        setState(2229);
        oC_DoubleLiteral();
        break;
      }

      case CypherParser::DecimalInteger: {
        enterOuterAlt(_localctx, 2);
        setState(2230);
        oC_IntegerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_ParameterContext ------------------------------------------------------------------

CypherParser::OC_ParameterContext::OC_ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_ParameterContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}

tree::TerminalNode* CypherParser::OC_ParameterContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_ParameterContext::getRuleIndex() const {
  return CypherParser::RuleOC_Parameter;
}


CypherParser::OC_ParameterContext* CypherParser::oC_Parameter() {
  OC_ParameterContext *_localctx = _tracker.createInstance<OC_ParameterContext>(_ctx, getState());
  enterRule(_localctx, 266, CypherParser::RuleOC_Parameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2233);
    match(CypherParser::T__26);
    setState(2236);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::COUNT:
      case CypherParser::END:
      case CypherParser::HexLetter:
      case CypherParser::UnescapedSymbolicName:
      case CypherParser::EscapedSymbolicName: {
        setState(2234);
        oC_SymbolicName();
        break;
      }

      case CypherParser::DecimalInteger: {
        setState(2235);
        match(CypherParser::DecimalInteger);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyExpressionContext ------------------------------------------------------------------

CypherParser::OC_PropertyExpressionContext::OC_PropertyExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_AtomContext* CypherParser::OC_PropertyExpressionContext::oC_Atom() {
  return getRuleContext<CypherParser::OC_AtomContext>(0);
}

CypherParser::OC_PropertyLookupContext* CypherParser::OC_PropertyExpressionContext::oC_PropertyLookup() {
  return getRuleContext<CypherParser::OC_PropertyLookupContext>(0);
}

tree::TerminalNode* CypherParser::OC_PropertyExpressionContext::SP() {
  return getToken(CypherParser::SP, 0);
}


size_t CypherParser::OC_PropertyExpressionContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyExpression;
}


CypherParser::OC_PropertyExpressionContext* CypherParser::oC_PropertyExpression() {
  OC_PropertyExpressionContext *_localctx = _tracker.createInstance<OC_PropertyExpressionContext>(_ctx, getState());
  enterRule(_localctx, 268, CypherParser::RuleOC_PropertyExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2238);
    oC_Atom();
    setState(2240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == CypherParser::SP) {
      setState(2239);
      match(CypherParser::SP);
    }
    setState(2242);
    oC_PropertyLookup();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_PropertyKeyNameContext ------------------------------------------------------------------

CypherParser::OC_PropertyKeyNameContext::OC_PropertyKeyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SchemaNameContext* CypherParser::OC_PropertyKeyNameContext::oC_SchemaName() {
  return getRuleContext<CypherParser::OC_SchemaNameContext>(0);
}


size_t CypherParser::OC_PropertyKeyNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_PropertyKeyName;
}


CypherParser::OC_PropertyKeyNameContext* CypherParser::oC_PropertyKeyName() {
  OC_PropertyKeyNameContext *_localctx = _tracker.createInstance<OC_PropertyKeyNameContext>(_ctx, getState());
  enterRule(_localctx, 270, CypherParser::RuleOC_PropertyKeyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2244);
    oC_SchemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_IntegerLiteralContext ------------------------------------------------------------------

CypherParser::OC_IntegerLiteralContext::OC_IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_IntegerLiteralContext::DecimalInteger() {
  return getToken(CypherParser::DecimalInteger, 0);
}


size_t CypherParser::OC_IntegerLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_IntegerLiteral;
}


CypherParser::OC_IntegerLiteralContext* CypherParser::oC_IntegerLiteral() {
  OC_IntegerLiteralContext *_localctx = _tracker.createInstance<OC_IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 272, CypherParser::RuleOC_IntegerLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2246);
    match(CypherParser::DecimalInteger);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DoubleLiteralContext ------------------------------------------------------------------

CypherParser::OC_DoubleLiteralContext::OC_DoubleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DoubleLiteralContext::RegularDecimalReal() {
  return getToken(CypherParser::RegularDecimalReal, 0);
}


size_t CypherParser::OC_DoubleLiteralContext::getRuleIndex() const {
  return CypherParser::RuleOC_DoubleLiteral;
}


CypherParser::OC_DoubleLiteralContext* CypherParser::oC_DoubleLiteral() {
  OC_DoubleLiteralContext *_localctx = _tracker.createInstance<OC_DoubleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 274, CypherParser::RuleOC_DoubleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2248);
    match(CypherParser::RegularDecimalReal);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SchemaNameContext ------------------------------------------------------------------

CypherParser::OC_SchemaNameContext::OC_SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

CypherParser::OC_SymbolicNameContext* CypherParser::OC_SchemaNameContext::oC_SymbolicName() {
  return getRuleContext<CypherParser::OC_SymbolicNameContext>(0);
}


size_t CypherParser::OC_SchemaNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SchemaName;
}


CypherParser::OC_SchemaNameContext* CypherParser::oC_SchemaName() {
  OC_SchemaNameContext *_localctx = _tracker.createInstance<OC_SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 276, CypherParser::RuleOC_SchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2250);
    oC_SymbolicName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_SymbolicNameContext ------------------------------------------------------------------

CypherParser::OC_SymbolicNameContext::OC_SymbolicNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::UnescapedSymbolicName() {
  return getToken(CypherParser::UnescapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::EscapedSymbolicName() {
  return getToken(CypherParser::EscapedSymbolicName, 0);
}

tree::TerminalNode* CypherParser::OC_SymbolicNameContext::HexLetter() {
  return getToken(CypherParser::HexLetter, 0);
}

CypherParser::KU_NonReservedKeywordsContext* CypherParser::OC_SymbolicNameContext::kU_NonReservedKeywords() {
  return getRuleContext<CypherParser::KU_NonReservedKeywordsContext>(0);
}


size_t CypherParser::OC_SymbolicNameContext::getRuleIndex() const {
  return CypherParser::RuleOC_SymbolicName;
}


CypherParser::OC_SymbolicNameContext* CypherParser::oC_SymbolicName() {
  OC_SymbolicNameContext *_localctx = _tracker.createInstance<OC_SymbolicNameContext>(_ctx, getState());
  enterRule(_localctx, 278, CypherParser::RuleOC_SymbolicName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2257);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case CypherParser::UnescapedSymbolicName: {
        enterOuterAlt(_localctx, 1);
        setState(2252);
        match(CypherParser::UnescapedSymbolicName);
        break;
      }

      case CypherParser::EscapedSymbolicName: {
        enterOuterAlt(_localctx, 2);
        setState(2253);
        antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken = match(CypherParser::EscapedSymbolicName);
        if ((antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken != nullptr ? antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken->getText() : "") == "``") { notifyEmptyToken(antlrcpp::downCast<OC_SymbolicNameContext *>(_localctx)->escapedsymbolicnameToken); }
        break;
      }

      case CypherParser::HexLetter: {
        enterOuterAlt(_localctx, 3);
        setState(2255);
        match(CypherParser::HexLetter);
        break;
      }

      case CypherParser::COMMENT:
      case CypherParser::NODE:
      case CypherParser::REL:
      case CypherParser::BEGIN:
      case CypherParser::COUNT:
      case CypherParser::END: {
        enterOuterAlt(_localctx, 4);
        setState(2256);
        kU_NonReservedKeywords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KU_NonReservedKeywordsContext ------------------------------------------------------------------

CypherParser::KU_NonReservedKeywordsContext::KU_NonReservedKeywordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COMMENT() {
  return getToken(CypherParser::COMMENT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::COUNT() {
  return getToken(CypherParser::COUNT, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::NODE() {
  return getToken(CypherParser::NODE, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::REL() {
  return getToken(CypherParser::REL, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::BEGIN() {
  return getToken(CypherParser::BEGIN, 0);
}

tree::TerminalNode* CypherParser::KU_NonReservedKeywordsContext::END() {
  return getToken(CypherParser::END, 0);
}


size_t CypherParser::KU_NonReservedKeywordsContext::getRuleIndex() const {
  return CypherParser::RuleKU_NonReservedKeywords;
}


CypherParser::KU_NonReservedKeywordsContext* CypherParser::kU_NonReservedKeywords() {
  KU_NonReservedKeywordsContext *_localctx = _tracker.createInstance<KU_NonReservedKeywordsContext>(_ctx, getState());
  enterRule(_localctx, 280, CypherParser::RuleKU_NonReservedKeywords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2259);
    _la = _input->LA(1);
    if (!(_la == CypherParser::COMMENT

    || _la == CypherParser::NODE || ((((_la - 66) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 66)) & 2449958197289549841) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_LeftArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_LeftArrowHeadContext::OC_LeftArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_LeftArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_LeftArrowHead;
}


CypherParser::OC_LeftArrowHeadContext* CypherParser::oC_LeftArrowHead() {
  OC_LeftArrowHeadContext *_localctx = _tracker.createInstance<OC_LeftArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 282, CypherParser::RuleOC_LeftArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2261);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4026548224) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_RightArrowHeadContext ------------------------------------------------------------------

CypherParser::OC_RightArrowHeadContext::OC_RightArrowHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t CypherParser::OC_RightArrowHeadContext::getRuleIndex() const {
  return CypherParser::RuleOC_RightArrowHead;
}


CypherParser::OC_RightArrowHeadContext* CypherParser::oC_RightArrowHead() {
  OC_RightArrowHeadContext *_localctx = _tracker.createInstance<OC_RightArrowHeadContext>(_ctx, getState());
  enterRule(_localctx, 284, CypherParser::RuleOC_RightArrowHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2263);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 64424574976) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OC_DashContext ------------------------------------------------------------------

CypherParser::OC_DashContext::OC_DashContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* CypherParser::OC_DashContext::MINUS() {
  return getToken(CypherParser::MINUS, 0);
}


size_t CypherParser::OC_DashContext::getRuleIndex() const {
  return CypherParser::RuleOC_Dash;
}


CypherParser::OC_DashContext* CypherParser::oC_Dash() {
  OC_DashContext *_localctx = _tracker.createInstance<OC_DashContext>(_ctx, getState());
  enterRule(_localctx, 286, CypherParser::RuleOC_Dash);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2265);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 140668768878592) != 0) || _la == CypherParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool CypherParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 30: return kU_DataTypeSempred(antlrcpp::downCast<KU_DataTypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool CypherParser::kU_DataTypeSempred(KU_DataTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

void CypherParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cypherParserInitialize();
#else
  ::antlr4::internal::call_once(cypherParserOnceFlag, cypherParserInitialize);
#endif
}
