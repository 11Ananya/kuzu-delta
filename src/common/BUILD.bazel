load("@rules_cc//cc:defs.bzl", "cc_library")

cc_library(
    name = "data_chunk",
    srcs = [
        "data_chunk/data_chunk.cpp",
    ],
    hdrs = [
        "include/data_chunk/data_chunk.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "vector",
    ],
)

cc_library(
    name = "overflow_buffer",
    srcs = [
        "overflow_buffer.cpp",
    ],
    hdrs = [
        "include/overflow_buffer.h",
    ],
    visibility = ["//visibility:private"],
    deps = [
        "//src/storage/buffer_manager:memory_manager",
    ],
)

cc_library(
    name = "type_utils",
    srcs = [
        "type_utils.cpp",
    ],
    hdrs = [
        "include/type_utils.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//src/common/types",
    ],
)

cc_library(
    name = "overflow_buffer_utils",
    srcs = [
        "overflow_buffer_utils.cpp",
    ],
    hdrs = [
        "include/overflow_buffer_utils.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "overflow_buffer",
        "type_utils",
    ],
)

cc_library(
    name = "null_mask",
    srcs = [
        "null_mask.cpp",
    ],
    hdrs = [
        "include/null_mask.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "configs",
    ],
)

cc_library(
    name = "vector",
    srcs = [
        "data_chunk/data_chunk_state.cpp",
        "vector/value_vector.cpp",
        "vector/value_vector_utils.cpp",
    ],
    hdrs = [
        "include/data_chunk/data_chunk_state.h",
        "include/vector/value_vector.h",
        "include/vector/value_vector_utils.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "expression_type",
        "null_mask",
        "overflow_buffer_utils",
        "type_utils",
        "//src/common/types",
        "//src/storage/buffer_manager:memory_manager",
    ],
)

cc_library(
    name = "csv_reader",
    srcs = ["csv_reader/csv_reader.cpp"],
    hdrs = ["include/csv_reader/csv_reader.h"],
    visibility = ["//visibility:public"],
    deps = [
        "configs",
        "type_utils",
        "//src/common/types",
    ],
)

cc_library(
    name = "utils",
    srcs = [
        "assert.cpp",
        "file_utils.cpp",
        "utils.cpp",
    ],
    hdrs = [
        "include/assert.h",
        "include/exception.h",
        "include/file_utils.h",
        "include/utils.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@gabime_spdlog",
    ],
)

cc_library(
    name = "configs",
    hdrs = [
        "include/configs.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "expression_type",
    srcs = [
        "expression_type.cpp",
    ],
    hdrs = [
        "include/expression_type.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "utils",
    ],
)

cc_library(
    name = "ser_deser",
    hdrs = [
        "include/ser_deser.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "utils",
    ],
)

cc_library(
    name = "timer",
    hdrs = [
        "include/timer.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "utils",
    ],
)

cc_library(
    name = "profiler",
    srcs = [
        "metric.cpp",
        "profiler.cpp",
    ],
    hdrs = [
        "include/metric.h",
        "include/profiler.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "timer",
    ],
)

cc_library(
    name = "task_system",
    srcs = glob([
        "task_system/*.cpp",
    ]),
    hdrs = glob([
        "include/task_system/*.h",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        "configs",
        "utils",
    ],
)

cc_library(
    name = "clause_type",
    hdrs = [
        "include/clause_type.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "statement_type",
    hdrs = [
        "include/statement_type.h",
    ],
    visibility = ["//visibility:public"],
)
